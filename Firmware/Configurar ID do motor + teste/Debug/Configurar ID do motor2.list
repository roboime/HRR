
Configurar ID do motor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c224  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800c3ac  0800c3ac  0001c3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c428  0800c428  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c430  0800c430  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c430  0800c430  0001c430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800c438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          000021c8  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022c4  200022c4  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204a1  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000464f  00000000  00000000  000405cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  00044c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001968  00000000  00000000  00046760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028415  00000000  00000000  000480c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000220ba  00000000  00000000  000704dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b56  00000000  00000000  00092597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001760ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000724c  00000000  00000000  00176140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c394 	.word	0x0800c394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800c394 	.word	0x0800c394

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f9e8 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f822 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fb9c 	bl	8000c14 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8fa 	bl	80006d4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f00b fa2a 	bl	800b938 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80004e4:	f000 f8d6 	bl	8000694 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004e8:	f009 f8b8 	bl	800965c <MX_FATFS_Init>
  MX_DMA_Init();
 80004ec:	f000 fb44 	bl	8000b78 <MX_DMA_Init>
  MX_SPI2_Init();
 80004f0:	f000 f926 	bl	8000740 <MX_SPI2_Init>
  MX_TIM3_Init();
 80004f4:	f000 f95a 	bl	80007ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f8:	f000 f9d2 	bl	80008a0 <MX_TIM4_Init>
  MX_TIM6_Init();
 80004fc:	f000 fa34 	bl	8000968 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000500:	f000 fa92 	bl	8000a28 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000504:	f000 faba 	bl	8000a7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000508:	f000 fae2 	bl	8000ad0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800050c:	f000 fb0a 	bl	8000b24 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000510:	f000 f86e 	bl	80005f0 <MX_ADC1_Init>
  MX_UART4_Init();
 8000514:	f000 fa5e 	bl	80009d4 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x4c>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00b ff2a 	bl	800c384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fd4e 	bl	8004044 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fbfd 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 ffaf 	bl	8004534 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 fbe6 	bl	8000dac <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f001 f9bd 	bl	80019d0 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 fba6 	bl	8000dac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000660:	2301      	movs	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000668:	2301      	movs	r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f001 f9f1 	bl	8001a58 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 fb96 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000118 	.word	0x20000118
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 800069a:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <MX_SDIO_SD_Init+0x3c>)
 800069c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <MX_SDIO_SD_Init+0x38>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	200001c0 	.word	0x200001c0
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f005 f8ad 	bl	8005884 <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 fb3c 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000244 	.word	0x20000244
 800073c:	40013000 	.word	0x40013000

08000740 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI2_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI2_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI2_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI2_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI2_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI2_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI2_Init+0x64>)
 8000792:	f005 f877 	bl	8005884 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fb06 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000029c 	.word	0x2000029c
 80007a8:	40003800 	.word	0x40003800

080007ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_TIM3_Init+0xec>)
 80007d0:	4a32      	ldr	r2, [pc, #200]	; (800089c <MX_TIM3_Init+0xf0>)
 80007d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_TIM3_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_TIM3_Init+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_TIM3_Init+0xec>)
 80007e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_TIM3_Init+0xec>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_TIM3_Init+0xec>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <MX_TIM3_Init+0xec>)
 80007f6:	f005 f91d 	bl	8005a34 <HAL_TIM_PWM_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 fad4 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4619      	mov	r1, r3
 8000812:	4821      	ldr	r0, [pc, #132]	; (8000898 <MX_TIM3_Init+0xec>)
 8000814:	f005 fdaa 	bl	800636c <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800081e:	f000 fac5 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2360      	movs	r3, #96	; 0x60
 8000824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4817      	ldr	r0, [pc, #92]	; (8000898 <MX_TIM3_Init+0xec>)
 800083a:	f005 fa53 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000844:	f000 fab2 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2204      	movs	r2, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_TIM3_Init+0xec>)
 8000850:	f005 fa48 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800085a:	f000 faa7 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2208      	movs	r2, #8
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_TIM3_Init+0xec>)
 8000866:	f005 fa3d 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000870:	f000 fa9c 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	220c      	movs	r2, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM3_Init+0xec>)
 800087c:	f005 fa32 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fa91 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM3_Init+0xec>)
 800088c:	f000 fc98 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200002f4 	.word	0x200002f4
 800089c:	40000400 	.word	0x40000400

080008a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <MX_TIM4_Init+0xc4>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008e8:	481d      	ldr	r0, [pc, #116]	; (8000960 <MX_TIM4_Init+0xc0>)
 80008ea:	f005 f8a3 	bl	8005a34 <HAL_TIM_PWM_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008f4:	f000 fa5a 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4619      	mov	r1, r3
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <MX_TIM4_Init+0xc0>)
 8000908:	f005 fd30 	bl	800636c <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000912:	f000 fa4b 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000916:	2360      	movs	r3, #96	; 0x60
 8000918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2208      	movs	r2, #8
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_TIM4_Init+0xc0>)
 800092e:	f005 f9d9 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000938:	f000 fa38 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	220c      	movs	r2, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM4_Init+0xc0>)
 8000944:	f005 f9ce 	bl	8005ce4 <HAL_TIM_PWM_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800094e:	f000 fa2d 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM4_Init+0xc0>)
 8000954:	f000 fc34 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000033c 	.word	0x2000033c
 8000964:	40000800 	.word	0x40000800

08000968 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM6_Init+0x64>)
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_TIM6_Init+0x68>)
 800097a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_TIM6_Init+0x64>)
 800097e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000982:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_TIM6_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_TIM6_Init+0x64>)
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_TIM6_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM6_Init+0x64>)
 8000998:	f004 fffd 	bl	8005996 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009a2:	f000 fa03 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM6_Init+0x64>)
 80009b4:	f005 fcda 	bl	800636c <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009be:	f000 f9f5 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000384 	.word	0x20000384
 80009d0:	40001000 	.word	0x40001000

080009d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_UART4_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009e0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80009e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_UART4_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_UART4_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_UART4_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_UART4_Init+0x4c>)
 8000a0c:	f005 fd3e 	bl	800648c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f9c9 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200003cc 	.word	0x200003cc
 8000a24:	40004c00 	.word	0x40004c00

08000a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <MX_USART1_UART_Init+0x4c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a34:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <MX_USART1_UART_Init+0x50>)
 8000a36:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_USART1_UART_Init+0x48>)
 8000a5e:	f005 fd62 	bl	8006526 <HAL_HalfDuplex_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000a68:	f000 f9a0 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000410 	.word	0x20000410
 8000a74:	40011000 	.word	0x40011000
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <MX_USART2_UART_Init+0x50>)
 8000a8a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_USART2_UART_Init+0x48>)
 8000ab2:	f005 fd38 	bl	8006526 <HAL_HalfDuplex_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000abc:	f000 f976 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000454 	.word	0x20000454
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	000186a0 	.word	0x000186a0

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000adc:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <MX_USART3_UART_Init+0x50>)
 8000ade:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000af4:	220c      	movs	r2, #12
 8000af6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USART3_UART_Init+0x48>)
 8000b06:	f005 fd0e 	bl	8006526 <HAL_HalfDuplex_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8000b10:	f000 f94c 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000498 	.word	0x20000498
 8000b1c:	40004800 	.word	0x40004800
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <MX_USART6_UART_Init+0x4c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b30:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <MX_USART6_UART_Init+0x50>)
 8000b32:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b48:	220c      	movs	r2, #12
 8000b4a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_USART6_UART_Init+0x48>)
 8000b5a:	f005 fce4 	bl	8006526 <HAL_HalfDuplex_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8000b64:	f000 f922 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200004dc 	.word	0x200004dc
 8000b70:	40011400 	.word	0x40011400
 8000b74:	000186a0 	.word	0x000186a0

08000b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_DMA_Init+0x98>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <MX_DMA_Init+0x98>)
 8000b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_DMA_Init+0x98>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_DMA_Init+0x98>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <MX_DMA_Init+0x98>)
 8000ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_DMA_Init+0x98>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200e      	movs	r0, #14
 8000bbc:	f001 fa45 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bc0:	200e      	movs	r0, #14
 8000bc2:	f001 fa5e 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2011      	movs	r0, #17
 8000bcc:	f001 fa3d 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bd0:	2011      	movs	r0, #17
 8000bd2:	f001 fa56 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2038      	movs	r0, #56	; 0x38
 8000bdc:	f001 fa35 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000be0:	2038      	movs	r0, #56	; 0x38
 8000be2:	f001 fa4e 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2045      	movs	r0, #69	; 0x45
 8000bec:	f001 fa2d 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000bf0:	2045      	movs	r0, #69	; 0x45
 8000bf2:	f001 fa46 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2046      	movs	r0, #70	; 0x46
 8000bfc:	f001 fa25 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000c00:	2046      	movs	r0, #70	; 0x46
 8000c02:	f001 fa3e 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	4b59      	ldr	r3, [pc, #356]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a58      	ldr	r2, [pc, #352]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b56      	ldr	r3, [pc, #344]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a51      	ldr	r2, [pc, #324]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b4f      	ldr	r3, [pc, #316]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a4a      	ldr	r2, [pc, #296]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a43      	ldr	r2, [pc, #268]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a3c      	ldr	r2, [pc, #240]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a35      	ldr	r2, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cd8:	482f      	ldr	r0, [pc, #188]	; (8000d98 <MX_GPIO_Init+0x184>)
 8000cda:	f001 ff1d 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4828      	ldr	r0, [pc, #160]	; (8000d9c <MX_GPIO_Init+0x188>)
 8000cfa:	f001 fd59 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d02:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_GPIO_Init+0x18c>)
 8000d14:	f001 fd4c 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000d36:	f001 fd3b 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000d3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_GPIO_Init+0x184>)
 8000d54:	f001 fd2c 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d62:	2302      	movs	r3, #2
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <MX_GPIO_Init+0x188>)
 8000d6e:	f001 fd1f 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <MX_GPIO_Init+0x194>)
 8000d88:	f001 fd12 	bl	80027b0 <HAL_GPIO_Init>

}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40021000 	.word	0x40021000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x4c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x4c>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <HAL_ADC_MspInit+0xd8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d156      	bne.n	8000ed8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_ADC_MspInit+0xdc>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <HAL_ADC_MspInit+0xdc>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <HAL_ADC_MspInit+0xdc>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <HAL_ADC_MspInit+0xdc>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <HAL_ADC_MspInit+0xdc>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_ADC_MspInit+0xdc>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BAT_Voltage_Pin;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_Voltage_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <HAL_ADC_MspInit+0xe0>)
 8000e76:	f001 fc9b 	bl	80027b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_ADC_MspInit+0xe8>)
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000ea4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000ebe:	f001 f8fb 	bl	80020b8 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ec8:	f7ff ff70 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000ed0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_ADC_MspInit+0xe4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40012000 	.word	0x40012000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	20000160 	.word	0x20000160
 8000ef0:	40026410 	.word	0x40026410

08000ef4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <HAL_SD_MspInit+0xc0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d14a      	bne.n	8000fac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_SD_MspInit+0xc4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000f6a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <HAL_SD_MspInit+0xc8>)
 8000f88:	f001 fc12 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <HAL_SD_MspInit+0xcc>)
 8000fa8:	f001 fc02 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a41      	ldr	r2, [pc, #260]	; (80010e8 <HAL_SPI_MspInit+0x124>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12c      	bne.n	8001040 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HAL_SPI_MspInit+0x128>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800101e:	23e0      	movs	r3, #224	; 0xe0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102e:	2305      	movs	r3, #5
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	482d      	ldr	r0, [pc, #180]	; (80010f0 <HAL_SPI_MspInit+0x12c>)
 800103a:	f001 fbb9 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800103e:	e04f      	b.n	80010e0 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2b      	ldr	r2, [pc, #172]	; (80010f4 <HAL_SPI_MspInit+0x130>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d14a      	bne.n	80010e0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_SPI_MspInit+0x128>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_SPI_MspInit+0x128>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_SPI_MspInit+0x128>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_SPI_MspInit+0x128>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109e:	2304      	movs	r3, #4
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ae:	2305      	movs	r3, #5
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <HAL_SPI_MspInit+0x134>)
 80010ba:	f001 fb79 	bl	80027b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80010be:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d0:	2305      	movs	r3, #5
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <HAL_SPI_MspInit+0x138>)
 80010dc:	f001 fb68 	bl	80027b0 <HAL_GPIO_Init>
}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40013000 	.word	0x40013000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40003800 	.word	0x40003800
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020400 	.word	0x40020400

08001100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_TIM_PWM_MspInit+0x64>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10e      	bne.n	8001130 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_TIM_PWM_MspInit+0x68>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_TIM_PWM_MspInit+0x68>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_TIM_PWM_MspInit+0x68>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800112e:	e012      	b.n	8001156 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_TIM_PWM_MspInit+0x6c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10d      	bne.n	8001156 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_TIM_PWM_MspInit+0x68>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_TIM_PWM_MspInit+0x68>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_TIM_PWM_MspInit+0x68>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40000400 	.word	0x40000400
 8001168:	40023800 	.word	0x40023800
 800116c:	40000800 	.word	0x40000800

08001170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_TIM_Base_MspInit+0x48>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d115      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_TIM_Base_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_TIM_Base_MspInit+0x4c>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_Base_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	2036      	movs	r0, #54	; 0x36
 80011a4:	f000 ff51 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a8:	2036      	movs	r0, #54	; 0x36
 80011aa:	f000 ff6a 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40001000 	.word	0x40001000
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a33      	ldr	r2, [pc, #204]	; (80012ac <HAL_TIM_MspPostInit+0xec>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d13c      	bne.n	800125c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a31      	ldr	r2, [pc, #196]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800121a:	2313      	movs	r3, #19
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800122a:	2302      	movs	r3, #2
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	481f      	ldr	r0, [pc, #124]	; (80012b4 <HAL_TIM_MspPostInit+0xf4>)
 8001236:	f001 fabb 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800124a:	2302      	movs	r3, #2
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_TIM_MspPostInit+0xf8>)
 8001256:	f001 faab 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800125a:	e023      	b.n	80012a4 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_TIM_MspPostInit+0xfc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d11e      	bne.n	80012a4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_TIM_MspPostInit+0xf0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001282:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001294:	2302      	movs	r3, #2
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_TIM_MspPostInit+0xf4>)
 80012a0:	f001 fa86 	bl	80027b0 <HAL_GPIO_Init>
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40000800 	.word	0x40000800

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b092      	sub	sp, #72	; 0x48
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a84      	ldr	r2, [pc, #528]	; (80014f0 <HAL_UART_MspInit+0x230>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d135      	bne.n	800134e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
 80012e6:	4b83      	ldr	r3, [pc, #524]	; (80014f4 <HAL_UART_MspInit+0x234>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a82      	ldr	r2, [pc, #520]	; (80014f4 <HAL_UART_MspInit+0x234>)
 80012ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b80      	ldr	r3, [pc, #512]	; (80014f4 <HAL_UART_MspInit+0x234>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001302:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a7b      	ldr	r2, [pc, #492]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800131a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800132c:	2308      	movs	r3, #8
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001334:	4619      	mov	r1, r3
 8001336:	4870      	ldr	r0, [pc, #448]	; (80014f8 <HAL_UART_MspInit+0x238>)
 8001338:	f001 fa3a 	bl	80027b0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	2034      	movs	r0, #52	; 0x34
 8001342:	f000 fe82 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001346:	2034      	movs	r0, #52	; 0x34
 8001348:	f000 fe9b 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800134c:	e1b6      	b.n	80016bc <HAL_UART_MspInit+0x3fc>
  else if(huart->Instance==USART1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6a      	ldr	r2, [pc, #424]	; (80014fc <HAL_UART_MspInit+0x23c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d162      	bne.n	800141e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
 800135c:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	4a64      	ldr	r2, [pc, #400]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6453      	str	r3, [r2, #68]	; 0x44
 8001368:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a5d      	ldr	r2, [pc, #372]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001394:	2312      	movs	r3, #18
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a0:	2307      	movs	r3, #7
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013a8:	4619      	mov	r1, r3
 80013aa:	4855      	ldr	r0, [pc, #340]	; (8001500 <HAL_UART_MspInit+0x240>)
 80013ac:	f001 fa00 	bl	80027b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80013b0:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013b2:	4a55      	ldr	r2, [pc, #340]	; (8001508 <HAL_UART_MspInit+0x248>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c4:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ca:	4b4e      	ldr	r3, [pc, #312]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013f0:	4844      	ldr	r0, [pc, #272]	; (8001504 <HAL_UART_MspInit+0x244>)
 80013f2:	f000 fe61 	bl	80020b8 <HAL_DMA_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80013fc:	f7ff fcd6 	bl	8000dac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_UART_MspInit+0x244>)
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <HAL_UART_MspInit+0x244>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2025      	movs	r0, #37	; 0x25
 8001412:	f000 fe1a 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001416:	2025      	movs	r0, #37	; 0x25
 8001418:	f000 fe33 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 800141c:	e14e      	b.n	80016bc <HAL_UART_MspInit+0x3fc>
  else if(huart->Instance==USART2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a3a      	ldr	r2, [pc, #232]	; (800150c <HAL_UART_MspInit+0x24c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d179      	bne.n	800151c <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a30      	ldr	r2, [pc, #192]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a29      	ldr	r2, [pc, #164]	; (80014f4 <HAL_UART_MspInit+0x234>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <HAL_UART_MspInit+0x234>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001460:	2304      	movs	r3, #4
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001464:	2312      	movs	r3, #18
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001470:	2307      	movs	r3, #7
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001478:	4619      	mov	r1, r3
 800147a:	4825      	ldr	r0, [pc, #148]	; (8001510 <HAL_UART_MspInit+0x250>)
 800147c:	f001 f998 	bl	80027b0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_UART_MspInit+0x254>)
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_UART_MspInit+0x258>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_UART_MspInit+0x254>)
 8001488:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_UART_MspInit+0x254>)
 8001490:	2240      	movs	r2, #64	; 0x40
 8001492:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_UART_MspInit+0x254>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_UART_MspInit+0x254>)
 800149c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014c0:	4814      	ldr	r0, [pc, #80]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014c2:	f000 fdf9 	bl	80020b8 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_UART_MspInit+0x210>
      Error_Handler();
 80014cc:	f7ff fc6e 	bl	8000dac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_UART_MspInit+0x254>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2026      	movs	r0, #38	; 0x26
 80014e2:	f000 fdb2 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e6:	2026      	movs	r0, #38	; 0x26
 80014e8:	f000 fdcb 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 80014ec:	e0e6      	b.n	80016bc <HAL_UART_MspInit+0x3fc>
 80014ee:	bf00      	nop
 80014f0:	40004c00 	.word	0x40004c00
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40011000 	.word	0x40011000
 8001500:	40020400 	.word	0x40020400
 8001504:	20000520 	.word	0x20000520
 8001508:	400264b8 	.word	0x400264b8
 800150c:	40004400 	.word	0x40004400
 8001510:	40020000 	.word	0x40020000
 8001514:	20000580 	.word	0x20000580
 8001518:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_UART_MspInit+0x404>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d163      	bne.n	80015ee <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_UART_MspInit+0x408>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_UART_MspInit+0x408>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <HAL_UART_MspInit+0x408>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <HAL_UART_MspInit+0x408>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a5f      	ldr	r2, [pc, #380]	; (80016c8 <HAL_UART_MspInit+0x408>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <HAL_UART_MspInit+0x408>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001564:	2312      	movs	r3, #18
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001568:	2301      	movs	r3, #1
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001570:	2307      	movs	r3, #7
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001578:	4619      	mov	r1, r3
 800157a:	4854      	ldr	r0, [pc, #336]	; (80016cc <HAL_UART_MspInit+0x40c>)
 800157c:	f001 f918 	bl	80027b0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_UART_MspInit+0x410>)
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_UART_MspInit+0x414>)
 8001584:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001586:	4b52      	ldr	r3, [pc, #328]	; (80016d0 <HAL_UART_MspInit+0x410>)
 8001588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_UART_MspInit+0x410>)
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_UART_MspInit+0x410>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_UART_MspInit+0x410>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a8:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015c0:	4843      	ldr	r0, [pc, #268]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015c2:	f000 fd79 	bl	80020b8 <HAL_DMA_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_UART_MspInit+0x310>
      Error_Handler();
 80015cc:	f7ff fbee 	bl	8000dac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3f      	ldr	r2, [pc, #252]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
 80015d6:	4a3e      	ldr	r2, [pc, #248]	; (80016d0 <HAL_UART_MspInit+0x410>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2027      	movs	r0, #39	; 0x27
 80015e2:	f000 fd32 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015e6:	2027      	movs	r0, #39	; 0x27
 80015e8:	f000 fd4b 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 80015ec:	e066      	b.n	80016bc <HAL_UART_MspInit+0x3fc>
  else if(huart->Instance==USART6)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <HAL_UART_MspInit+0x418>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d161      	bne.n	80016bc <HAL_UART_MspInit+0x3fc>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_UART_MspInit+0x408>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <HAL_UART_MspInit+0x408>)
 8001602:	f043 0320 	orr.w	r3, r3, #32
 8001606:	6453      	str	r3, [r2, #68]	; 0x44
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_UART_MspInit+0x408>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_UART_MspInit+0x408>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a2a      	ldr	r2, [pc, #168]	; (80016c8 <HAL_UART_MspInit+0x408>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_UART_MspInit+0x408>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001630:	2340      	movs	r3, #64	; 0x40
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001634:	2312      	movs	r3, #18
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001638:	2301      	movs	r3, #1
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001640:	2308      	movs	r3, #8
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001648:	4619      	mov	r1, r3
 800164a:	4824      	ldr	r0, [pc, #144]	; (80016dc <HAL_UART_MspInit+0x41c>)
 800164c:	f001 f8b0 	bl	80027b0 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001652:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_UART_MspInit+0x424>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001658:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800165c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_UART_MspInit+0x420>)
 800166c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001670:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x420>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_UART_MspInit+0x420>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <HAL_UART_MspInit+0x420>)
 8001692:	f000 fd11 	bl	80020b8 <HAL_DMA_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0x3e0>
      Error_Handler();
 800169c:	f7ff fb86 	bl	8000dac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_UART_MspInit+0x420>)
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_UART_MspInit+0x420>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2047      	movs	r0, #71	; 0x47
 80016b2:	f000 fcca 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016b6:	2047      	movs	r0, #71	; 0x47
 80016b8:	f000 fce3 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3748      	adds	r7, #72	; 0x48
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004800 	.word	0x40004800
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	200005e0 	.word	0x200005e0
 80016d4:	40026058 	.word	0x40026058
 80016d8:	40011400 	.word	0x40011400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	20000640 	.word	0x20000640
 80016e4:	400264a0 	.word	0x400264a0

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f908 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA1_Stream3_IRQHandler+0x10>)
 8001742:	f000 fdf9 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200005e0 	.word	0x200005e0

08001750 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA1_Stream6_IRQHandler+0x10>)
 8001756:	f000 fdef 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000580 	.word	0x20000580

08001764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <USART1_IRQHandler+0x10>)
 800176a:	f004 ff31 	bl	80065d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000410 	.word	0x20000410

08001778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <USART2_IRQHandler+0x10>)
 800177e:	f004 ff27 	bl	80065d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000454 	.word	0x20000454

0800178c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <USART3_IRQHandler+0x10>)
 8001792:	f004 ff1d 	bl	80065d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000498 	.word	0x20000498

080017a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <UART4_IRQHandler+0x10>)
 80017a6:	f004 ff13 	bl	80065d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003cc 	.word	0x200003cc

080017b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM6_DAC_IRQHandler+0x10>)
 80017ba:	f004 f98a 	bl	8005ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000384 	.word	0x20000384

080017c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA2_Stream0_IRQHandler+0x10>)
 80017ce:	f000 fdb3 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000160 	.word	0x20000160

080017dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <OTG_FS_IRQHandler+0x10>)
 80017e2:	f001 fb02 	bl	8002dea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20001b98 	.word	0x20001b98

080017f0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA2_Stream6_IRQHandler+0x10>)
 80017f6:	f000 fd9f 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000640 	.word	0x20000640

08001804 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA2_Stream7_IRQHandler+0x10>)
 800180a:	f000 fd95 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000520 	.word	0x20000520

08001818 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART6_IRQHandler+0x10>)
 800181e:	f004 fed7 	bl	80065d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200004dc 	.word	0x200004dc

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001856:	490e      	ldr	r1, [pc, #56]	; (8001890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001858:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800186c:	4c0b      	ldr	r4, [pc, #44]	; (800189c <LoopFillZerobss+0x26>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800187a:	f7ff ffd7 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f00a fd5d 	bl	800c33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7fe fe23 	bl	80004cc <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001894:	0800c438 	.word	0x0800c438
  ldr r2, =_sbss
 8001898:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800189c:	200022c4 	.word	0x200022c4

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 fbb1 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fa6e 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fbc9 	bl	800209e <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 fb91 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	; (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	200006a0 	.word	0x200006a0

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200006a0 	.word	0x200006a0

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008

080019d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e033      	b.n	8001a4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fa0a 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a16:	f023 0302 	bic.w	r3, r3, #2
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f93a 	bl	8001c9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1c>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e105      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x228>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d925      	bls.n	8001ad0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68d9      	ldr	r1, [r3, #12]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	3b1e      	subs	r3, #30
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68d9      	ldr	r1, [r3, #12]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3b1e      	subs	r3, #30
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	e022      	b.n	8001b16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	400a      	ands	r2, r1
 8001af2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4403      	add	r3, r0
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d824      	bhi.n	8001b68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b05      	subs	r3, #5
 8001b30:	221f      	movs	r2, #31
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b05      	subs	r3, #5
 8001b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
 8001b66:	e04c      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b0c      	cmp	r3, #12
 8001b6e:	d824      	bhi.n	8001bba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b23      	subs	r3, #35	; 0x23
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	400a      	ands	r2, r1
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b23      	subs	r3, #35	; 0x23
 8001bac:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb8:	e023      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b41      	subs	r3, #65	; 0x41
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b41      	subs	r3, #65	; 0x41
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_ADC_ConfigChannel+0x234>)
 8001c04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <HAL_ADC_ConfigChannel+0x238>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1cc>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_ADC_ConfigChannel+0x238>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d123      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x21e>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d003      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x1e6>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b11      	cmp	r3, #17
 8001c3c:	d11b      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d111      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_ADC_ConfigChannel+0x23c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_ADC_ConfigChannel+0x240>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	0c9a      	lsrs	r2, r3, #18
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c68:	e002      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f9      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40012300 	.word	0x40012300
 8001c90:	40012000 	.word	0x40012000
 8001c94:	20000000 	.word	0x20000000
 8001c98:	431bde83 	.word	0x431bde83

08001c9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca4:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <ADC_Init+0x1f0>)
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	021a      	lsls	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <ADC_Init+0x1f4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e00f      	b.n	8001d9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0202 	bic.w	r2, r2, #2
 8001da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	005a      	lsls	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001de6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	3b01      	subs	r3, #1
 8001df4:	035a      	lsls	r2, r3, #13
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	e007      	b.n	8001e10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	051a      	lsls	r2, r3, #20
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e52:	025a      	lsls	r2, r3, #9
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	029a      	lsls	r2, r3, #10
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40012300 	.word	0x40012300
 8001e90:	0f000001 	.word	0x0f000001

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff29 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff3e 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff31 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff fc54 	bl	8001970 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e099      	b.n	8002208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f4:	e00f      	b.n	8002116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f6:	f7ff fc3b 	bl	8001970 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b05      	cmp	r3, #5
 8002102:	d908      	bls.n	8002116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e078      	b.n	8002208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e8      	bne.n	80020f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_DMA_Init+0x158>)
 8002130:	4013      	ands	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b04      	cmp	r3, #4
 800216e:	d107      	bne.n	8002180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4313      	orrs	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f023 0307 	bic.w	r3, r3, #7
 8002196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d117      	bne.n	80021da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fa7b 	bl	80026b8 <DMA_CheckFifoParam>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021d6:	2301      	movs	r3, #1
 80021d8:	e016      	b.n	8002208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fa32 	bl	800264c <DMA_CalcBaseAndBitshift>
 80021e8:	4603      	mov	r3, r0
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	223f      	movs	r2, #63	; 0x3f
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	f010803f 	.word	0xf010803f

08002214 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002222:	f7ff fba5 	bl	8001970 <HAL_GetTick>
 8002226:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d008      	beq.n	8002246 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e052      	b.n	80022ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0216 	bic.w	r2, r2, #22
 8002254:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002264:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_DMA_Abort+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002296:	e013      	b.n	80022c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002298:	f7ff fb6a 	bl	8001970 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d90c      	bls.n	80022c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2220      	movs	r2, #32
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2203      	movs	r2, #3
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e015      	b.n	80022ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e4      	bne.n	8002298 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	223f      	movs	r2, #63	; 0x3f
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00c      	b.n	800232c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002344:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <HAL_DMA_IRQHandler+0x248>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a8e      	ldr	r2, [pc, #568]	; (8002584 <HAL_DMA_IRQHandler+0x24c>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2208      	movs	r2, #8
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01a      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0204 	bic.w	r2, r2, #4
 800238a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2208      	movs	r2, #8
 8002392:	409a      	lsls	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2201      	movs	r2, #1
 80023c8:	409a      	lsls	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2204      	movs	r2, #4
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d012      	beq.n	8002410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2204      	movs	r2, #4
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f043 0204 	orr.w	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2210      	movs	r2, #16
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d043      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03c      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2210      	movs	r2, #16
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d018      	beq.n	800247a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
 8002466:	e01f      	b.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
 8002478:	e016      	b.n	80024a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0208 	bic.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2220      	movs	r2, #32
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 808f 	beq.w	80025d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8087 	beq.w	80025d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	2220      	movs	r2, #32
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d136      	bne.n	8002550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_IRQHandler+0x1da>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	223f      	movs	r2, #63	; 0x3f
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	2b00      	cmp	r3, #0
 8002544:	d07e      	beq.n	8002644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
        }
        return;
 800254e:	e079      	b.n	8002644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01d      	beq.n	800259a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	2b00      	cmp	r3, #0
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e02c      	b.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000
 8002584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e01e      	b.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d032      	beq.n	8002646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2205      	movs	r2, #5
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d307      	bcc.n	8002620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_DMA_IRQHandler+0x2cc>
 800261e:	e000      	b.n	8002622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
 8002642:	e000      	b.n	8002646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002644:	bf00      	nop
    }
  }
}
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3b10      	subs	r3, #16
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <DMA_CalcBaseAndBitshift+0x64>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d909      	bls.n	800268e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	; 0x58
 800268c:	e007      	b.n	800269e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	aaaaaaab 	.word	0xaaaaaaab
 80026b4:	0800c40c 	.word	0x0800c40c

080026b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11f      	bne.n	8002712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d856      	bhi.n	8002786 <DMA_CheckFifoParam+0xce>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <DMA_CheckFifoParam+0x28>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	080026f1 	.word	0x080026f1
 80026e4:	08002703 	.word	0x08002703
 80026e8:	080026f1 	.word	0x080026f1
 80026ec:	08002787 	.word	0x08002787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d046      	beq.n	800278a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e043      	b.n	800278a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800270a:	d140      	bne.n	800278e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002710:	e03d      	b.n	800278e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271a:	d121      	bne.n	8002760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d837      	bhi.n	8002792 <DMA_CheckFifoParam+0xda>
 8002722:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <DMA_CheckFifoParam+0x70>)
 8002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002728:	08002739 	.word	0x08002739
 800272c:	0800273f 	.word	0x0800273f
 8002730:	08002739 	.word	0x08002739
 8002734:	08002751 	.word	0x08002751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e030      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d025      	beq.n	8002796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274e:	e022      	b.n	8002796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002758:	d11f      	bne.n	800279a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800275e:	e01c      	b.n	800279a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d903      	bls.n	800276e <DMA_CheckFifoParam+0xb6>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d003      	beq.n	8002774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800276c:	e018      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
      break;
 8002772:	e015      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00e      	beq.n	800279e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      break;
 8002784:	e00b      	b.n	800279e <DMA_CheckFifoParam+0xe6>
      break;
 8002786:	bf00      	nop
 8002788:	e00a      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e008      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e006      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e004      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
    }
  } 
  
  return status; 
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e16b      	b.n	8002aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f040 815a 	bne.w	8002a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d005      	beq.n	8002802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d130      	bne.n	8002864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 0201 	and.w	r2, r3, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b03      	cmp	r3, #3
 800286e:	d017      	beq.n	80028a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d123      	bne.n	80028f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	69b9      	ldr	r1, [r7, #24]
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80b4 	beq.w	8002a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b60      	ldr	r3, [pc, #384]	; (8002abc <HAL_GPIO_Init+0x30c>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <HAL_GPIO_Init+0x30c>)
 8002940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_GPIO_Init+0x30c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002952:	4a5b      	ldr	r2, [pc, #364]	; (8002ac0 <HAL_GPIO_Init+0x310>)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_GPIO_Init+0x314>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02b      	beq.n	80029d6 <HAL_GPIO_Init+0x226>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <HAL_GPIO_Init+0x318>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d025      	beq.n	80029d2 <HAL_GPIO_Init+0x222>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a50      	ldr	r2, [pc, #320]	; (8002acc <HAL_GPIO_Init+0x31c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01f      	beq.n	80029ce <HAL_GPIO_Init+0x21e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x320>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x21a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_GPIO_Init+0x324>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x216>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_GPIO_Init+0x328>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x212>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x32c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x330>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x20a>
 80029b6:	2307      	movs	r3, #7
 80029b8:	e00e      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029ba:	2308      	movs	r3, #8
 80029bc:	e00c      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029be:	2306      	movs	r3, #6
 80029c0:	e00a      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029c2:	2305      	movs	r3, #5
 80029c4:	e008      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e004      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x228>
 80029d6:	2300      	movs	r3, #0
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f002 0203 	and.w	r2, r2, #3
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	4093      	lsls	r3, r2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e8:	4935      	ldr	r1, [pc, #212]	; (8002ac0 <HAL_GPIO_Init+0x310>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1a:	4a32      	ldr	r2, [pc, #200]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a44:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	f67f ae90 	bls.w	80027cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e001      	b.n	8002b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4c:	b08f      	sub	sp, #60	; 0x3c
 8002b4e:	af0a      	add	r7, sp, #40	; 0x28
 8002b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e10f      	b.n	8002d7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f009 f8be 	bl	800bcf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2203      	movs	r2, #3
 8002b80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 fa25 	bl	8007fea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	687e      	ldr	r6, [r7, #4]
 8002ba8:	466d      	mov	r5, sp
 8002baa:	f106 0410 	add.w	r4, r6, #16
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bbe:	1d33      	adds	r3, r6, #4
 8002bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	f005 f8fc 	bl	8007dc0 <USB_CoreInit>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0d0      	b.n	8002d7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f005 fa13 	bl	800800c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e04a      	b.n	8002c82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333d      	adds	r3, #61	; 0x3d
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333c      	adds	r3, #60	; 0x3c
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	b298      	uxth	r0, r3
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3344      	adds	r3, #68	; 0x44
 8002c28:	4602      	mov	r2, r0
 8002c2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3340      	adds	r3, #64	; 0x40
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3348      	adds	r3, #72	; 0x48
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	; 0x4c
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3354      	adds	r3, #84	; 0x54
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3af      	bcc.n	8002bec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e044      	b.n	8002d1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3b5      	bcc.n	8002c92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	687e      	ldr	r6, [r7, #4]
 8002d2e:	466d      	mov	r5, sp
 8002d30:	f106 0410 	add.w	r4, r6, #16
 8002d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d44:	1d33      	adds	r3, r6, #4
 8002d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f005 f9ab 	bl	80080a4 <USB_DevInit>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e00d      	b.n	8002d7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f006 fafa 	bl	800936e <USB_DevDisconnect>

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_Start+0x1c>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e020      	b.n	8002de2 <HAL_PCD_Start+0x5e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d109      	bne.n	8002dc4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d005      	beq.n	8002dc4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 f8fd 	bl	8007fc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f006 faaa 	bl	800932c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dea:	b590      	push	{r4, r7, lr}
 8002dec:	b08d      	sub	sp, #52	; 0x34
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f006 fb68 	bl	80094d6 <USB_GetMode>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 848a 	bne.w	8003722 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 facc 	bl	80093b0 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8480 	beq.w	8003720 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f006 fab9 	bl	80093b0 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d107      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f002 0202 	and.w	r2, r2, #2
 8002e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f006 faa7 	bl	80093b0 <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d161      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0210 	bic.w	r2, r2, #16
 8002e7a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	0c5b      	lsrs	r3, r3, #17
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d124      	bne.n	8002ef2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d035      	beq.n	8002f20 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6a38      	ldr	r0, [r7, #32]
 8002ec8:	f006 f8de 	bl	8009088 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	441a      	add	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eea:	441a      	add	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	621a      	str	r2, [r3, #32]
 8002ef0:	e016      	b.n	8002f20 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	0c5b      	lsrs	r3, r3, #17
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d110      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f04:	2208      	movs	r2, #8
 8002f06:	4619      	mov	r1, r3
 8002f08:	6a38      	ldr	r0, [r7, #32]
 8002f0a:	f006 f8bd 	bl	8009088 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1a:	441a      	add	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0210 	orr.w	r2, r2, #16
 8002f2e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f006 fa3b 	bl	80093b0 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f44:	f040 80a7 	bne.w	8003096 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f006 fa40 	bl	80093d6 <USB_ReadDevAllOutEpInterrupt>
 8002f56:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f58:	e099      	b.n	800308e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 808e 	beq.w	8003082 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 fa64 	bl	800943e <USB_ReadDevOutEPInterrupt>
 8002f76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2301      	movs	r3, #1
 8002f92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fec2 	bl	8003d20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 ff98 	bl	8003ef0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2310      	movs	r3, #16
 8002fda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d030      	beq.n	8003048 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d109      	bne.n	8003006 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003004:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d108      	bne.n	8003036 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2200      	movs	r2, #0
 8003028:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	b2db      	uxtb	r3, r3
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f008 ff75 	bl	800bf20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003042:	461a      	mov	r2, r3
 8003044:	2302      	movs	r3, #2
 8003046:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	2320      	movs	r3, #32
 8003062:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	461a      	mov	r2, r3
 800307c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003080:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	3301      	adds	r3, #1
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f af62 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f006 f988 	bl	80093b0 <USB_ReadInterrupts>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030aa:	f040 80db 	bne.w	8003264 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f006 f9a9 	bl	800940a <USB_ReadDevAllInEpInterrupt>
 80030b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030be:	e0cd      	b.n	800325c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80c2 	beq.w	8003250 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f006 f9cf 	bl	800947a <USB_ReadDevInEPInterrupt>
 80030dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d057      	beq.n	8003198 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2201      	movs	r2, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003108:	4013      	ands	r3, r2
 800310a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003118:	461a      	mov	r2, r3
 800311a:	2301      	movs	r3, #1
 800311c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d132      	bne.n	800318c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	334c      	adds	r3, #76	; 0x4c
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4403      	add	r3, r0
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4419      	add	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	334c      	adds	r3, #76	; 0x4c
 800315c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d113      	bne.n	800318c <HAL_PCD_IRQHandler+0x3a2>
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3354      	adds	r3, #84	; 0x54
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	f006 f9d6 	bl	8009538 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f008 fe3f 	bl	800be16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	2308      	movs	r3, #8
 80031b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ca:	461a      	mov	r2, r3
 80031cc:	2310      	movs	r3, #16
 80031ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e6:	461a      	mov	r2, r3
 80031e8:	2340      	movs	r3, #64	; 0x40
 80031ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d023      	beq.n	800323e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	6a38      	ldr	r0, [r7, #32]
 80031fa:	f005 f8b7 	bl	800836c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3338      	adds	r3, #56	; 0x38
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	78db      	ldrb	r3, [r3, #3]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d108      	bne.n	800322c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f008 fe8c 	bl	800bf44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003238:	461a      	mov	r2, r3
 800323a:	2302      	movs	r3, #2
 800323c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fcdb 	bl	8003c06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f af2e 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f006 f8a1 	bl	80093b0 <USB_ReadInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003278:	d122      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032a0:	2100      	movs	r1, #0
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fec2 	bl	800402c <HAL_PCDEx_LPM_Callback>
 80032a8:	e002      	b.n	80032b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f008 fe2a 	bl	800bf04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f006 f873 	bl	80093b0 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d4:	d112      	bne.n	80032fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f008 fde6 	bl	800beb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f006 f855 	bl	80093b0 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003310:	f040 80b7 	bne.w	8003482 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2110      	movs	r1, #16
 800332e:	4618      	mov	r0, r3
 8003330:	f005 f81c 	bl	800836c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003338:	e046      	b.n	80033c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	461a      	mov	r2, r3
 8003348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800334c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	440a      	add	r2, r1
 8003364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800336c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	461a      	mov	r2, r3
 800337c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003380:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003392:	0151      	lsls	r1, r2, #5
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	440a      	add	r2, r1
 8003398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800339c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b2:	0151      	lsls	r1, r2, #5
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	440a      	add	r2, r1
 80033b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	3301      	adds	r3, #1
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d3b3      	bcc.n	800333a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fe:	f043 030b 	orr.w	r3, r3, #11
 8003402:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003414:	f043 030b 	orr.w	r3, r3, #11
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	e015      	b.n	8003448 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800342e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003432:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003442:	f043 030b 	orr.w	r3, r3, #11
 8003446:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003456:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800345a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800346c:	461a      	mov	r2, r3
 800346e:	f006 f863 	bl	8009538 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f005 ff92 	bl	80093b0 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	d124      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f006 f828 	bl	80094f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 ffdd 	bl	8008466 <USB_GetDevSpeed>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681c      	ldr	r4, [r3, #0]
 80034b8:	f001 fa28 	bl	800490c <HAL_RCC_GetHCLKFreq>
 80034bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	4620      	mov	r0, r4
 80034c8:	f004 fcdc 	bl	8007e84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f008 fcca 	bl	800be66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f005 ff62 	bl	80093b0 <USB_ReadInterrupts>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d10a      	bne.n	800350c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f008 fca7 	bl	800be4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f002 0208 	and.w	r2, r2, #8
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 ff4d 	bl	80093b0 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d122      	bne.n	8003566 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800352c:	2301      	movs	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	e014      	b.n	800355c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fb27 	bl	8003ba4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	3301      	adds	r3, #1
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	429a      	cmp	r2, r3
 8003564:	d3e5      	bcc.n	8003532 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f005 ff20 	bl	80093b0 <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357a:	d13b      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e02b      	b.n	80035da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3340      	adds	r3, #64	; 0x40
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d115      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da12      	bge.n	80035d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	333f      	adds	r3, #63	; 0x3f
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fae8 	bl	8003ba4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	3301      	adds	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3ce      	bcc.n	8003582 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 fed9 	bl	80093b0 <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003608:	d155      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800360a:	2301      	movs	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	e045      	b.n	800369c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d12e      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003638:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800363a:	2b00      	cmp	r3, #0
 800363c:	da2b      	bge.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800364a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800364e:	429a      	cmp	r2, r3
 8003650:	d121      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003692:	6053      	str	r3, [r2, #4]
            break;
 8003694:	e007      	b.n	80036a6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3301      	adds	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d3b4      	bcc.n	8003610 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 fe78 	bl	80093b0 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d10a      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f008 fc4b 	bl	800bf68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 fe62 	bl	80093b0 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d115      	bne.n	8003722 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f008 fc3b 	bl	800bf84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	e000      	b.n	8003722 <HAL_PCD_IRQHandler+0x938>
      return;
 8003720:	bf00      	nop
    }
  }
}
 8003722:	3734      	adds	r7, #52	; 0x34
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_SetAddress+0x1a>
 800373e:	2302      	movs	r3, #2
 8003740:	e013      	b.n	800376a <HAL_PCD_SetAddress+0x42>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f005 fdc0 	bl	80092e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	461a      	mov	r2, r3
 8003780:	4603      	mov	r3, r0
 8003782:	70fb      	strb	r3, [r7, #3]
 8003784:	460b      	mov	r3, r1
 8003786:	803b      	strh	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da0f      	bge.n	80037b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	3338      	adds	r3, #56	; 0x38
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	3304      	adds	r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	705a      	strb	r2, [r3, #1]
 80037b6:	e00f      	b.n	80037d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037e4:	883a      	ldrh	r2, [r7, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	78ba      	ldrb	r2, [r7, #2]
 80037ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003802:	78bb      	ldrb	r3, [r7, #2]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d102      	bne.n	800380e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_PCD_EP_Open+0xaa>
 8003818:	2302      	movs	r3, #2
 800381a:	e00e      	b.n	800383a <HAL_PCD_EP_Open+0xc8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fe40 	bl	80084b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003838:	7afb      	ldrb	r3, [r7, #11]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800384e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0f      	bge.n	8003876 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3338      	adds	r3, #56	; 0x38
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	705a      	strb	r2, [r3, #1]
 8003874:	e00f      	b.n	8003896 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_PCD_EP_Close+0x6e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e00e      	b.n	80038ce <HAL_PCD_EP_Close+0x8c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fe7e 	bl	80085c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	460b      	mov	r3, r1
 80038e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	b2da      	uxtb	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	f005 f95d 	bl	8008c08 <USB_EP0StartXfer>
 800394e:	e008      	b.n	8003962 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	f004 ff0b 	bl	8008778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	460b      	mov	r3, r1
 80039aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ac:	7afb      	ldrb	r3, [r7, #11]
 80039ae:	f003 020f 	and.w	r2, r3, #15
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3338      	adds	r3, #56	; 0x38
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2200      	movs	r2, #0
 80039d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2201      	movs	r2, #1
 80039da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039dc:	7afb      	ldrb	r3, [r7, #11]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d102      	bne.n	80039f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6979      	ldr	r1, [r7, #20]
 8003a0e:	f005 f8fb 	bl	8008c08 <USB_EP0StartXfer>
 8003a12:	e008      	b.n	8003a26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	f004 fea9 	bl	8008778 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 020f 	and.w	r2, r3, #15
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d901      	bls.n	8003a4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e050      	b.n	8003af0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da0f      	bge.n	8003a76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	3338      	adds	r3, #56	; 0x38
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	705a      	strb	r2, [r3, #1]
 8003a74:	e00d      	b.n	8003a92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_PCD_EP_SetStall+0x82>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e01e      	b.n	8003af0 <HAL_PCD_EP_SetStall+0xc0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f005 fb39 	bl	8009138 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	b2d9      	uxtb	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f005 fd29 	bl	8009538 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d901      	bls.n	8003b16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e042      	b.n	8003b9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da0f      	bge.n	8003b3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3338      	adds	r3, #56	; 0x38
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	705a      	strb	r2, [r3, #1]
 8003b3c:	e00f      	b.n	8003b5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_PCD_EP_ClrStall+0x86>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e00e      	b.n	8003b9c <HAL_PCD_EP_ClrStall+0xa4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f005 fb41 	bl	8009214 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	da0c      	bge.n	8003bd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	3338      	adds	r3, #56	; 0x38
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	3304      	adds	r3, #4
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e00c      	b.n	8003bec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f005 f960 	bl	8008eb8 <USB_EPStopXfer>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af02      	add	r7, sp, #8
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3338      	adds	r3, #56	; 0x38
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d901      	bls.n	8003c3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06c      	b.n	8003d18 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d902      	bls.n	8003c5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c62:	e02b      	b.n	8003cbc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d902      	bls.n	8003c80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	3303      	adds	r3, #3
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6919      	ldr	r1, [r3, #16]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f005 f9b4 	bl	800900c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	441a      	add	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d809      	bhi.n	8003ce6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d203      	bcs.n	8003ce6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1be      	bne.n	8003c64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d811      	bhi.n	8003d16 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	6939      	ldr	r1, [r7, #16]
 8003d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d12:	4013      	ands	r3, r2
 8003d14:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	333c      	adds	r3, #60	; 0x3c
 8003d38:	3304      	adds	r3, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d17b      	bne.n	8003e4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4a61      	ldr	r2, [pc, #388]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f240 80b9 	bls.w	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80b3 	beq.w	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	461a      	mov	r2, r3
 8003d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d88:	6093      	str	r3, [r2, #8]
 8003d8a:	e0a7      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da2:	461a      	mov	r2, r3
 8003da4:	2320      	movs	r3, #32
 8003da6:	6093      	str	r3, [r2, #8]
 8003da8:	e098      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 8093 	bne.w	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	4a4b      	ldr	r2, [pc, #300]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d90f      	bls.n	8003dde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dda:	6093      	str	r3, [r2, #8]
 8003ddc:	e07e      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	0159      	lsls	r1, r3, #5
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	440b      	add	r3, r1
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d114      	bne.n	8003e40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	f005 fb84 	bl	8009538 <USB_EP0_OutStart>
 8003e30:	e006      	b.n	8003e40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	441a      	add	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f007 ffca 	bl	800bde0 <HAL_PCD_DataOutStageCallback>
 8003e4c:	e046      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d124      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	6093      	str	r3, [r2, #8]
 8003e74:	e032      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2320      	movs	r3, #32
 8003e90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	4619      	mov	r1, r3
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f007 ffa1 	bl	800bde0 <HAL_PCD_DataOutStageCallback>
 8003e9e:	e01d      	b.n	8003edc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d114      	bne.n	8003ed0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f005 fb34 	bl	8009538 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f007 ff82 	bl	800bde0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	4f54300a 	.word	0x4f54300a
 8003eec:	4f54310a 	.word	0x4f54310a

08003ef0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	333c      	adds	r3, #60	; 0x3c
 8003f08:	3304      	adds	r3, #4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d90e      	bls.n	8003f44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f007 ff39 	bl	800bdbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d90c      	bls.n	8003f6c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f64:	461a      	mov	r2, r3
 8003f66:	2101      	movs	r1, #1
 8003f68:	f005 fae6 	bl	8009538 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	4f54300a 	.word	0x4f54300a

08003f7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f9a:	883b      	ldrh	r3, [r7, #0]
 8003f9c:	0419      	lsls	r1, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa8:	e028      	b.n	8003ffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e00d      	b.n	8003fda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3ec      	bcc.n	8003fbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fe4:	883b      	ldrh	r3, [r7, #0]
 8003fe6:	0418      	lsls	r0, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4302      	orrs	r2, r0
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e267      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d075      	beq.n	800414e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004062:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00c      	beq.n	8004088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406e:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d112      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004086:	d10b      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	4b7e      	ldr	r3, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05b      	beq.n	800414c <HAL_RCC_OscConfig+0x108>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d157      	bne.n	800414c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e242      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x74>
 80040aa:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e01d      	b.n	80040f4 <HAL_RCC_OscConfig+0xb0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x98>
 80040c2:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6f      	ldr	r2, [pc, #444]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6c      	ldr	r2, [pc, #432]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0xb0>
 80040dc:	4b69      	ldr	r3, [pc, #420]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a68      	ldr	r2, [pc, #416]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a65      	ldr	r2, [pc, #404]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fd fc38 	bl	8001970 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd fc34 	bl	8001970 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e207      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0xc0>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fd fc24 	bl	8001970 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd fc20 	bl	8001970 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1f3      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0xe8>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d063      	beq.n	8004222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d11c      	bne.n	80041ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b44      	ldr	r3, [pc, #272]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x152>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e1c7      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	e03a      	b.n	8004222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b4:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x244>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd fbd9 	bl	8001970 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd fbd5 	bl	8001970 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1a8      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4925      	ldr	r1, [pc, #148]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCC_OscConfig+0x244>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fbb8 	bl	8001970 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004204:	f7fd fbb4 	bl	8001970 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e187      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <HAL_RCC_OscConfig+0x248>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd fb98 	bl	8001970 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd fb94 	bl	8001970 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e167      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x240>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x200>
 8004262:	e01b      	b.n	800429c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_OscConfig+0x248>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fd fb81 	bl	8001970 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e00e      	b.n	8004290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004272:	f7fd fb7d 	bl	8001970 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d907      	bls.n	8004290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e150      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
 8004284:	40023800 	.word	0x40023800
 8004288:	42470000 	.word	0x42470000
 800428c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004290:	4b88      	ldr	r3, [pc, #544]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ea      	bne.n	8004272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8097 	beq.w	80043d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ae:	4b81      	ldr	r3, [pc, #516]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	4b7d      	ldr	r3, [pc, #500]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b7a      	ldr	r3, [pc, #488]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b77      	ldr	r3, [pc, #476]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b74      	ldr	r3, [pc, #464]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a73      	ldr	r2, [pc, #460]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fb3d 	bl	8001970 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fd fb39 	bl	8001970 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e10c      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_OscConfig+0x474>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x2ea>
 8004320:	4b64      	ldr	r3, [pc, #400]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a63      	ldr	r2, [pc, #396]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	e01c      	b.n	8004368 <HAL_RCC_OscConfig+0x324>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x30c>
 8004336:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a5e      	ldr	r2, [pc, #376]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
 8004342:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a5b      	ldr	r2, [pc, #364]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0x324>
 8004350:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a57      	ldr	r2, [pc, #348]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
 800435c:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a54      	ldr	r2, [pc, #336]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd fafe 	bl	8001970 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd fafa 	bl	8001970 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	; 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0cb      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438e:	4b49      	ldr	r3, [pc, #292]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ee      	beq.n	8004378 <HAL_RCC_OscConfig+0x334>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439c:	f7fd fae8 	bl	8001970 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fae4 	bl	8001970 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0b5      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ee      	bne.n	80043a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a1 	beq.w	8004524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d05c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d141      	bne.n	800447a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b31      	ldr	r3, [pc, #196]	; (80044bc <HAL_RCC_OscConfig+0x478>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd fab8 	bl	8001970 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fab4 	bl	8001970 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e087      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	3b01      	subs	r3, #1
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	491b      	ldr	r1, [pc, #108]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x478>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd fa8d 	bl	8001970 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445a:	f7fd fa89 	bl	8001970 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e05c      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x416>
 8004478:	e054      	b.n	8004524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_OscConfig+0x478>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fd fa76 	bl	8001970 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fa72 	bl	8001970 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e045      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_OscConfig+0x470>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x444>
 80044a6:	e03d      	b.n	8004524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e038      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40007000 	.word	0x40007000
 80044bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c0:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_RCC_OscConfig+0x4ec>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d028      	beq.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d121      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d11a      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d111      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	3b01      	subs	r3, #1
 800450a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800

08004534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0cc      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004548:	4b68      	ldr	r3, [pc, #416]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d90c      	bls.n	8004570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a52      	ldr	r2, [pc, #328]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d044      	beq.n	8004654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d119      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e06f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004602:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e067      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4934      	ldr	r1, [pc, #208]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004624:	f7fd f9a4 	bl	8001970 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	e00a      	b.n	8004642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462c:	f7fd f9a0 	bl	8001970 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 020c 	and.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	429a      	cmp	r2, r3
 8004652:	d1eb      	bne.n	800462c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d20c      	bcs.n	800467c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd f904 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023c00 	.word	0x40023c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	0800c3f4 	.word	0x0800c3f4
 80046f8:	20000000 	.word	0x20000000
 80046fc:	20000004 	.word	0x20000004

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b094      	sub	sp, #80	; 0x50
 8004706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	647b      	str	r3, [r7, #68]	; 0x44
 800470c:	2300      	movs	r3, #0
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004710:	2300      	movs	r3, #0
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004718:	4b79      	ldr	r3, [pc, #484]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	d00d      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x40>
 8004724:	2b08      	cmp	r3, #8
 8004726:	f200 80e1 	bhi.w	80048ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x3a>
 8004732:	e0db      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b73      	ldr	r3, [pc, #460]	; (8004904 <HAL_RCC_GetSysClockFreq+0x204>)
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004738:	e0db      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473a:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_GetSysClockFreq+0x208>)
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473e:	e0d8      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004740:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	2200      	movs	r2, #0
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004784:	0150      	lsls	r0, r2, #5
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4621      	mov	r1, r4
 800478c:	1a51      	subs	r1, r2, r1
 800478e:	6139      	str	r1, [r7, #16]
 8004790:	4629      	mov	r1, r5
 8004792:	eb63 0301 	sbc.w	r3, r3, r1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a4:	4659      	mov	r1, fp
 80047a6:	018b      	lsls	r3, r1, #6
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ae:	4651      	mov	r1, sl
 80047b0:	018a      	lsls	r2, r1, #6
 80047b2:	4651      	mov	r1, sl
 80047b4:	ebb2 0801 	subs.w	r8, r2, r1
 80047b8:	4659      	mov	r1, fp
 80047ba:	eb63 0901 	sbc.w	r9, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d2:	4690      	mov	r8, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	eb18 0303 	adds.w	r3, r8, r3
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	462b      	mov	r3, r5
 80047e0:	eb49 0303 	adc.w	r3, r9, r3
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047f2:	4629      	mov	r1, r5
 80047f4:	024b      	lsls	r3, r1, #9
 80047f6:	4621      	mov	r1, r4
 80047f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047fc:	4621      	mov	r1, r4
 80047fe:	024a      	lsls	r2, r1, #9
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004806:	2200      	movs	r2, #0
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
 800480a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800480c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004810:	f7fb fcda 	bl	80001c8 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800481c:	e058      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	2200      	movs	r2, #0
 8004826:	4618      	mov	r0, r3
 8004828:	4611      	mov	r1, r2
 800482a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
 8004834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	0159      	lsls	r1, r3, #5
 8004846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484a:	0150      	lsls	r0, r2, #5
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4641      	mov	r1, r8
 8004852:	ebb2 0a01 	subs.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb63 0b01 	sbc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800486c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004870:	ebb2 040a 	subs.w	r4, r2, sl
 8004874:	eb63 050b 	sbc.w	r5, r3, fp
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	464b      	mov	r3, r9
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ba:	2200      	movs	r2, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	61fa      	str	r2, [r7, #28]
 80048c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c4:	f7fb fc80 	bl	80001c8 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	3301      	adds	r3, #1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetSysClockFreq+0x204>)
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3750      	adds	r7, #80	; 0x50
 80048f8:	46bd      	mov	sp, r7
 80048fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	00f42400 	.word	0x00f42400
 8004908:	007a1200 	.word	0x007a1200

0800490c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	0800c404 	.word	0x0800c404

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffdc 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0b5b      	lsrs	r3, r3, #13
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	0800c404 	.word	0x0800c404

08004974 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e022      	b.n	80049cc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fc faab 	bl	8000ef4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2203      	movs	r2, #3
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f814 	bl	80049d4 <HAL_SD_InitCard>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e00a      	b.n	80049cc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049d4:	b5b0      	push	{r4, r5, r7, lr}
 80049d6:	b08e      	sub	sp, #56	; 0x38
 80049d8:	af04      	add	r7, sp, #16
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80049f0:	2376      	movs	r3, #118	; 0x76
 80049f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681d      	ldr	r5, [r3, #0]
 80049f8:	466c      	mov	r4, sp
 80049fa:	f107 0314 	add.w	r3, r7, #20
 80049fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f002 fca5 	bl	800735c <SDIO_Init>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e04f      	b.n	8004ac4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004a24:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_SD_InitCard+0xf8>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f002 fcdd 	bl	80073ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_SD_InitCard+0xf8>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	f7fc ffa4 	bl	8001988 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fe69 	bl	8005718 <SD_PowerON>
 8004a46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e02e      	b.n	8004ac4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd88 	bl	800557c <SD_InitCard>
 8004a6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e01b      	b.n	8004ac4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a94:	4618      	mov	r0, r3
 8004a96:	f002 fd3c 	bl	8007512 <SDMMC_CmdBlockLength>
 8004a9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00f      	beq.n	8004ac2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <HAL_SD_InitCard+0xfc>)
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	; 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bdb0      	pop	{r4, r5, r7, pc}
 8004acc:	422580a0 	.word	0x422580a0
 8004ad0:	004005ff 	.word	0x004005ff

08004ad4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b092      	sub	sp, #72	; 0x48
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ae2:	f7fc ff45 	bl	8001970 <HAL_GetTick>
 8004ae6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1bd      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	f040 81b0 	bne.w	8004e74 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	441a      	add	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d907      	bls.n	8004b38 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e1a4      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2200      	movs	r2, #0
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d002      	beq.n	8004b56 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	025b      	lsls	r3, r3, #9
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	025b      	lsls	r3, r3, #9
 8004b60:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b62:	2390      	movs	r3, #144	; 0x90
 8004b64:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b66:	2302      	movs	r3, #2
 8004b68:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f107 0214 	add.w	r2, r7, #20
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f002 fc9c 	bl	80074ba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d90a      	bls.n	8004b9e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b94:	4618      	mov	r0, r3
 8004b96:	f002 fd00 	bl	800759a <SDMMC_CmdReadMultiBlock>
 8004b9a:	6478      	str	r0, [r7, #68]	; 0x44
 8004b9c:	e009      	b.n	8004bb2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004baa:	4618      	mov	r0, r3
 8004bac:	f002 fcd3 	bl	8007556 <SDMMC_CmdReadSingleBlock>
 8004bb0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a7a      	ldr	r2, [pc, #488]	; (8004da8 <HAL_SD_ReadBlocks+0x2d4>)
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e151      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004be2:	e061      	b.n	8004ca8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d03c      	beq.n	8004c6c <HAL_SD_ReadBlocks+0x198>
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d039      	beq.n	8004c6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8004bfc:	e033      	b.n	8004c66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fbd5 	bl	80073b2 <SDIO_ReadFIFO>
 8004c08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	3301      	adds	r3, #1
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	3b01      	subs	r3, #1
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c40:	3301      	adds	r3, #1
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	3b01      	subs	r3, #1
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c56:	3301      	adds	r3, #1
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c62:	3301      	adds	r3, #1
 8004c64:	643b      	str	r3, [r7, #64]	; 0x40
 8004c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c68:	2b07      	cmp	r3, #7
 8004c6a:	d9c8      	bls.n	8004bfe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004c6c:	f7fc fe80 	bl	8001970 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d902      	bls.n	8004c82 <HAL_SD_ReadBlocks+0x1ae>
 8004c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d112      	bne.n	8004ca8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a48      	ldr	r2, [pc, #288]	; (8004da8 <HAL_SD_ReadBlocks+0x2d4>)
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e0ec      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cae:	f240 332a 	movw	r3, #810	; 0x32a
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d095      	beq.n	8004be4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d022      	beq.n	8004d0c <HAL_SD_ReadBlocks+0x238>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d91f      	bls.n	8004d0c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d01b      	beq.n	8004d0c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f002 fcc5 	bl	8007668 <SDMMC_CmdStopTransfer>
 8004cde:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d012      	beq.n	8004d0c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <HAL_SD_ReadBlocks+0x2d4>)
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0ba      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <HAL_SD_ReadBlocks+0x2d4>)
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f043 0208 	orr.w	r2, r3, #8
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0a0      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d012      	beq.n	8004d74 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <HAL_SD_ReadBlocks+0x2d4>)
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	f043 0202 	orr.w	r2, r3, #2
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e086      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d063      	beq.n	8004e4a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <HAL_SD_ReadBlocks+0x2d4>)
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e06c      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
 8004da8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 fafe 	bl	80073b2 <SDIO_ReadFIFO>
 8004db6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	3301      	adds	r3, #1
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dde:	3b01      	subs	r3, #1
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	3301      	adds	r3, #1
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	3b01      	subs	r3, #1
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	0e1b      	lsrs	r3, r3, #24
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	3301      	adds	r3, #1
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004e0e:	f7fc fdaf 	bl	8001970 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d902      	bls.n	8004e24 <HAL_SD_ReadBlocks+0x350>
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d112      	bne.n	8004e4a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_SD_ReadBlocks+0x3b8>)
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01b      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <HAL_SD_ReadBlocks+0x38a>
 8004e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1a6      	bne.n	8004dac <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e006      	b.n	8004e82 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3748      	adds	r7, #72	; 0x48
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	004005ff 	.word	0x004005ff

08004e90 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b092      	sub	sp, #72	; 0x48
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e9e:	f7fc fd67 	bl	8001970 <HAL_GetTick>
 8004ea2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d107      	bne.n	8004ec2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e166      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	f040 8159 	bne.w	8005182 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d907      	bls.n	8004ef4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e14d      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2200      	movs	r2, #0
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d002      	beq.n	8004f12 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	025b      	lsls	r3, r3, #9
 8004f10:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	025b      	lsls	r3, r3, #9
 8004f1c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004f1e:	2390      	movs	r3, #144	; 0x90
 8004f20:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f107 0218 	add.w	r2, r7, #24
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f002 fabe 	bl	80074ba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d90a      	bls.n	8004f5a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 fb66 	bl	8007622 <SDMMC_CmdWriteMultiBlock>
 8004f56:	6478      	str	r0, [r7, #68]	; 0x44
 8004f58:	e009      	b.n	8004f6e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f66:	4618      	mov	r0, r3
 8004f68:	f002 fb39 	bl	80075de <SDMMC_CmdWriteSingleBlock>
 8004f6c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d012      	beq.n	8004f9a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a87      	ldr	r2, [pc, #540]	; (8005198 <HAL_SD_WriteBlocks+0x308>)
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0fa      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004f9e:	e065      	b.n	800506c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d040      	beq.n	8005030 <HAL_SD_WriteBlocks+0x1a0>
 8004fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d03d      	beq.n	8005030 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb8:	e037      	b.n	800502a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	021a      	lsls	r2, r3, #8
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fda:	3301      	adds	r3, #1
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	041a      	lsls	r2, r3, #16
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	061a      	lsls	r2, r3, #24
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	3301      	adds	r3, #1
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	3b01      	subs	r3, #1
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f107 0214 	add.w	r2, r7, #20
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f002 f9d4 	bl	80073cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	3301      	adds	r3, #1
 8005028:	643b      	str	r3, [r7, #64]	; 0x40
 800502a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502c:	2b07      	cmp	r3, #7
 800502e:	d9c4      	bls.n	8004fba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005030:	f7fc fc9e 	bl	8001970 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800503c:	429a      	cmp	r2, r3
 800503e:	d902      	bls.n	8005046 <HAL_SD_WriteBlocks+0x1b6>
 8005040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005042:	2b00      	cmp	r3, #0
 8005044:	d112      	bne.n	800506c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a53      	ldr	r2, [pc, #332]	; (8005198 <HAL_SD_WriteBlocks+0x308>)
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e091      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005072:	f240 331a 	movw	r3, #794	; 0x31a
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d091      	beq.n	8004fa0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d022      	beq.n	80050d0 <HAL_SD_WriteBlocks+0x240>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d91f      	bls.n	80050d0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	2b03      	cmp	r3, #3
 8005096:	d01b      	beq.n	80050d0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f002 fae3 	bl	8007668 <SDMMC_CmdStopTransfer>
 80050a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80050a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3a      	ldr	r2, [pc, #232]	; (8005198 <HAL_SD_WriteBlocks+0x308>)
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e05f      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d012      	beq.n	8005104 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <HAL_SD_WriteBlocks+0x308>)
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	f043 0208 	orr.w	r2, r3, #8
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e045      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d012      	beq.n	8005138 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a20      	ldr	r2, [pc, #128]	; (8005198 <HAL_SD_WriteBlocks+0x308>)
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e02b      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	d012      	beq.n	800516c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <HAL_SD_WriteBlocks+0x308>)
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f043 0210 	orr.w	r2, r3, #16
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e011      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f240 523a 	movw	r2, #1338	; 0x53a
 8005174:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e006      	b.n	8005190 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3748      	adds	r7, #72	; 0x48
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	004005ff 	.word	0x004005ff

0800519c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051aa:	0f9b      	lsrs	r3, r3, #30
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b6:	0e9b      	lsrs	r3, r3, #26
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c8:	0e1b      	lsrs	r3, r3, #24
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fc:	0d1b      	lsrs	r3, r3, #20
 80051fe:	b29a      	uxth	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800521a:	0bdb      	lsrs	r3, r3, #15
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522c:	0b9b      	lsrs	r3, r3, #14
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	b2da      	uxtb	r2, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800523e:	0b5b      	lsrs	r3, r3, #13
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005250:	0b1b      	lsrs	r3, r3, #12
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	2b00      	cmp	r3, #0
 800526a:	d163      	bne.n	8005334 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005270:	009a      	lsls	r2, r3, #2
 8005272:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005276:	4013      	ands	r3, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800527c:	0f92      	lsrs	r2, r2, #30
 800527e:	431a      	orrs	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005288:	0edb      	lsrs	r3, r3, #27
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	b2da      	uxtb	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	0e1b      	lsrs	r3, r3, #24
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ac:	0d5b      	lsrs	r3, r3, #21
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052be:	0c9b      	lsrs	r3, r3, #18
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d0:	0bdb      	lsrs	r3, r3, #15
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	7e1b      	ldrb	r3, [r3, #24]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	3302      	adds	r3, #2
 80052f4:	2201      	movs	r2, #1
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052fe:	fb03 f202 	mul.w	r2, r3, r2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	7a1b      	ldrb	r3, [r3, #8]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005320:	0a52      	lsrs	r2, r2, #9
 8005322:	fb03 f202 	mul.w	r2, r3, r2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005330:	661a      	str	r2, [r3, #96]	; 0x60
 8005332:	e031      	b.n	8005398 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11d      	bne.n	8005378 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	3301      	adds	r3, #1
 8005358:	029a      	lsls	r2, r3, #10
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	661a      	str	r2, [r3, #96]	; 0x60
 8005376:	e00f      	b.n	8005398 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a58      	ldr	r2, [pc, #352]	; (80054e0 <HAL_SD_GetCardCSD+0x344>)
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e09d      	b.n	80054d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539c:	0b9b      	lsrs	r3, r3, #14
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ae:	09db      	lsrs	r3, r3, #7
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	0fdb      	lsrs	r3, r3, #31
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	0f5b      	lsrs	r3, r3, #29
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	0e9b      	lsrs	r3, r3, #26
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	0d9b      	lsrs	r3, r3, #22
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	b2da      	uxtb	r2, r3
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	0d5b      	lsrs	r3, r3, #21
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	b2da      	uxtb	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	0c1b      	lsrs	r3, r3, #16
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	0bdb      	lsrs	r3, r3, #15
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	0b9b      	lsrs	r3, r3, #14
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	b2da      	uxtb	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	0b5b      	lsrs	r3, r3, #13
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	0b1b      	lsrs	r3, r3, #12
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	0a9b      	lsrs	r3, r3, #10
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	b2da      	uxtb	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	004005ff 	.word	0x004005ff

080054e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f970 	bl	8005834 <SD_SendStatus>
 8005554:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	0a5b      	lsrs	r3, r3, #9
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005572:	693b      	ldr	r3, [r7, #16]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800557c:	b5b0      	push	{r4, r5, r7, lr}
 800557e:	b094      	sub	sp, #80	; 0x50
 8005580:	af04      	add	r7, sp, #16
 8005582:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005584:	2301      	movs	r3, #1
 8005586:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f001 ff3c 	bl	800740a <SDIO_GetPowerState>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800559c:	e0b8      	b.n	8005710 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d02f      	beq.n	8005606 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f002 f923 	bl	80077f6 <SDMMC_CmdSendCID>
 80055b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <SD_InitCard+0x40>
    {
      return errorstate;
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	e0a9      	b.n	8005710 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 ff66 	bl	8007494 <SDIO_GetResponse>
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2104      	movs	r1, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 ff5d 	bl	8007494 <SDIO_GetResponse>
 80055da:	4602      	mov	r2, r0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2108      	movs	r1, #8
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 ff54 	bl	8007494 <SDIO_GetResponse>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	210c      	movs	r1, #12
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 ff4b 	bl	8007494 <SDIO_GetResponse>
 80055fe:	4602      	mov	r2, r0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	2b03      	cmp	r3, #3
 800560c:	d00d      	beq.n	800562a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f107 020e 	add.w	r2, r7, #14
 8005616:	4611      	mov	r1, r2
 8005618:	4618      	mov	r0, r3
 800561a:	f002 f929 	bl	8007870 <SDMMC_CmdSetRelAdd>
 800561e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <SD_InitCard+0xae>
    {
      return errorstate;
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	e072      	b.n	8005710 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	2b03      	cmp	r3, #3
 8005630:	d036      	beq.n	80056a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f002 f8f3 	bl	8007832 <SDMMC_CmdSendCSD>
 800564c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005656:	e05b      	b.n	8005710 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f001 ff18 	bl	8007494 <SDIO_GetResponse>
 8005664:	4602      	mov	r2, r0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2104      	movs	r1, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f001 ff0f 	bl	8007494 <SDIO_GetResponse>
 8005676:	4602      	mov	r2, r0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2108      	movs	r1, #8
 8005682:	4618      	mov	r0, r3
 8005684:	f001 ff06 	bl	8007494 <SDIO_GetResponse>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	210c      	movs	r1, #12
 8005694:	4618      	mov	r0, r3
 8005696:	f001 fefd 	bl	8007494 <SDIO_GetResponse>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2104      	movs	r1, #4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fef4 	bl	8007494 <SDIO_GetResponse>
 80056ac:	4603      	mov	r3, r0
 80056ae:	0d1a      	lsrs	r2, r3, #20
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fd6e 	bl	800519c <HAL_SD_GetCardCSD>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056ca:	e021      	b.n	8005710 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6819      	ldr	r1, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	2200      	movs	r2, #0
 80056d8:	461c      	mov	r4, r3
 80056da:	4615      	mov	r5, r2
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	4608      	mov	r0, r1
 80056e2:	f001 ffe3 	bl	80076ac <SDMMC_CmdSelDesel>
 80056e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <SD_InitCard+0x176>
  {
    return errorstate;
 80056ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f0:	e00e      	b.n	8005710 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681d      	ldr	r5, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	466c      	mov	r4, sp
 80056fa:	f103 0210 	add.w	r2, r3, #16
 80056fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005704:	3304      	adds	r3, #4
 8005706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005708:	4628      	mov	r0, r5
 800570a:	f001 fe27 	bl	800735c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3740      	adds	r7, #64	; 0x40
 8005714:	46bd      	mov	sp, r7
 8005716:	bdb0      	pop	{r4, r5, r7, pc}

08005718 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f001 ffde 	bl	80076f2 <SDMMC_CmdGoIdleState>
 8005736:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <SD_PowerON+0x2a>
  {
    return errorstate;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	e072      	b.n	8005828 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fff1 	bl	800772e <SDMMC_CmdOperCond>
 800574c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f001 ffc7 	bl	80076f2 <SDMMC_CmdGoIdleState>
 8005764:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <SD_PowerON+0x5e>
    {
      return errorstate;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	e05b      	b.n	8005828 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577a:	2b01      	cmp	r3, #1
 800577c:	d137      	bne.n	80057ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2100      	movs	r1, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fff1 	bl	800776c <SDMMC_CmdAppCommand>
 800578a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02d      	beq.n	80057ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005796:	e047      	b.n	8005828 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 ffe4 	bl	800776c <SDMMC_CmdAppCommand>
 80057a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	e03b      	b.n	8005828 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	491e      	ldr	r1, [pc, #120]	; (8005830 <SD_PowerON+0x118>)
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 fffa 	bl	80077b0 <SDMMC_CmdAppOperCommand>
 80057bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057c8:	e02e      	b.n	8005828 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fe5f 	bl	8007494 <SDIO_GetResponse>
 80057d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	0fdb      	lsrs	r3, r3, #31
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <SD_PowerON+0xcc>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <SD_PowerON+0xce>
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]

    count++;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d802      	bhi.n	80057fe <SD_PowerON+0xe6>
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0cc      	beq.n	8005798 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005804:	4293      	cmp	r3, r2
 8005806:	d902      	bls.n	800580e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800580c:	e00c      	b.n	8005828 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
 800581e:	e002      	b.n	8005826 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	c1100000 	.word	0xc1100000

08005834 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005844:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005848:	e018      	b.n	800587c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005852:	041b      	lsls	r3, r3, #16
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f002 f82b 	bl	80078b2 <SDMMC_CmdSendStatus>
 800585c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	e009      	b.n	800587c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fe10 	bl	8007494 <SDIO_GetResponse>
 8005874:	4602      	mov	r2, r0
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07b      	b.n	800598e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d108      	bne.n	80058b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a6:	d009      	beq.n	80058bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	61da      	str	r2, [r3, #28]
 80058ae:	e005      	b.n	80058bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fb fb74 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	ea42 0103 	orr.w	r1, r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005948:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	f003 0104 	and.w	r1, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	f003 0210 	and.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800597c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e041      	b.n	8005a2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7fb fbd7 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f000 fa79 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e041      	b.n	8005aca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fb50 	bl	8001100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fa2a 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d122      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d11b      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0202 	mvn.w	r2, #2
 8005afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f9bb 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005b1a:	e005      	b.n	8005b28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9ad 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9be 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d122      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d11b      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0204 	mvn.w	r2, #4
 8005b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f991 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005b6e:	e005      	b.n	8005b7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f983 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f994 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d122      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0208 	mvn.w	r2, #8
 8005ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f967 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005bc2:	e005      	b.n	8005bd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f959 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f96a 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d122      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d11b      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0210 	mvn.w	r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f93d 	bl	8005e90 <HAL_TIM_IC_CaptureCallback>
 8005c16:	e005      	b.n	8005c24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f92f 	bl	8005e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f940 	bl	8005ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0201 	mvn.w	r2, #1
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f909 	bl	8005e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d10e      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d107      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fbfb 	bl	8006478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f905 	bl	8005eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0220 	mvn.w	r2, #32
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fbc5 	bl	8006464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0ae      	b.n	8005e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	f200 809f 	bhi.w	8005e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005e51 	.word	0x08005e51
 8005d20:	08005e51 	.word	0x08005e51
 8005d24:	08005e51 	.word	0x08005e51
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005e51 	.word	0x08005e51
 8005d30:	08005e51 	.word	0x08005e51
 8005d34:	08005e51 	.word	0x08005e51
 8005d38:	08005dcf 	.word	0x08005dcf
 8005d3c:	08005e51 	.word	0x08005e51
 8005d40:	08005e51 	.word	0x08005e51
 8005d44:	08005e51 	.word	0x08005e51
 8005d48:	08005e0f 	.word	0x08005e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f95a 	bl	800600c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0208 	orr.w	r2, r2, #8
 8005d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0204 	bic.w	r2, r2, #4
 8005d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6999      	ldr	r1, [r3, #24]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	619a      	str	r2, [r3, #24]
      break;
 8005d8a:	e064      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f9aa 	bl	80060ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	021a      	lsls	r2, r3, #8
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	619a      	str	r2, [r3, #24]
      break;
 8005dcc:	e043      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 f9ff 	bl	80061d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0208 	orr.w	r2, r2, #8
 8005de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0204 	bic.w	r2, r2, #4
 8005df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69d9      	ldr	r1, [r3, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	61da      	str	r2, [r3, #28]
      break;
 8005e0c:	e023      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fa53 	bl	80062c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69d9      	ldr	r1, [r3, #28]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	021a      	lsls	r2, r3, #8
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	61da      	str	r2, [r3, #28]
      break;
 8005e4e:	e002      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
      break;
 8005e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a40      	ldr	r2, [pc, #256]	; (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d00f      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3d      	ldr	r2, [pc, #244]	; (8005fe4 <TIM_Base_SetConfig+0x118>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3c      	ldr	r2, [pc, #240]	; (8005fe8 <TIM_Base_SetConfig+0x11c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3b      	ldr	r2, [pc, #236]	; (8005fec <TIM_Base_SetConfig+0x120>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d108      	bne.n	8005f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2f      	ldr	r2, [pc, #188]	; (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d027      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2c      	ldr	r2, [pc, #176]	; (8005fe4 <TIM_Base_SetConfig+0x118>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d023      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	; (8005fe8 <TIM_Base_SetConfig+0x11c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01f      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <TIM_Base_SetConfig+0x120>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d017      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a28      	ldr	r2, [pc, #160]	; (8005ff4 <TIM_Base_SetConfig+0x128>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <TIM_Base_SetConfig+0x12c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <TIM_Base_SetConfig+0x130>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a25      	ldr	r2, [pc, #148]	; (8006000 <TIM_Base_SetConfig+0x134>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a24      	ldr	r2, [pc, #144]	; (8006004 <TIM_Base_SetConfig+0x138>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a23      	ldr	r2, [pc, #140]	; (8006008 <TIM_Base_SetConfig+0x13c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_Base_SetConfig+0xf8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d103      	bne.n	8005fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	615a      	str	r2, [r3, #20]
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40010400 	.word	0x40010400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800
 8006000:	40001800 	.word	0x40001800
 8006004:	40001c00 	.word	0x40001c00
 8006008:	40002000 	.word	0x40002000

0800600c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0303 	bic.w	r3, r3, #3
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0302 	bic.w	r3, r3, #2
 8006054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a20      	ldr	r2, [pc, #128]	; (80060e4 <TIM_OC1_SetConfig+0xd8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_OC1_SetConfig+0x64>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <TIM_OC1_SetConfig+0xdc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10c      	bne.n	800608a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0308 	bic.w	r3, r3, #8
 8006076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 0304 	bic.w	r3, r3, #4
 8006088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <TIM_OC1_SetConfig+0xd8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC1_SetConfig+0x8e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <TIM_OC1_SetConfig+0xdc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d111      	bne.n	80060be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	621a      	str	r2, [r3, #32]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400

080060ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0210 	bic.w	r2, r3, #16
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <TIM_OC2_SetConfig+0xe4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_OC2_SetConfig+0x68>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a21      	ldr	r2, [pc, #132]	; (80061d4 <TIM_OC2_SetConfig+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d10d      	bne.n	8006170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a17      	ldr	r2, [pc, #92]	; (80061d0 <TIM_OC2_SetConfig+0xe4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC2_SetConfig+0x94>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a16      	ldr	r2, [pc, #88]	; (80061d4 <TIM_OC2_SetConfig+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d113      	bne.n	80061a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <TIM_OC3_SetConfig+0xe0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_OC3_SetConfig+0x66>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a20      	ldr	r2, [pc, #128]	; (80062bc <TIM_OC3_SetConfig+0xe4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10d      	bne.n	800625a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <TIM_OC3_SetConfig+0xe0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_OC3_SetConfig+0x92>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <TIM_OC3_SetConfig+0xe4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d113      	bne.n	8006292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40010400 	.word	0x40010400

080062c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800630a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a12      	ldr	r2, [pc, #72]	; (8006364 <TIM_OC4_SetConfig+0xa4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC4_SetConfig+0x68>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a11      	ldr	r2, [pc, #68]	; (8006368 <TIM_OC4_SetConfig+0xa8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d109      	bne.n	800633c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800632e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	019b      	lsls	r3, r3, #6
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40010400 	.word	0x40010400

0800636c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e05a      	b.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a21      	ldr	r2, [pc, #132]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d022      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d01d      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1d      	ldr	r2, [pc, #116]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d018      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10c      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4313      	orrs	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40010400 	.word	0x40010400
 800645c:	40014000 	.word	0x40014000
 8006460:	40001800 	.word	0x40001800

08006464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e03f      	b.n	800651e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fa ff04 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2224      	movs	r2, #36	; 0x24
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fccf 	bl	8006e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e047      	b.n	80065c8 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fa feb7 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2224      	movs	r2, #36	; 0x24
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006568:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fc82 	bl	8006e74 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695a      	ldr	r2, [r3, #20]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800658e:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0208 	orr.w	r2, r2, #8
 800659e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b0ba      	sub	sp, #232	; 0xe8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800660e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_UART_IRQHandler+0x66>
 8006622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb65 	bl	8006cfe <UART_Receive_IT>
      return;
 8006634:	e256      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80de 	beq.w	80067fc <HAL_UART_IRQHandler+0x22c>
 8006640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80d1 	beq.w	80067fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <HAL_UART_IRQHandler+0xae>
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f043 0201 	orr.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_UART_IRQHandler+0xd2>
 800668a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f043 0202 	orr.w	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_UART_IRQHandler+0xf6>
 80066ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f043 0204 	orr.w	r2, r3, #4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d011      	beq.n	80066f6 <HAL_UART_IRQHandler+0x126>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f043 0208 	orr.w	r2, r3, #8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 81ed 	beq.w	8006ada <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_UART_IRQHandler+0x14e>
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 faf0 	bl	8006cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <HAL_UART_IRQHandler+0x17a>
 8006742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d04f      	beq.n	80067ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f9f8 	bl	8006b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d141      	bne.n	80067e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3314      	adds	r3, #20
 8006786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800678a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800678e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1d9      	bne.n	800675e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d013      	beq.n	80067da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	4a7d      	ldr	r2, [pc, #500]	; (80069ac <HAL_UART_IRQHandler+0x3dc>)
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fb fd98 	bl	80022f4 <HAL_DMA_Abort_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	e00e      	b.n	80067f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f99a 	bl	8006b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	e00a      	b.n	80067f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f996 	bl	8006b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	e006      	b.n	80067f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f992 	bl	8006b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067f6:	e170      	b.n	8006ada <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	bf00      	nop
    return;
 80067fa:	e16e      	b.n	8006ada <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 814a 	bne.w	8006a9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8143 	beq.w	8006a9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 813c 	beq.w	8006a9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	f040 80b4 	bne.w	80069b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8140 	beq.w	8006ade <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006866:	429a      	cmp	r2, r3
 8006868:	f080 8139 	bcs.w	8006ade <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006872:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687e:	f000 8088 	beq.w	8006992 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800689c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1d9      	bne.n	8006882 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e1      	bne.n	80068ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800691a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800691c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800692e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800693c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e3      	bne.n	800690a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	f023 0310 	bic.w	r3, r3, #16
 8006966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006974:	65ba      	str	r2, [r7, #88]	; 0x58
 8006976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800697a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e3      	bne.n	8006950 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	4618      	mov	r0, r3
 800698e:	f7fb fc41 	bl	8002214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800699a:	b29b      	uxth	r3, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8c0 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069a8:	e099      	b.n	8006ade <HAL_UART_IRQHandler+0x50e>
 80069aa:	bf00      	nop
 80069ac:	08006c07 	.word	0x08006c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 808b 	beq.w	8006ae2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80069cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8086 	beq.w	8006ae2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069fa:	647a      	str	r2, [r7, #68]	; 0x44
 80069fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e3      	bne.n	80069d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a32:	633a      	str	r2, [r7, #48]	; 0x30
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e3      	bne.n	8006a0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0310 	bic.w	r3, r3, #16
 8006a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	617b      	str	r3, [r7, #20]
   return(result);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e3      	bne.n	8006a54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f848 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a98:	e023      	b.n	8006ae2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_UART_IRQHandler+0x4ea>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8bb 	bl	8006c2e <UART_Transmit_IT>
    return;
 8006ab8:	e014      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x514>
 8006ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8fb 	bl	8006cce <UART_EndTransmit_IT>
    return;
 8006ad8:	e004      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
    return;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ae2:	bf00      	nop
  }
}
 8006ae4:	37e8      	adds	r7, #232	; 0xe8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b095      	sub	sp, #84	; 0x54
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b68:	643a      	str	r2, [r7, #64]	; 0x40
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d119      	bne.n	8006bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd8:	61ba      	str	r2, [r7, #24]
 8006bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bfa:	bf00      	nop
 8006bfc:	3754      	adds	r7, #84	; 0x54
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff ff77 	bl	8006b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b21      	cmp	r3, #33	; 0x21
 8006c40:	d13e      	bne.n	8006cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4a:	d114      	bne.n	8006c76 <UART_Transmit_IT+0x48>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d110      	bne.n	8006c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]
 8006c74:	e008      	b.n	8006c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6211      	str	r1, [r2, #32]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4619      	mov	r1, r3
 8006c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10f      	bne.n	8006cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e000      	b.n	8006cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fefc 	bl	8006aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b08c      	sub	sp, #48	; 0x30
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b22      	cmp	r3, #34	; 0x22
 8006d10:	f040 80ab 	bne.w	8006e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d117      	bne.n	8006d4e <UART_Receive_IT+0x50>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d4c:	e026      	b.n	8006d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d007      	beq.n	8006d72 <UART_Receive_IT+0x74>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <UART_Receive_IT+0x82>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e008      	b.n	8006d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4619      	mov	r1, r3
 8006daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d15a      	bne.n	8006e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0220 	bic.w	r2, r2, #32
 8006dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d135      	bne.n	8006e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	613b      	str	r3, [r7, #16]
   return(result);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f023 0310 	bic.w	r3, r3, #16
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e16:	623a      	str	r2, [r7, #32]
 8006e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69f9      	ldr	r1, [r7, #28]
 8006e1c:	6a3a      	ldr	r2, [r7, #32]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d10a      	bne.n	8006e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fe67 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
 8006e5a:	e002      	b.n	8006e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff fe4f 	bl	8006b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e002      	b.n	8006e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e000      	b.n	8006e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e6a:	2302      	movs	r3, #2
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3730      	adds	r7, #48	; 0x30
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e78:	b0c0      	sub	sp, #256	; 0x100
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e90:	68d9      	ldr	r1, [r3, #12]
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	ea40 0301 	orr.w	r3, r0, r1
 8006e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ecc:	f021 010c 	bic.w	r1, r1, #12
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eda:	430b      	orrs	r3, r1
 8006edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eee:	6999      	ldr	r1, [r3, #24]
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	ea40 0301 	orr.w	r3, r0, r1
 8006efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b8f      	ldr	r3, [pc, #572]	; (8007140 <UART_SetConfig+0x2cc>)
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d005      	beq.n	8006f14 <UART_SetConfig+0xa0>
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b8d      	ldr	r3, [pc, #564]	; (8007144 <UART_SetConfig+0x2d0>)
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d104      	bne.n	8006f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f14:	f7fd fd1a 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8006f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f1c:	e003      	b.n	8006f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fd fd01 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8006f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f30:	f040 810c 	bne.w	800714c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	1891      	adds	r1, r2, r2
 8006f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f56:	4621      	mov	r1, r4
 8006f58:	eb12 0801 	adds.w	r8, r2, r1
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	eb43 0901 	adc.w	r9, r3, r1
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f76:	4690      	mov	r8, r2
 8006f78:	4699      	mov	r9, r3
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	eb18 0303 	adds.w	r3, r8, r3
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f84:	462b      	mov	r3, r5
 8006f86:	eb49 0303 	adc.w	r3, r9, r3
 8006f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	18db      	adds	r3, r3, r3
 8006fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa8:	4613      	mov	r3, r2
 8006faa:	eb42 0303 	adc.w	r3, r2, r3
 8006fae:	657b      	str	r3, [r7, #84]	; 0x54
 8006fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fb8:	f7f9 f906 	bl	80001c8 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4b61      	ldr	r3, [pc, #388]	; (8007148 <UART_SetConfig+0x2d4>)
 8006fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	011c      	lsls	r4, r3, #4
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fec:	4641      	mov	r1, r8
 8006fee:	eb12 0a01 	adds.w	sl, r2, r1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800700c:	4692      	mov	sl, r2
 800700e:	469b      	mov	fp, r3
 8007010:	4643      	mov	r3, r8
 8007012:	eb1a 0303 	adds.w	r3, sl, r3
 8007016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800701a:	464b      	mov	r3, r9
 800701c:	eb4b 0303 	adc.w	r3, fp, r3
 8007020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007038:	460b      	mov	r3, r1
 800703a:	18db      	adds	r3, r3, r3
 800703c:	643b      	str	r3, [r7, #64]	; 0x40
 800703e:	4613      	mov	r3, r2
 8007040:	eb42 0303 	adc.w	r3, r2, r3
 8007044:	647b      	str	r3, [r7, #68]	; 0x44
 8007046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800704a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800704e:	f7f9 f8bb 	bl	80001c8 <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4611      	mov	r1, r2
 8007058:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <UART_SetConfig+0x2d4>)
 800705a:	fba3 2301 	umull	r2, r3, r3, r1
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2264      	movs	r2, #100	; 0x64
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	1acb      	subs	r3, r1, r3
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800706e:	4b36      	ldr	r3, [pc, #216]	; (8007148 <UART_SetConfig+0x2d4>)
 8007070:	fba3 2302 	umull	r2, r3, r3, r2
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800707c:	441c      	add	r4, r3
 800707e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007082:	2200      	movs	r2, #0
 8007084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800708c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	63b9      	str	r1, [r7, #56]	; 0x38
 8007098:	415b      	adcs	r3, r3
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6339      	str	r1, [r7, #48]	; 0x30
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d4:	464b      	mov	r3, r9
 80070d6:	460a      	mov	r2, r1
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070f4:	460b      	mov	r3, r1
 80070f6:	18db      	adds	r3, r3, r3
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070fa:	4613      	mov	r3, r2
 80070fc:	eb42 0303 	adc.w	r3, r2, r3
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800710a:	f7f9 f85d 	bl	80001c8 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <UART_SetConfig+0x2d4>)
 8007114:	fba3 1302 	umull	r1, r3, r3, r2
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	2164      	movs	r1, #100	; 0x64
 800711c:	fb01 f303 	mul.w	r3, r1, r3
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	3332      	adds	r3, #50	; 0x32
 8007126:	4a08      	ldr	r2, [pc, #32]	; (8007148 <UART_SetConfig+0x2d4>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f003 0207 	and.w	r2, r3, #7
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4422      	add	r2, r4
 800713a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800713c:	e105      	b.n	800734a <UART_SetConfig+0x4d6>
 800713e:	bf00      	nop
 8007140:	40011000 	.word	0x40011000
 8007144:	40011400 	.word	0x40011400
 8007148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007150:	2200      	movs	r2, #0
 8007152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800715a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800715e:	4642      	mov	r2, r8
 8007160:	464b      	mov	r3, r9
 8007162:	1891      	adds	r1, r2, r2
 8007164:	6239      	str	r1, [r7, #32]
 8007166:	415b      	adcs	r3, r3
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
 800716a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800716e:	4641      	mov	r1, r8
 8007170:	1854      	adds	r4, r2, r1
 8007172:	4649      	mov	r1, r9
 8007174:	eb43 0501 	adc.w	r5, r3, r1
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	00eb      	lsls	r3, r5, #3
 8007182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007186:	00e2      	lsls	r2, r4, #3
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	4643      	mov	r3, r8
 800718e:	18e3      	adds	r3, r4, r3
 8007190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007194:	464b      	mov	r3, r9
 8007196:	eb45 0303 	adc.w	r3, r5, r3
 800719a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071ba:	4629      	mov	r1, r5
 80071bc:	008b      	lsls	r3, r1, #2
 80071be:	4621      	mov	r1, r4
 80071c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071c4:	4621      	mov	r1, r4
 80071c6:	008a      	lsls	r2, r1, #2
 80071c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071cc:	f7f8 fffc 	bl	80001c8 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b60      	ldr	r3, [pc, #384]	; (8007358 <UART_SetConfig+0x4e4>)
 80071d6:	fba3 2302 	umull	r2, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011c      	lsls	r4, r3, #4
 80071de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	1891      	adds	r1, r2, r2
 80071f6:	61b9      	str	r1, [r7, #24]
 80071f8:	415b      	adcs	r3, r3
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007200:	4641      	mov	r1, r8
 8007202:	1851      	adds	r1, r2, r1
 8007204:	6139      	str	r1, [r7, #16]
 8007206:	4649      	mov	r1, r9
 8007208:	414b      	adcs	r3, r1
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007218:	4659      	mov	r1, fp
 800721a:	00cb      	lsls	r3, r1, #3
 800721c:	4651      	mov	r1, sl
 800721e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007222:	4651      	mov	r1, sl
 8007224:	00ca      	lsls	r2, r1, #3
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	4603      	mov	r3, r0
 800722c:	4642      	mov	r2, r8
 800722e:	189b      	adds	r3, r3, r2
 8007230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007234:	464b      	mov	r3, r9
 8007236:	460a      	mov	r2, r1
 8007238:	eb42 0303 	adc.w	r3, r2, r3
 800723c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	67bb      	str	r3, [r7, #120]	; 0x78
 800724a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007258:	4649      	mov	r1, r9
 800725a:	008b      	lsls	r3, r1, #2
 800725c:	4641      	mov	r1, r8
 800725e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007262:	4641      	mov	r1, r8
 8007264:	008a      	lsls	r2, r1, #2
 8007266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800726a:	f7f8 ffad 	bl	80001c8 <__aeabi_uldivmod>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4b39      	ldr	r3, [pc, #228]	; (8007358 <UART_SetConfig+0x4e4>)
 8007274:	fba3 1302 	umull	r1, r3, r3, r2
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	2164      	movs	r1, #100	; 0x64
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	3332      	adds	r3, #50	; 0x32
 8007286:	4a34      	ldr	r2, [pc, #208]	; (8007358 <UART_SetConfig+0x4e4>)
 8007288:	fba2 2303 	umull	r2, r3, r2, r3
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007292:	441c      	add	r4, r3
 8007294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007298:	2200      	movs	r2, #0
 800729a:	673b      	str	r3, [r7, #112]	; 0x70
 800729c:	677a      	str	r2, [r7, #116]	; 0x74
 800729e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072a2:	4642      	mov	r2, r8
 80072a4:	464b      	mov	r3, r9
 80072a6:	1891      	adds	r1, r2, r2
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	415b      	adcs	r3, r3
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072b2:	4641      	mov	r1, r8
 80072b4:	1851      	adds	r1, r2, r1
 80072b6:	6039      	str	r1, [r7, #0]
 80072b8:	4649      	mov	r1, r9
 80072ba:	414b      	adcs	r3, r1
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072ca:	4659      	mov	r1, fp
 80072cc:	00cb      	lsls	r3, r1, #3
 80072ce:	4651      	mov	r1, sl
 80072d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072d4:	4651      	mov	r1, sl
 80072d6:	00ca      	lsls	r2, r1, #3
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	4603      	mov	r3, r0
 80072de:	4642      	mov	r2, r8
 80072e0:	189b      	adds	r3, r3, r2
 80072e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80072e4:	464b      	mov	r3, r9
 80072e6:	460a      	mov	r2, r1
 80072e8:	eb42 0303 	adc.w	r3, r2, r3
 80072ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	663b      	str	r3, [r7, #96]	; 0x60
 80072f8:	667a      	str	r2, [r7, #100]	; 0x64
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007306:	4649      	mov	r1, r9
 8007308:	008b      	lsls	r3, r1, #2
 800730a:	4641      	mov	r1, r8
 800730c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007310:	4641      	mov	r1, r8
 8007312:	008a      	lsls	r2, r1, #2
 8007314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007318:	f7f8 ff56 	bl	80001c8 <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <UART_SetConfig+0x4e4>)
 8007322:	fba3 1302 	umull	r1, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2164      	movs	r1, #100	; 0x64
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	3332      	adds	r3, #50	; 0x32
 8007334:	4a08      	ldr	r2, [pc, #32]	; (8007358 <UART_SetConfig+0x4e4>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4422      	add	r2, r4
 8007348:	609a      	str	r2, [r3, #8]
}
 800734a:	bf00      	nop
 800734c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007350:	46bd      	mov	sp, r7
 8007352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007356:	bf00      	nop
 8007358:	51eb851f 	.word	0x51eb851f

0800735c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800735c:	b084      	sub	sp, #16
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	f107 001c 	add.w	r0, r7, #28
 800736a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007372:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007374:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007376:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800737a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800737e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007382:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007386:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007396:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	b004      	add	sp, #16
 80073b0:	4770      	bx	lr

080073b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2203      	movs	r2, #3
 80073fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0303 	and.w	r3, r3, #3
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007444:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800744a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007450:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007460:	f023 030f 	bic.w	r3, r3, #15
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	b2db      	uxtb	r3, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3314      	adds	r3, #20
 80074a2:	461a      	mov	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
}  
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80074e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80074ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007504:	2300      	movs	r3, #0

}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b088      	sub	sp, #32
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007520:	2310      	movs	r3, #16
 8007522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800752c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff ff74 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800753e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007542:	2110      	movs	r1, #16
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f9d7 	bl	80078f8 <SDMMC_GetCmdResp1>
 800754a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800754c:	69fb      	ldr	r3, [r7, #28]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b088      	sub	sp, #32
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007564:	2311      	movs	r3, #17
 8007566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007568:	2340      	movs	r3, #64	; 0x40
 800756a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007576:	f107 0308 	add.w	r3, r7, #8
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ff52 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007582:	f241 3288 	movw	r2, #5000	; 0x1388
 8007586:	2111      	movs	r1, #17
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9b5 	bl	80078f8 <SDMMC_GetCmdResp1>
 800758e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007590:	69fb      	ldr	r3, [r7, #28]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b088      	sub	sp, #32
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80075a8:	2312      	movs	r3, #18
 80075aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075ac:	2340      	movs	r3, #64	; 0x40
 80075ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ff30 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80075c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ca:	2112      	movs	r1, #18
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f993 	bl	80078f8 <SDMMC_GetCmdResp1>
 80075d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075d4:	69fb      	ldr	r3, [r7, #28]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b088      	sub	sp, #32
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80075ec:	2318      	movs	r3, #24
 80075ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075f0:	2340      	movs	r3, #64	; 0x40
 80075f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ff0e 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800760a:	f241 3288 	movw	r2, #5000	; 0x1388
 800760e:	2118      	movs	r1, #24
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f971 	bl	80078f8 <SDMMC_GetCmdResp1>
 8007616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007618:	69fb      	ldr	r3, [r7, #28]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b088      	sub	sp, #32
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007630:	2319      	movs	r3, #25
 8007632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800763c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007640:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff feec 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800764e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007652:	2119      	movs	r1, #25
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f94f 	bl	80078f8 <SDMMC_GetCmdResp1>
 800765a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800765c:	69fb      	ldr	r3, [r7, #28]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007674:	230c      	movs	r3, #12
 8007676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007684:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007686:	f107 0308 	add.w	r3, r7, #8
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff feca 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007692:	4a05      	ldr	r2, [pc, #20]	; (80076a8 <SDMMC_CmdStopTransfer+0x40>)
 8007694:	210c      	movs	r1, #12
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f92e 	bl	80078f8 <SDMMC_GetCmdResp1>
 800769c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800769e:	69fb      	ldr	r3, [r7, #28]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3720      	adds	r7, #32
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	05f5e100 	.word	0x05f5e100

080076ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	; 0x28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80076bc:	2307      	movs	r3, #7
 80076be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076ce:	f107 0310 	add.w	r3, r7, #16
 80076d2:	4619      	mov	r1, r3
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fea6 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80076da:	f241 3288 	movw	r2, #5000	; 0x1388
 80076de:	2107      	movs	r1, #7
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f909 	bl	80078f8 <SDMMC_GetCmdResp1>
 80076e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3728      	adds	r7, #40	; 0x28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800770a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800770e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007710:	f107 0308 	add.w	r3, r7, #8
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff fe85 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb23 	bl	8007d68 <SDMMC_GetCmdError>
 8007722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007724:	69fb      	ldr	r3, [r7, #28]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b088      	sub	sp, #32
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007736:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800773a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800773c:	2308      	movs	r3, #8
 800773e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800774e:	f107 0308 	add.w	r3, r7, #8
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff fe66 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fab6 	bl	8007ccc <SDMMC_GetCmdResp7>
 8007760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007762:	69fb      	ldr	r3, [r7, #28]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800777a:	2337      	movs	r3, #55	; 0x37
 800777c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800777e:	2340      	movs	r3, #64	; 0x40
 8007780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800778a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800778c:	f107 0308 	add.w	r3, r7, #8
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fe47 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007798:	f241 3288 	movw	r2, #5000	; 0x1388
 800779c:	2137      	movs	r1, #55	; 0x37
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8aa 	bl	80078f8 <SDMMC_GetCmdResp1>
 80077a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077a6:	69fb      	ldr	r3, [r7, #28]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80077c6:	2329      	movs	r3, #41	; 0x29
 80077c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fe21 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9bd 	bl	8007b64 <SDMMC_GetCmdResp3>
 80077ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ec:	69fb      	ldr	r3, [r7, #28]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3720      	adds	r7, #32
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007802:	2302      	movs	r3, #2
 8007804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007806:	23c0      	movs	r3, #192	; 0xc0
 8007808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800780e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007812:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007814:	f107 0308 	add.w	r3, r7, #8
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fe03 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f957 	bl	8007ad4 <SDMMC_GetCmdResp2>
 8007826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007828:	69fb      	ldr	r3, [r7, #28]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b088      	sub	sp, #32
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007840:	2309      	movs	r3, #9
 8007842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007844:	23c0      	movs	r3, #192	; 0xc0
 8007846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800784c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fde4 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f938 	bl	8007ad4 <SDMMC_GetCmdResp2>
 8007864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007866:	69fb      	ldr	r3, [r7, #28]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800787e:	2303      	movs	r3, #3
 8007880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007882:	2340      	movs	r3, #64	; 0x40
 8007884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800788a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800788e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fdc5 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	2103      	movs	r1, #3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f99d 	bl	8007be0 <SDMMC_GetCmdResp6>
 80078a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078a8:	69fb      	ldr	r3, [r7, #28]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b088      	sub	sp, #32
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80078c0:	230d      	movs	r3, #13
 80078c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d2:	f107 0308 	add.w	r3, r7, #8
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff fda4 	bl	8007426 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	210d      	movs	r1, #13
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f807 	bl	80078f8 <SDMMC_GetCmdResp1>
 80078ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ec:	69fb      	ldr	r3, [r7, #28]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007906:	4b70      	ldr	r3, [pc, #448]	; (8007ac8 <SDMMC_GetCmdResp1+0x1d0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a70      	ldr	r2, [pc, #448]	; (8007acc <SDMMC_GetCmdResp1+0x1d4>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	0a5a      	lsrs	r2, r3, #9
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	fb02 f303 	mul.w	r3, r2, r3
 8007918:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	1e5a      	subs	r2, r3, #1
 800791e:	61fa      	str	r2, [r7, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007928:	e0c9      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ef      	beq.n	800791a <SDMMC_GetCmdResp1+0x22>
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1ea      	bne.n	800791a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2204      	movs	r2, #4
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007956:	2304      	movs	r3, #4
 8007958:	e0b1      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800796c:	2301      	movs	r3, #1
 800796e:	e0a6      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	22c5      	movs	r2, #197	; 0xc5
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fd7f 	bl	800747a <SDIO_GetCommandResponse>
 800797c:	4603      	mov	r3, r0
 800797e:	461a      	mov	r2, r3
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	4293      	cmp	r3, r2
 8007984:	d001      	beq.n	800798a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007986:	2301      	movs	r3, #1
 8007988:	e099      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800798a:	2100      	movs	r1, #0
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fd81 	bl	8007494 <SDIO_GetResponse>
 8007992:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4b4e      	ldr	r3, [pc, #312]	; (8007ad0 <SDMMC_GetCmdResp1+0x1d8>)
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800799e:	2300      	movs	r3, #0
 80079a0:	e08d      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da02      	bge.n	80079ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80079a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079ac:	e087      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	e080      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80079c6:	2380      	movs	r3, #128	; 0x80
 80079c8:	e079      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80079d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079d8:	e071      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80079e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079e8:	e069      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80079f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f8:	e061      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a08:	e059      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a18:	e051      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a28:	e049      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007a34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a38:	e041      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a48:	e039      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a58:	e031      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007a64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a68:	e029      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007a74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a78:	e021      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a88:	e019      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a98:	e011      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007aa4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007aa8:	e009      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007ab4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ab8:	e001      	b.n	8007abe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000000 	.word	0x20000000
 8007acc:	10624dd3 	.word	0x10624dd3
 8007ad0:	fdffe008 	.word	0xfdffe008

08007ad4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007adc:	4b1f      	ldr	r3, [pc, #124]	; (8007b5c <SDMMC_GetCmdResp2+0x88>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <SDMMC_GetCmdResp2+0x8c>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	0a5b      	lsrs	r3, r3, #9
 8007ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
 8007af0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1e5a      	subs	r2, r3, #1
 8007af6:	60fa      	str	r2, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007afc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b00:	e026      	b.n	8007b50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0ef      	beq.n	8007af2 <SDMMC_GetCmdResp2+0x1e>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1ea      	bne.n	8007af2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b2e:	2304      	movs	r3, #4
 8007b30:	e00e      	b.n	8007b50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e003      	b.n	8007b50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	22c5      	movs	r2, #197	; 0xc5
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000000 	.word	0x20000000
 8007b60:	10624dd3 	.word	0x10624dd3

08007b64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <SDMMC_GetCmdResp3+0x74>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <SDMMC_GetCmdResp3+0x78>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	0a5b      	lsrs	r3, r3, #9
 8007b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1e5a      	subs	r2, r3, #1
 8007b86:	60fa      	str	r2, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b90:	e01b      	b.n	8007bca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0ef      	beq.n	8007b82 <SDMMC_GetCmdResp3+0x1e>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1ea      	bne.n	8007b82 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2204      	movs	r2, #4
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bbe:	2304      	movs	r3, #4
 8007bc0:	e003      	b.n	8007bca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	22c5      	movs	r2, #197	; 0xc5
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000000 	.word	0x20000000
 8007bdc:	10624dd3 	.word	0x10624dd3

08007be0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	460b      	mov	r3, r1
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bee:	4b35      	ldr	r3, [pc, #212]	; (8007cc4 <SDMMC_GetCmdResp6+0xe4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a35      	ldr	r2, [pc, #212]	; (8007cc8 <SDMMC_GetCmdResp6+0xe8>)
 8007bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf8:	0a5b      	lsrs	r3, r3, #9
 8007bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfe:	fb02 f303 	mul.w	r3, r2, r3
 8007c02:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	1e5a      	subs	r2, r3, #1
 8007c08:	61fa      	str	r2, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c12:	e052      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0ef      	beq.n	8007c04 <SDMMC_GetCmdResp6+0x24>
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ea      	bne.n	8007c04 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c40:	2304      	movs	r3, #4
 8007c42:	e03a      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2201      	movs	r2, #1
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e02f      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff fc0d 	bl	800747a <SDIO_GetCommandResponse>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d001      	beq.n	8007c6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e025      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	22c5      	movs	r2, #197	; 0xc5
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c74:	2100      	movs	r1, #0
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fc0c 	bl	8007494 <SDIO_GetResponse>
 8007c7c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e011      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ca4:	e009      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cb4:	e001      	b.n	8007cba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3720      	adds	r7, #32
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000000 	.word	0x20000000
 8007cc8:	10624dd3 	.word	0x10624dd3

08007ccc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007cd4:	4b22      	ldr	r3, [pc, #136]	; (8007d60 <SDMMC_GetCmdResp7+0x94>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a22      	ldr	r2, [pc, #136]	; (8007d64 <SDMMC_GetCmdResp7+0x98>)
 8007cda:	fba2 2303 	umull	r2, r3, r2, r3
 8007cde:	0a5b      	lsrs	r3, r3, #9
 8007ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce4:	fb02 f303 	mul.w	r3, r2, r3
 8007ce8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	1e5a      	subs	r2, r3, #1
 8007cee:	60fa      	str	r2, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cf8:	e02c      	b.n	8007d54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0ef      	beq.n	8007cea <SDMMC_GetCmdResp7+0x1e>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ea      	bne.n	8007cea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2204      	movs	r2, #4
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d26:	2304      	movs	r3, #4
 8007d28:	e014      	b.n	8007d54 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e009      	b.n	8007d54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2240      	movs	r2, #64	; 0x40
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007d52:	2300      	movs	r3, #0
  
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20000000 	.word	0x20000000
 8007d64:	10624dd3 	.word	0x10624dd3

08007d68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d70:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <SDMMC_GetCmdError+0x50>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a11      	ldr	r2, [pc, #68]	; (8007dbc <SDMMC_GetCmdError+0x54>)
 8007d76:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7a:	0a5b      	lsrs	r3, r3, #9
 8007d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d94:	e009      	b.n	8007daa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f1      	beq.n	8007d86 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	22c5      	movs	r2, #197	; 0xc5
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20000000 	.word	0x20000000
 8007dbc:	10624dd3 	.word	0x10624dd3

08007dc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	f107 001c 	add.w	r0, r7, #28
 8007dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d122      	bne.n	8007e1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d105      	bne.n	8007e12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fbee 	bl	80095f4 <USB_CoreReset>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
 8007e1c:	e01a      	b.n	8007e54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fbe2 	bl	80095f4 <USB_CoreReset>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
 8007e46:	e005      	b.n	8007e54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10b      	bne.n	8007e72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f043 0206 	orr.w	r2, r3, #6
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f043 0220 	orr.w	r2, r3, #32
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e7e:	b004      	add	sp, #16
 8007e80:	4770      	bx	lr
	...

08007e84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d165      	bne.n	8007f64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4a41      	ldr	r2, [pc, #260]	; (8007fa0 <USB_SetTurnaroundTime+0x11c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d906      	bls.n	8007eae <USB_SetTurnaroundTime+0x2a>
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a40      	ldr	r2, [pc, #256]	; (8007fa4 <USB_SetTurnaroundTime+0x120>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d202      	bcs.n	8007eae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ea8:	230f      	movs	r3, #15
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	e062      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4a3c      	ldr	r2, [pc, #240]	; (8007fa4 <USB_SetTurnaroundTime+0x120>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d306      	bcc.n	8007ec4 <USB_SetTurnaroundTime+0x40>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a3b      	ldr	r2, [pc, #236]	; (8007fa8 <USB_SetTurnaroundTime+0x124>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d202      	bcs.n	8007ec4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ebe:	230e      	movs	r3, #14
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e057      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4a38      	ldr	r2, [pc, #224]	; (8007fa8 <USB_SetTurnaroundTime+0x124>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d306      	bcc.n	8007eda <USB_SetTurnaroundTime+0x56>
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a37      	ldr	r2, [pc, #220]	; (8007fac <USB_SetTurnaroundTime+0x128>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d202      	bcs.n	8007eda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ed4:	230d      	movs	r3, #13
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e04c      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	4a33      	ldr	r2, [pc, #204]	; (8007fac <USB_SetTurnaroundTime+0x128>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d306      	bcc.n	8007ef0 <USB_SetTurnaroundTime+0x6c>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a32      	ldr	r2, [pc, #200]	; (8007fb0 <USB_SetTurnaroundTime+0x12c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d802      	bhi.n	8007ef0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007eea:	230c      	movs	r3, #12
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	e041      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4a2f      	ldr	r2, [pc, #188]	; (8007fb0 <USB_SetTurnaroundTime+0x12c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d906      	bls.n	8007f06 <USB_SetTurnaroundTime+0x82>
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <USB_SetTurnaroundTime+0x130>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d802      	bhi.n	8007f06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f00:	230b      	movs	r3, #11
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	e036      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <USB_SetTurnaroundTime+0x130>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d906      	bls.n	8007f1c <USB_SetTurnaroundTime+0x98>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <USB_SetTurnaroundTime+0x134>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d802      	bhi.n	8007f1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f16:	230a      	movs	r3, #10
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e02b      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4a26      	ldr	r2, [pc, #152]	; (8007fb8 <USB_SetTurnaroundTime+0x134>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d906      	bls.n	8007f32 <USB_SetTurnaroundTime+0xae>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4a25      	ldr	r2, [pc, #148]	; (8007fbc <USB_SetTurnaroundTime+0x138>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d202      	bcs.n	8007f32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f2c:	2309      	movs	r3, #9
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e020      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	4a21      	ldr	r2, [pc, #132]	; (8007fbc <USB_SetTurnaroundTime+0x138>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d306      	bcc.n	8007f48 <USB_SetTurnaroundTime+0xc4>
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	4a20      	ldr	r2, [pc, #128]	; (8007fc0 <USB_SetTurnaroundTime+0x13c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d802      	bhi.n	8007f48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f42:	2308      	movs	r3, #8
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e015      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <USB_SetTurnaroundTime+0x13c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d906      	bls.n	8007f5e <USB_SetTurnaroundTime+0xda>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <USB_SetTurnaroundTime+0x140>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d202      	bcs.n	8007f5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f58:	2307      	movs	r3, #7
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e00a      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f5e:	2306      	movs	r3, #6
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	e007      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f6a:	2309      	movs	r3, #9
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	e001      	b.n	8007f74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f70:	2309      	movs	r3, #9
 8007f72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	00d8acbf 	.word	0x00d8acbf
 8007fa4:	00e4e1c0 	.word	0x00e4e1c0
 8007fa8:	00f42400 	.word	0x00f42400
 8007fac:	01067380 	.word	0x01067380
 8007fb0:	011a499f 	.word	0x011a499f
 8007fb4:	01312cff 	.word	0x01312cff
 8007fb8:	014ca43f 	.word	0x014ca43f
 8007fbc:	016e3600 	.word	0x016e3600
 8007fc0:	01a6ab1f 	.word	0x01a6ab1f
 8007fc4:	01e84800 	.word	0x01e84800

08007fc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f043 0201 	orr.w	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d115      	bne.n	800805a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800803a:	2001      	movs	r0, #1
 800803c:	f7f9 fca4 	bl	8001988 <HAL_Delay>
      ms++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 fa45 	bl	80094d6 <USB_GetMode>
 800804c:	4603      	mov	r3, r0
 800804e:	2b01      	cmp	r3, #1
 8008050:	d01e      	beq.n	8008090 <USB_SetCurrentMode+0x84>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b31      	cmp	r3, #49	; 0x31
 8008056:	d9f0      	bls.n	800803a <USB_SetCurrentMode+0x2e>
 8008058:	e01a      	b.n	8008090 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d115      	bne.n	800808c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800806c:	2001      	movs	r0, #1
 800806e:	f7f9 fc8b 	bl	8001988 <HAL_Delay>
      ms++;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fa2c 	bl	80094d6 <USB_GetMode>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d005      	beq.n	8008090 <USB_SetCurrentMode+0x84>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b31      	cmp	r3, #49	; 0x31
 8008088:	d9f0      	bls.n	800806c <USB_SetCurrentMode+0x60>
 800808a:	e001      	b.n	8008090 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e005      	b.n	800809c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b32      	cmp	r3, #50	; 0x32
 8008094:	d101      	bne.n	800809a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a4:	b084      	sub	sp, #16
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	e009      	b.n	80080d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3340      	adds	r3, #64	; 0x40
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	3301      	adds	r3, #1
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b0e      	cmp	r3, #14
 80080dc:	d9f2      	bls.n	80080c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d11c      	bne.n	800811e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080f2:	f043 0302 	orr.w	r3, r3, #2
 80080f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	639a      	str	r2, [r3, #56]	; 0x38
 800811c:	e00b      	b.n	8008136 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800813c:	461a      	mov	r2, r3
 800813e:	2300      	movs	r3, #0
 8008140:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008148:	4619      	mov	r1, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008150:	461a      	mov	r2, r3
 8008152:	680b      	ldr	r3, [r1, #0]
 8008154:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	2b01      	cmp	r3, #1
 800815a:	d10c      	bne.n	8008176 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d104      	bne.n	800816c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f965 	bl	8008434 <USB_SetDevSpeed>
 800816a:	e008      	b.n	800817e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800816c:	2101      	movs	r1, #1
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f960 	bl	8008434 <USB_SetDevSpeed>
 8008174:	e003      	b.n	800817e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008176:	2103      	movs	r1, #3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f95b 	bl	8008434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800817e:	2110      	movs	r1, #16
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8f3 	bl	800836c <USB_FlushTxFifo>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f91f 	bl	80083d4 <USB_FlushRxFifo>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a6:	461a      	mov	r2, r3
 80081a8:	2300      	movs	r3, #0
 80081aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b2:	461a      	mov	r2, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081c4:	2300      	movs	r3, #0
 80081c6:	613b      	str	r3, [r7, #16]
 80081c8:	e043      	b.n	8008252 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e0:	d118      	bne.n	8008214 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	461a      	mov	r2, r3
 80081f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	e013      	b.n	8008226 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820a:	461a      	mov	r2, r3
 800820c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e008      	b.n	8008226 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	461a      	mov	r2, r3
 8008222:	2300      	movs	r3, #0
 8008224:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008232:	461a      	mov	r2, r3
 8008234:	2300      	movs	r3, #0
 8008236:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008244:	461a      	mov	r2, r3
 8008246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800824a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3301      	adds	r3, #1
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d3b7      	bcc.n	80081ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800825a:	2300      	movs	r3, #0
 800825c:	613b      	str	r3, [r7, #16]
 800825e:	e043      	b.n	80082e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008276:	d118      	bne.n	80082aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	461a      	mov	r2, r3
 800828c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	e013      	b.n	80082bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a0:	461a      	mov	r2, r3
 80082a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	e008      	b.n	80082bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	2300      	movs	r3, #0
 80082ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	461a      	mov	r2, r3
 80082ca:	2300      	movs	r3, #0
 80082cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082da:	461a      	mov	r2, r3
 80082dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	3301      	adds	r3, #1
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d3b7      	bcc.n	8008260 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008302:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008310:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f043 0210 	orr.w	r2, r3, #16
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <USB_DevInit+0x2c4>)
 800832a:	4313      	orrs	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f043 0208 	orr.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008344:	2b01      	cmp	r3, #1
 8008346:	d107      	bne.n	8008358 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008350:	f043 0304 	orr.w	r3, r3, #4
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008364:	b004      	add	sp, #16
 8008366:	4770      	bx	lr
 8008368:	803c3800 	.word	0x803c3800

0800836c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a13      	ldr	r2, [pc, #76]	; (80083d0 <USB_FlushTxFifo+0x64>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e01b      	b.n	80083c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	daf2      	bge.n	800837a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	019b      	lsls	r3, r3, #6
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4a08      	ldr	r2, [pc, #32]	; (80083d0 <USB_FlushTxFifo+0x64>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d901      	bls.n	80083b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e006      	b.n	80083c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d0f0      	beq.n	80083a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	00030d40 	.word	0x00030d40

080083d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4a11      	ldr	r2, [pc, #68]	; (8008430 <USB_FlushRxFifo+0x5c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e018      	b.n	8008424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	daf2      	bge.n	80083e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2210      	movs	r2, #16
 8008402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a08      	ldr	r2, [pc, #32]	; (8008430 <USB_FlushRxFifo+0x5c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e006      	b.n	8008424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b10      	cmp	r3, #16
 8008420:	d0f0      	beq.n	8008404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	00030d40 	.word	0x00030d40

08008434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008454:	4313      	orrs	r3, r2
 8008456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008466:	b480      	push	{r7}
 8008468:	b087      	sub	sp, #28
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0306 	and.w	r3, r3, #6
 800847e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]
 800848a:	e00a      	b.n	80084a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d002      	beq.n	8008498 <USB_GetDevSpeed+0x32>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b06      	cmp	r3, #6
 8008496:	d102      	bne.n	800849e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008498:	2302      	movs	r3, #2
 800849a:	75fb      	strb	r3, [r7, #23]
 800849c:	e001      	b.n	80084a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800849e:	230f      	movs	r3, #15
 80084a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d13a      	bne.n	8008542 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d2:	69da      	ldr	r2, [r3, #28]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	2101      	movs	r1, #1
 80084de:	fa01 f303 	lsl.w	r3, r1, r3
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ea:	4313      	orrs	r3, r2
 80084ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d155      	bne.n	80085b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	791b      	ldrb	r3, [r3, #4]
 800851e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008520:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	059b      	lsls	r3, r3, #22
 8008526:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008528:	4313      	orrs	r3, r2
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	440a      	add	r2, r1
 8008532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e036      	b.n	80085b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008548:	69da      	ldr	r2, [r3, #28]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	2101      	movs	r1, #1
 8008554:	fa01 f303 	lsl.w	r3, r1, r3
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	68f9      	ldr	r1, [r7, #12]
 800855c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008560:	4313      	orrs	r3, r2
 8008562:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d11a      	bne.n	80085b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	791b      	ldrb	r3, [r3, #4]
 8008594:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008596:	430b      	orrs	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
	...

080085c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d161      	bne.n	80086a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f2:	d11f      	bne.n	8008634 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008612:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008632:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	2101      	movs	r1, #1
 8008646:	fa01 f303 	lsl.w	r3, r1, r3
 800864a:	b29b      	uxth	r3, r3
 800864c:	43db      	mvns	r3, r3
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008654:	4013      	ands	r3, r2
 8008656:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	2101      	movs	r1, #1
 800866a:	fa01 f303 	lsl.w	r3, r1, r3
 800866e:	b29b      	uxth	r3, r3
 8008670:	43db      	mvns	r3, r3
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008678:	4013      	ands	r3, r2
 800867a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	0159      	lsls	r1, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	440b      	add	r3, r1
 8008692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008696:	4619      	mov	r1, r3
 8008698:	4b35      	ldr	r3, [pc, #212]	; (8008770 <USB_DeactivateEndpoint+0x1b0>)
 800869a:	4013      	ands	r3, r2
 800869c:	600b      	str	r3, [r1, #0]
 800869e:	e060      	b.n	8008762 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b6:	d11f      	bne.n	80086f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	2101      	movs	r1, #1
 800870a:	fa01 f303 	lsl.w	r3, r1, r3
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	43db      	mvns	r3, r3
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008718:	4013      	ands	r3, r2
 800871a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	69da      	ldr	r2, [r3, #28]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	2101      	movs	r1, #1
 800872e:	fa01 f303 	lsl.w	r3, r1, r3
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	43db      	mvns	r3, r3
 8008736:	68f9      	ldr	r1, [r7, #12]
 8008738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800873c:	4013      	ands	r3, r2
 800873e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	0159      	lsls	r1, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	440b      	add	r3, r1
 8008756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875a:	4619      	mov	r1, r3
 800875c:	4b05      	ldr	r3, [pc, #20]	; (8008774 <USB_DeactivateEndpoint+0x1b4>)
 800875e:	4013      	ands	r3, r2
 8008760:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	ec337800 	.word	0xec337800
 8008774:	eff37800 	.word	0xeff37800

08008778 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	; 0x28
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	785b      	ldrb	r3, [r3, #1]
 8008794:	2b01      	cmp	r3, #1
 8008796:	f040 815c 	bne.w	8008a52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d132      	bne.n	8008808 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008800:	0cdb      	lsrs	r3, r3, #19
 8008802:	04db      	lsls	r3, r3, #19
 8008804:	6113      	str	r3, [r2, #16]
 8008806:	e074      	b.n	80088f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008822:	0cdb      	lsrs	r3, r3, #19
 8008824:	04db      	lsls	r3, r3, #19
 8008826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	69fa      	ldr	r2, [r7, #28]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800884a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008858:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6999      	ldr	r1, [r3, #24]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	440b      	add	r3, r1
 8008864:	1e59      	subs	r1, r3, #1
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	fbb1 f3f3 	udiv	r3, r1, r3
 800886e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008870:	4b9d      	ldr	r3, [pc, #628]	; (8008ae8 <USB_EPStartXfer+0x370>)
 8008872:	400b      	ands	r3, r1
 8008874:	69b9      	ldr	r1, [r7, #24]
 8008876:	0148      	lsls	r0, r1, #5
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	4401      	add	r1, r0
 800887c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008880:	4313      	orrs	r3, r2
 8008882:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889a:	69b9      	ldr	r1, [r7, #24]
 800889c:	0148      	lsls	r0, r1, #5
 800889e:	69f9      	ldr	r1, [r7, #28]
 80088a0:	4401      	add	r1, r0
 80088a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088a6:	4313      	orrs	r3, r2
 80088a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	791b      	ldrb	r3, [r3, #4]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d11f      	bne.n	80088f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	0151      	lsls	r1, r2, #5
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	440a      	add	r2, r1
 80088c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	0151      	lsls	r1, r2, #5
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	440a      	add	r2, r1
 80088e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d14b      	bne.n	8008990 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d009      	beq.n	8008914 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890c:	461a      	mov	r2, r3
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	791b      	ldrb	r3, [r3, #4]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d128      	bne.n	800896e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008928:	2b00      	cmp	r3, #0
 800892a:	d110      	bne.n	800894e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	e00f      	b.n	800896e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800896c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	0151      	lsls	r1, r2, #5
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	440a      	add	r2, r1
 8008984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008988:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e133      	b.n	8008bf8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	791b      	ldrb	r3, [r3, #4]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d015      	beq.n	80089e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 811b 	beq.w	8008bf8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	2101      	movs	r1, #1
 80089d4:	fa01 f303 	lsl.w	r3, r1, r3
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089de:	4313      	orrs	r3, r2
 80089e0:	634b      	str	r3, [r1, #52]	; 0x34
 80089e2:	e109      	b.n	8008bf8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d110      	bne.n	8008a16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	0151      	lsls	r1, r2, #5
 8008a06:	69fa      	ldr	r2, [r7, #28]
 8008a08:	440a      	add	r2, r1
 8008a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	e00f      	b.n	8008a36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	0151      	lsls	r1, r2, #5
 8008a28:	69fa      	ldr	r2, [r7, #28]
 8008a2a:	440a      	add	r2, r1
 8008a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6919      	ldr	r1, [r3, #16]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	b298      	uxth	r0, r3
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4603      	mov	r3, r0
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fade 	bl	800900c <USB_WritePacket>
 8008a50:	e0d2      	b.n	8008bf8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a6c:	0cdb      	lsrs	r3, r3, #19
 8008a6e:	04db      	lsls	r3, r3, #19
 8008a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d126      	bne.n	8008aec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aaa:	691a      	ldr	r2, [r3, #16]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ab4:	69b9      	ldr	r1, [r7, #24]
 8008ab6:	0148      	lsls	r0, r1, #5
 8008ab8:	69f9      	ldr	r1, [r7, #28]
 8008aba:	4401      	add	r1, r0
 8008abc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	0151      	lsls	r1, r2, #5
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	440a      	add	r2, r1
 8008ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ae2:	6113      	str	r3, [r2, #16]
 8008ae4:	e03a      	b.n	8008b5c <USB_EPStartXfer+0x3e4>
 8008ae6:	bf00      	nop
 8008ae8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	699a      	ldr	r2, [r3, #24]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	8afa      	ldrh	r2, [r7, #22]
 8008b08:	fb03 f202 	mul.w	r2, r3, r2
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	8afb      	ldrh	r3, [r7, #22]
 8008b20:	04d9      	lsls	r1, r3, #19
 8008b22:	4b38      	ldr	r3, [pc, #224]	; (8008c04 <USB_EPStartXfer+0x48c>)
 8008b24:	400b      	ands	r3, r1
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	0148      	lsls	r0, r1, #5
 8008b2a:	69f9      	ldr	r1, [r7, #28]
 8008b2c:	4401      	add	r1, r0
 8008b2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b32:	4313      	orrs	r3, r2
 8008b34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	0148      	lsls	r0, r1, #5
 8008b50:	69f9      	ldr	r1, [r7, #28]
 8008b52:	4401      	add	r1, r0
 8008b54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d10d      	bne.n	8008b7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6919      	ldr	r1, [r3, #16]
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	460a      	mov	r2, r1
 8008b7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	791b      	ldrb	r3, [r3, #4]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d128      	bne.n	8008bd8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d110      	bne.n	8008bb8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e00f      	b.n	8008bd8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3720      	adds	r7, #32
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	1ff80000 	.word	0x1ff80000

08008c08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	785b      	ldrb	r3, [r3, #1]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	f040 80ce 	bne.w	8008dc6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d132      	bne.n	8008c98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	0151      	lsls	r1, r2, #5
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	440a      	add	r2, r1
 8008c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c90:	0cdb      	lsrs	r3, r3, #19
 8008c92:	04db      	lsls	r3, r3, #19
 8008c94:	6113      	str	r3, [r2, #16]
 8008c96:	e04e      	b.n	8008d36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb2:	0cdb      	lsrs	r3, r3, #19
 8008cb4:	04db      	lsls	r3, r3, #19
 8008cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	699a      	ldr	r2, [r3, #24]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d903      	bls.n	8008cf0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d26:	6939      	ldr	r1, [r7, #16]
 8008d28:	0148      	lsls	r0, r1, #5
 8008d2a:	6979      	ldr	r1, [r7, #20]
 8008d2c:	4401      	add	r1, r0
 8008d2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d32:	4313      	orrs	r3, r2
 8008d34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d11e      	bne.n	8008d7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d50:	461a      	mov	r2, r3
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	0151      	lsls	r1, r2, #5
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	440a      	add	r2, r1
 8008d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	e097      	b.n	8008eaa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8083 	beq.w	8008eaa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	2101      	movs	r1, #1
 8008db6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dba:	6979      	ldr	r1, [r7, #20]
 8008dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	634b      	str	r3, [r1, #52]	; 0x34
 8008dc4:	e071      	b.n	8008eaa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	0151      	lsls	r1, r2, #5
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	440a      	add	r2, r1
 8008ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de0:	0cdb      	lsrs	r3, r3, #19
 8008de2:	04db      	lsls	r3, r3, #19
 8008de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e58:	6939      	ldr	r1, [r7, #16]
 8008e5a:	0148      	lsls	r0, r1, #5
 8008e5c:	6979      	ldr	r1, [r7, #20]
 8008e5e:	4401      	add	r1, r0
 8008e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e64:	4313      	orrs	r3, r2
 8008e66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d10d      	bne.n	8008e8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6919      	ldr	r1, [r3, #16]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e86:	460a      	mov	r2, r1
 8008e88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ea8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d14a      	bne.n	8008f6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eee:	f040 8086 	bne.w	8008ffe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	7812      	ldrb	r2, [r2, #0]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d902      	bls.n	8008f50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f4e:	e056      	b.n	8008ffe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f68:	d0e7      	beq.n	8008f3a <USB_EPStopXfer+0x82>
 8008f6a:	e048      	b.n	8008ffe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f84:	d13b      	bne.n	8008ffe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	7812      	ldrb	r2, [r2, #0]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fa8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	7812      	ldrb	r2, [r2, #0]
 8008fbe:	0151      	lsls	r1, r2, #5
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d902      	bls.n	8008fe4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fe2:	e00c      	b.n	8008ffe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ffc:	d0e7      	beq.n	8008fce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800900c:	b480      	push	{r7}
 800900e:	b089      	sub	sp, #36	; 0x24
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4611      	mov	r1, r2
 8009018:	461a      	mov	r2, r3
 800901a:	460b      	mov	r3, r1
 800901c:	71fb      	strb	r3, [r7, #7]
 800901e:	4613      	mov	r3, r2
 8009020:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800902a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800902e:	2b00      	cmp	r3, #0
 8009030:	d123      	bne.n	800907a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009032:	88bb      	ldrh	r3, [r7, #4]
 8009034:	3303      	adds	r3, #3
 8009036:	089b      	lsrs	r3, r3, #2
 8009038:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800903a:	2300      	movs	r3, #0
 800903c:	61bb      	str	r3, [r7, #24]
 800903e:	e018      	b.n	8009072 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	031a      	lsls	r2, r3, #12
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	4413      	add	r3, r2
 8009048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904c:	461a      	mov	r2, r3
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	3301      	adds	r3, #1
 8009058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	3301      	adds	r3, #1
 800905e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	3301      	adds	r3, #1
 8009064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	3301      	adds	r3, #1
 800906a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	3301      	adds	r3, #1
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	429a      	cmp	r2, r3
 8009078:	d3e2      	bcc.n	8009040 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3724      	adds	r7, #36	; 0x24
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009088:	b480      	push	{r7}
 800908a:	b08b      	sub	sp, #44	; 0x2c
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	089b      	lsrs	r3, r3, #2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090ae:	2300      	movs	r3, #0
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	e014      	b.n	80090de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	601a      	str	r2, [r3, #0]
    pDest++;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	3301      	adds	r3, #1
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	3301      	adds	r3, #1
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	3301      	adds	r3, #1
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	3301      	adds	r3, #1
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	3301      	adds	r3, #1
 80090dc:	623b      	str	r3, [r7, #32]
 80090de:	6a3a      	ldr	r2, [r7, #32]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d3e6      	bcc.n	80090b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090e6:	8bfb      	ldrh	r3, [r7, #30]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01e      	beq.n	800912a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f6:	461a      	mov	r2, r3
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	6812      	ldr	r2, [r2, #0]
 80090fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	b2da      	uxtb	r2, r3
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	701a      	strb	r2, [r3, #0]
      i++;
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	3301      	adds	r3, #1
 8009116:	623b      	str	r3, [r7, #32]
      pDest++;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	3301      	adds	r3, #1
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800911e:	8bfb      	ldrh	r3, [r7, #30]
 8009120:	3b01      	subs	r3, #1
 8009122:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009124:	8bfb      	ldrh	r3, [r7, #30]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1ea      	bne.n	8009100 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800912c:	4618      	mov	r0, r3
 800912e:	372c      	adds	r7, #44	; 0x2c
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	785b      	ldrb	r3, [r3, #1]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d12c      	bne.n	80091ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	db12      	blt.n	800918c <USB_EPSetStall+0x54>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00f      	beq.n	800918c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	440a      	add	r2, r1
 8009182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800918a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	e02b      	b.n	8009206 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	db12      	blt.n	80091e6 <USB_EPSetStall+0xae>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00f      	beq.n	80091e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	0151      	lsls	r1, r2, #5
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	440a      	add	r2, r1
 80091dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	0151      	lsls	r1, r2, #5
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	440a      	add	r2, r1
 80091fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009204:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d128      	bne.n	8009282 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800924e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	791b      	ldrb	r3, [r3, #4]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d003      	beq.n	8009260 <USB_EPClearStall+0x4c>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	791b      	ldrb	r3, [r3, #4]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d138      	bne.n	80092d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	e027      	b.n	80092d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	791b      	ldrb	r3, [r3, #4]
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d003      	beq.n	80092b2 <USB_EPClearStall+0x9e>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	791b      	ldrb	r3, [r3, #4]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d10f      	bne.n	80092d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	0151      	lsls	r1, r2, #5
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	440a      	add	r2, r1
 80092c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009302:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009314:	68f9      	ldr	r1, [r7, #12]
 8009316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800931a:	4313      	orrs	r3, r2
 800931c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009346:	f023 0303 	bic.w	r3, r3, #3
 800934a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800935a:	f023 0302 	bic.w	r3, r3, #2
 800935e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009388:	f023 0303 	bic.w	r3, r3, #3
 800938c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800939c:	f043 0302 	orr.w	r3, r3, #2
 80093a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4013      	ands	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093c8:	68fb      	ldr	r3, [r7, #12]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	4013      	ands	r3, r2
 80093f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	0c1b      	lsrs	r3, r3, #16
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	4013      	ands	r3, r2
 800942c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	b29b      	uxth	r3, r3
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4013      	ands	r3, r2
 800946a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800946c:	68bb      	ldr	r3, [r7, #8]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800947a:	b480      	push	{r7}
 800947c:	b087      	sub	sp, #28
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	fa22 f303 	lsr.w	r3, r2, r3
 80094aa:	01db      	lsls	r3, r3, #7
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	015a      	lsls	r2, r3, #5
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4413      	add	r3, r2
 80094bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4013      	ands	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094c8:	68bb      	ldr	r3, [r7, #8]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0301 	and.w	r3, r3, #1
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009510:	f023 0307 	bic.w	r3, r3, #7
 8009514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	460b      	mov	r3, r1
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	333c      	adds	r3, #60	; 0x3c
 800954e:	3304      	adds	r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	4a26      	ldr	r2, [pc, #152]	; (80095f0 <USB_EP0_OutStart+0xb8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d90a      	bls.n	8009572 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800956c:	d101      	bne.n	8009572 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	e037      	b.n	80095e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009578:	461a      	mov	r2, r3
 800957a:	2300      	movs	r3, #0
 800957c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800958c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095a0:	f043 0318 	orr.w	r3, r3, #24
 80095a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d10f      	bne.n	80095e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	4f54300a 	.word	0x4f54300a

080095f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4a13      	ldr	r2, [pc, #76]	; (8009658 <USB_CoreReset+0x64>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d901      	bls.n	8009612 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e01b      	b.n	800964a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	daf2      	bge.n	8009600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f043 0201 	orr.w	r2, r3, #1
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3301      	adds	r3, #1
 800962e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a09      	ldr	r2, [pc, #36]	; (8009658 <USB_CoreReset+0x64>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d901      	bls.n	800963c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e006      	b.n	800964a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b01      	cmp	r3, #1
 8009646:	d0f0      	beq.n	800962a <USB_CoreReset+0x36>

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3714      	adds	r7, #20
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	00030d40 	.word	0x00030d40

0800965c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009660:	4904      	ldr	r1, [pc, #16]	; (8009674 <MX_FATFS_Init+0x18>)
 8009662:	4805      	ldr	r0, [pc, #20]	; (8009678 <MX_FATFS_Init+0x1c>)
 8009664:	f002 f958 	bl	800b918 <FATFS_LinkDriver>
 8009668:	4603      	mov	r3, r0
 800966a:	461a      	mov	r2, r3
 800966c:	4b03      	ldr	r3, [pc, #12]	; (800967c <MX_FATFS_Init+0x20>)
 800966e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009670:	bf00      	nop
 8009672:	bd80      	pop	{r7, pc}
 8009674:	200006a8 	.word	0x200006a8
 8009678:	0800c414 	.word	0x0800c414
 800967c:	200006a4 	.word	0x200006a4

08009680 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800968a:	f000 f86b 	bl	8009764 <BSP_SD_IsDetected>
 800968e:	4603      	mov	r3, r0
 8009690:	2b01      	cmp	r3, #1
 8009692:	d001      	beq.n	8009698 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e005      	b.n	80096a4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009698:	4804      	ldr	r0, [pc, #16]	; (80096ac <BSP_SD_Init+0x2c>)
 800969a:	f7fb f96b 	bl	8004974 <HAL_SD_Init>
 800969e:	4603      	mov	r3, r0
 80096a0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80096a2:	79fb      	ldrb	r3, [r7, #7]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	200001c0 	.word	0x200001c0

080096b0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	4806      	ldr	r0, [pc, #24]	; (80096e8 <BSP_SD_ReadBlocks+0x38>)
 80096ce:	f7fb fa01 	bl	8004ad4 <HAL_SD_ReadBlocks>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200001c0 	.word	0x200001c0

080096ec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	68f9      	ldr	r1, [r7, #12]
 8009708:	4806      	ldr	r0, [pc, #24]	; (8009724 <BSP_SD_WriteBlocks+0x38>)
 800970a:	f7fb fbc1 	bl	8004e90 <HAL_SD_WriteBlocks>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	200001c0 	.word	0x200001c0

08009728 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800972c:	4805      	ldr	r0, [pc, #20]	; (8009744 <BSP_SD_GetCardState+0x1c>)
 800972e:	f7fb ff05 	bl	800553c <HAL_SD_GetCardState>
 8009732:	4603      	mov	r3, r0
 8009734:	2b04      	cmp	r3, #4
 8009736:	bf14      	ite	ne
 8009738:	2301      	movne	r3, #1
 800973a:	2300      	moveq	r3, #0
 800973c:	b2db      	uxtb	r3, r3
}
 800973e:	4618      	mov	r0, r3
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200001c0 	.word	0x200001c0

08009748 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	4803      	ldr	r0, [pc, #12]	; (8009760 <BSP_SD_GetCardInfo+0x18>)
 8009754:	f7fb fec6 	bl	80054e4 <HAL_SD_GetCardInfo>
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200001c0 	.word	0x200001c0

08009764 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800976a:	2301      	movs	r3, #1
 800976c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800976e:	f000 f80b 	bl	8009788 <BSP_PlatformIsDetected>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009778:	2300      	movs	r3, #0
 800977a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	b2db      	uxtb	r3, r3
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800978e:	2301      	movs	r3, #1
 8009790:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009796:	4806      	ldr	r0, [pc, #24]	; (80097b0 <BSP_PlatformIsDetected+0x28>)
 8009798:	f7f9 f9a6 	bl	8002ae8 <HAL_GPIO_ReadPin>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80097a2:	2300      	movs	r3, #0
 80097a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80097a6:	79fb      	ldrb	r3, [r7, #7]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40020800 	.word	0x40020800

080097b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80097be:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <SD_CheckStatus+0x38>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80097c4:	f7ff ffb0 	bl	8009728 <BSP_SD_GetCardState>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d107      	bne.n	80097de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <SD_CheckStatus+0x38>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b04      	ldr	r3, [pc, #16]	; (80097ec <SD_CheckStatus+0x38>)
 80097dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80097de:	4b03      	ldr	r3, [pc, #12]	; (80097ec <SD_CheckStatus+0x38>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000009 	.word	0x20000009

080097f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <SD_initialize+0x38>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009800:	f7ff ff3e 	bl	8009680 <BSP_SD_Init>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d107      	bne.n	800981a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ffd1 	bl	80097b4 <SD_CheckStatus>
 8009812:	4603      	mov	r3, r0
 8009814:	461a      	mov	r2, r3
 8009816:	4b04      	ldr	r3, [pc, #16]	; (8009828 <SD_initialize+0x38>)
 8009818:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800981a:	4b03      	ldr	r3, [pc, #12]	; (8009828 <SD_initialize+0x38>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b2db      	uxtb	r3, r3
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000009 	.word	0x20000009

0800982c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff ffbb 	bl	80097b4 <SD_CheckStatus>
 800983e:	4603      	mov	r3, r0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	607a      	str	r2, [r7, #4]
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800985c:	f04f 33ff 	mov.w	r3, #4294967295
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	68b8      	ldr	r0, [r7, #8]
 8009866:	f7ff ff23 	bl	80096b0 <BSP_SD_ReadBlocks>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d107      	bne.n	8009880 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009870:	bf00      	nop
 8009872:	f7ff ff59 	bl	8009728 <BSP_SD_GetCardState>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1fa      	bne.n	8009872 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009880:	7dfb      	ldrb	r3, [r7, #23]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800989e:	f04f 33ff 	mov.w	r3, #4294967295
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	68b8      	ldr	r0, [r7, #8]
 80098a8:	f7ff ff20 	bl	80096ec <BSP_SD_WriteBlocks>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d107      	bne.n	80098c2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80098b2:	bf00      	nop
 80098b4:	f7ff ff38 	bl	8009728 <BSP_SD_GetCardState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1fa      	bne.n	80098b4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08c      	sub	sp, #48	; 0x30
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	603a      	str	r2, [r7, #0]
 80098d6:	71fb      	strb	r3, [r7, #7]
 80098d8:	460b      	mov	r3, r1
 80098da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098e2:	4b25      	ldr	r3, [pc, #148]	; (8009978 <SD_ioctl+0xac>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <SD_ioctl+0x28>
 80098f0:	2303      	movs	r3, #3
 80098f2:	e03c      	b.n	800996e <SD_ioctl+0xa2>

  switch (cmd)
 80098f4:	79bb      	ldrb	r3, [r7, #6]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d834      	bhi.n	8009964 <SD_ioctl+0x98>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <SD_ioctl+0x34>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009911 	.word	0x08009911
 8009904:	08009919 	.word	0x08009919
 8009908:	08009931 	.word	0x08009931
 800990c:	0800994b 	.word	0x0800994b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009916:	e028      	b.n	800996a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009918:	f107 030c 	add.w	r3, r7, #12
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff ff13 	bl	8009748 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800992e:	e01c      	b.n	800996a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff ff07 	bl	8009748 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	b29a      	uxth	r2, r3
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009948:	e00f      	b.n	800996a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800994a:	f107 030c 	add.w	r3, r7, #12
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fefa 	bl	8009748 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	0a5a      	lsrs	r2, r3, #9
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009962:	e002      	b.n	800996a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009964:	2304      	movs	r3, #4
 8009966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800996a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800996e:	4618      	mov	r0, r3
 8009970:	3730      	adds	r7, #48	; 0x30
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000009 	.word	0x20000009

0800997c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009988:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800998c:	f002 fc92 	bl	800c2b4 <USBD_static_malloc>
 8009990:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32b0      	adds	r2, #176	; 0xb0
 80099a2:	2100      	movs	r1, #0
 80099a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80099a8:	2302      	movs	r3, #2
 80099aa:	e0d4      	b.n	8009b56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80099ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80099b0:	2100      	movs	r1, #0
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f002 fce6 	bl	800c384 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	32b0      	adds	r2, #176	; 0xb0
 80099c2:	68f9      	ldr	r1, [r7, #12]
 80099c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	32b0      	adds	r2, #176	; 0xb0
 80099d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7c1b      	ldrb	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d138      	bne.n	8009a56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099e4:	4b5e      	ldr	r3, [pc, #376]	; (8009b60 <USBD_CDC_Init+0x1e4>)
 80099e6:	7819      	ldrb	r1, [r3, #0]
 80099e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ec:	2202      	movs	r2, #2
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f002 fb3d 	bl	800c06e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099f4:	4b5a      	ldr	r3, [pc, #360]	; (8009b60 <USBD_CDC_Init+0x1e4>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	f003 020f 	and.w	r2, r3, #15
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	3324      	adds	r3, #36	; 0x24
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a0e:	4b55      	ldr	r3, [pc, #340]	; (8009b64 <USBD_CDC_Init+0x1e8>)
 8009a10:	7819      	ldrb	r1, [r3, #0]
 8009a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a16:	2202      	movs	r2, #2
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f002 fb28 	bl	800c06e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a1e:	4b51      	ldr	r3, [pc, #324]	; (8009b64 <USBD_CDC_Init+0x1e8>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	f003 020f 	and.w	r2, r3, #15
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a36:	2201      	movs	r2, #1
 8009a38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a3a:	4b4b      	ldr	r3, [pc, #300]	; (8009b68 <USBD_CDC_Init+0x1ec>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	f003 020f 	and.w	r2, r3, #15
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	3326      	adds	r3, #38	; 0x26
 8009a50:	2210      	movs	r2, #16
 8009a52:	801a      	strh	r2, [r3, #0]
 8009a54:	e035      	b.n	8009ac2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a56:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <USBD_CDC_Init+0x1e4>)
 8009a58:	7819      	ldrb	r1, [r3, #0]
 8009a5a:	2340      	movs	r3, #64	; 0x40
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f002 fb05 	bl	800c06e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a64:	4b3e      	ldr	r3, [pc, #248]	; (8009b60 <USBD_CDC_Init+0x1e4>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 020f 	and.w	r2, r3, #15
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	3324      	adds	r3, #36	; 0x24
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a7e:	4b39      	ldr	r3, [pc, #228]	; (8009b64 <USBD_CDC_Init+0x1e8>)
 8009a80:	7819      	ldrb	r1, [r3, #0]
 8009a82:	2340      	movs	r3, #64	; 0x40
 8009a84:	2202      	movs	r2, #2
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f002 faf1 	bl	800c06e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a8c:	4b35      	ldr	r3, [pc, #212]	; (8009b64 <USBD_CDC_Init+0x1e8>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 020f 	and.w	r2, r3, #15
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009aa8:	4b2f      	ldr	r3, [pc, #188]	; (8009b68 <USBD_CDC_Init+0x1ec>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 020f 	and.w	r2, r3, #15
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	440b      	add	r3, r1
 8009abc:	3326      	adds	r3, #38	; 0x26
 8009abe:	2210      	movs	r2, #16
 8009ac0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ac2:	4b29      	ldr	r3, [pc, #164]	; (8009b68 <USBD_CDC_Init+0x1ec>)
 8009ac4:	7819      	ldrb	r1, [r3, #0]
 8009ac6:	2308      	movs	r3, #8
 8009ac8:	2203      	movs	r2, #3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f002 facf 	bl	800c06e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009ad0:	4b25      	ldr	r3, [pc, #148]	; (8009b68 <USBD_CDC_Init+0x1ec>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	f003 020f 	and.w	r2, r3, #15
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	3324      	adds	r3, #36	; 0x24
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	33b0      	adds	r3, #176	; 0xb0
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009b20:	2302      	movs	r3, #2
 8009b22:	e018      	b.n	8009b56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7c1b      	ldrb	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <USBD_CDC_Init+0x1e8>)
 8009b2e:	7819      	ldrb	r1, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f002 fb86 	bl	800c24c <USBD_LL_PrepareReceive>
 8009b40:	e008      	b.n	8009b54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b42:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <USBD_CDC_Init+0x1e8>)
 8009b44:	7819      	ldrb	r1, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f002 fb7c 	bl	800c24c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000093 	.word	0x20000093
 8009b64:	20000094 	.word	0x20000094
 8009b68:	20000095 	.word	0x20000095

08009b6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009b78:	4b3a      	ldr	r3, [pc, #232]	; (8009c64 <USBD_CDC_DeInit+0xf8>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f002 fa9b 	bl	800c0ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009b84:	4b37      	ldr	r3, [pc, #220]	; (8009c64 <USBD_CDC_DeInit+0xf8>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	f003 020f 	and.w	r2, r3, #15
 8009b8c:	6879      	ldr	r1, [r7, #4]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	3324      	adds	r3, #36	; 0x24
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b9e:	4b32      	ldr	r3, [pc, #200]	; (8009c68 <USBD_CDC_DeInit+0xfc>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f002 fa88 	bl	800c0ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009baa:	4b2f      	ldr	r3, [pc, #188]	; (8009c68 <USBD_CDC_DeInit+0xfc>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f003 020f 	and.w	r2, r3, #15
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009bc6:	4b29      	ldr	r3, [pc, #164]	; (8009c6c <USBD_CDC_DeInit+0x100>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f002 fa74 	bl	800c0ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009bd2:	4b26      	ldr	r3, [pc, #152]	; (8009c6c <USBD_CDC_DeInit+0x100>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	f003 020f 	and.w	r2, r3, #15
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	440b      	add	r3, r1
 8009be6:	3324      	adds	r3, #36	; 0x24
 8009be8:	2200      	movs	r2, #0
 8009bea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009bec:	4b1f      	ldr	r3, [pc, #124]	; (8009c6c <USBD_CDC_DeInit+0x100>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 020f 	and.w	r2, r3, #15
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	440b      	add	r3, r1
 8009c00:	3326      	adds	r3, #38	; 0x26
 8009c02:	2200      	movs	r2, #0
 8009c04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	32b0      	adds	r2, #176	; 0xb0
 8009c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01f      	beq.n	8009c58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	33b0      	adds	r3, #176	; 0xb0
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	32b0      	adds	r2, #176	; 0xb0
 8009c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f002 fb48 	bl	800c2d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	32b0      	adds	r2, #176	; 0xb0
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000093 	.word	0x20000093
 8009c68:	20000094 	.word	0x20000094
 8009c6c:	20000095 	.word	0x20000095

08009c70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	32b0      	adds	r2, #176	; 0xb0
 8009c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e0bf      	b.n	8009e20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d050      	beq.n	8009d4e <USBD_CDC_Setup+0xde>
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	f040 80af 	bne.w	8009e10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	88db      	ldrh	r3, [r3, #6]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d03a      	beq.n	8009d30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b25b      	sxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da1b      	bge.n	8009cfc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	33b0      	adds	r3, #176	; 0xb0
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009cda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	88d2      	ldrh	r2, [r2, #6]
 8009ce0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b07      	cmp	r3, #7
 8009ce8:	bf28      	it	cs
 8009cea:	2307      	movcs	r3, #7
 8009cec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	89fa      	ldrh	r2, [r7, #14]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fd43 	bl	800b780 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009cfa:	e090      	b.n	8009e1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	785a      	ldrb	r2, [r3, #1]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	88db      	ldrh	r3, [r3, #6]
 8009d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8009d0c:	d803      	bhi.n	8009d16 <USBD_CDC_Setup+0xa6>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	88db      	ldrh	r3, [r3, #6]
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	e000      	b.n	8009d18 <USBD_CDC_Setup+0xa8>
 8009d16:	2240      	movs	r2, #64	; 0x40
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009d1e:	6939      	ldr	r1, [r7, #16]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009d26:	461a      	mov	r2, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 fd55 	bl	800b7d8 <USBD_CtlPrepareRx>
      break;
 8009d2e:	e076      	b.n	8009e1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	33b0      	adds	r3, #176	; 0xb0
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	7850      	ldrb	r0, [r2, #1]
 8009d46:	2200      	movs	r2, #0
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	4798      	blx	r3
      break;
 8009d4c:	e067      	b.n	8009e1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	785b      	ldrb	r3, [r3, #1]
 8009d52:	2b0b      	cmp	r3, #11
 8009d54:	d851      	bhi.n	8009dfa <USBD_CDC_Setup+0x18a>
 8009d56:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <USBD_CDC_Setup+0xec>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d8d 	.word	0x08009d8d
 8009d60:	08009e09 	.word	0x08009e09
 8009d64:	08009dfb 	.word	0x08009dfb
 8009d68:	08009dfb 	.word	0x08009dfb
 8009d6c:	08009dfb 	.word	0x08009dfb
 8009d70:	08009dfb 	.word	0x08009dfb
 8009d74:	08009dfb 	.word	0x08009dfb
 8009d78:	08009dfb 	.word	0x08009dfb
 8009d7c:	08009dfb 	.word	0x08009dfb
 8009d80:	08009dfb 	.word	0x08009dfb
 8009d84:	08009db7 	.word	0x08009db7
 8009d88:	08009de1 	.word	0x08009de1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d107      	bne.n	8009da8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d98:	f107 030a 	add.w	r3, r7, #10
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fced 	bl	800b780 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009da6:	e032      	b.n	8009e0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 fc77 	bl	800b69e <USBD_CtlError>
            ret = USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	75fb      	strb	r3, [r7, #23]
          break;
 8009db4:	e02b      	b.n	8009e0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d107      	bne.n	8009dd2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009dc2:	f107 030d 	add.w	r3, r7, #13
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 fcd8 	bl	800b780 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dd0:	e01d      	b.n	8009e0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 fc62 	bl	800b69e <USBD_CtlError>
            ret = USBD_FAIL;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8009dde:	e016      	b.n	8009e0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d00f      	beq.n	8009e0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 fc55 	bl	800b69e <USBD_CtlError>
            ret = USBD_FAIL;
 8009df4:	2303      	movs	r3, #3
 8009df6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009df8:	e008      	b.n	8009e0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 fc4e 	bl	800b69e <USBD_CtlError>
          ret = USBD_FAIL;
 8009e02:	2303      	movs	r3, #3
 8009e04:	75fb      	strb	r3, [r7, #23]
          break;
 8009e06:	e002      	b.n	8009e0e <USBD_CDC_Setup+0x19e>
          break;
 8009e08:	bf00      	nop
 8009e0a:	e008      	b.n	8009e1e <USBD_CDC_Setup+0x1ae>
          break;
 8009e0c:	bf00      	nop
      }
      break;
 8009e0e:	e006      	b.n	8009e1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 fc43 	bl	800b69e <USBD_CtlError>
      ret = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	32b0      	adds	r2, #176	; 0xb0
 8009e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	e065      	b.n	8009f1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	32b0      	adds	r2, #176	; 0xb0
 8009e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	f003 020f 	and.w	r2, r3, #15
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	440b      	add	r3, r1
 8009e74:	3318      	adds	r3, #24
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d02f      	beq.n	8009edc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	f003 020f 	and.w	r2, r3, #15
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3318      	adds	r3, #24
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	f003 010f 	and.w	r1, r3, #15
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	440b      	add	r3, r1
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4403      	add	r3, r0
 8009ea4:	3348      	adds	r3, #72	; 0x48
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009eac:	fb01 f303 	mul.w	r3, r1, r3
 8009eb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d112      	bne.n	8009edc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	f003 020f 	and.w	r2, r3, #15
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	3318      	adds	r3, #24
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ece:	78f9      	ldrb	r1, [r7, #3]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f002 f998 	bl	800c20a <USBD_LL_Transmit>
 8009eda:	e01f      	b.n	8009f1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	33b0      	adds	r3, #176	; 0xb0
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	33b0      	adds	r3, #176	; 0xb0
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f18:	78fa      	ldrb	r2, [r7, #3]
 8009f1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	32b0      	adds	r2, #176	; 0xb0
 8009f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	32b0      	adds	r2, #176	; 0xb0
 8009f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e01a      	b.n	8009f8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f002 f996 	bl	800c28e <USBD_LL_GetRxDataSize>
 8009f62:	4602      	mov	r2, r0
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	33b0      	adds	r3, #176	; 0xb0
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	32b0      	adds	r2, #176	; 0xb0
 8009fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e025      	b.n	800a004 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	33b0      	adds	r3, #176	; 0xb0
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01a      	beq.n	800a002 <USBD_CDC_EP0_RxReady+0x6c>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009fd2:	2bff      	cmp	r3, #255	; 0xff
 8009fd4:	d015      	beq.n	800a002 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	33b0      	adds	r3, #176	; 0xb0
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009fee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ff6:	b292      	uxth	r2, r2
 8009ff8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a014:	2182      	movs	r1, #130	; 0x82
 800a016:	4818      	ldr	r0, [pc, #96]	; (800a078 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a018:	f000 fd09 	bl	800aa2e <USBD_GetEpDesc>
 800a01c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a01e:	2101      	movs	r1, #1
 800a020:	4815      	ldr	r0, [pc, #84]	; (800a078 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a022:	f000 fd04 	bl	800aa2e <USBD_GetEpDesc>
 800a026:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a028:	2181      	movs	r1, #129	; 0x81
 800a02a:	4813      	ldr	r0, [pc, #76]	; (800a078 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a02c:	f000 fcff 	bl	800aa2e <USBD_GetEpDesc>
 800a030:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2210      	movs	r2, #16
 800a03c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d006      	beq.n	800a052 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2200      	movs	r2, #0
 800a048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a04c:	711a      	strb	r2, [r3, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d006      	beq.n	800a066 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a060:	711a      	strb	r2, [r3, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2243      	movs	r2, #67	; 0x43
 800a06a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a06c:	4b02      	ldr	r3, [pc, #8]	; (800a078 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20000050 	.word	0x20000050

0800a07c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a084:	2182      	movs	r1, #130	; 0x82
 800a086:	4818      	ldr	r0, [pc, #96]	; (800a0e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a088:	f000 fcd1 	bl	800aa2e <USBD_GetEpDesc>
 800a08c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a08e:	2101      	movs	r1, #1
 800a090:	4815      	ldr	r0, [pc, #84]	; (800a0e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a092:	f000 fccc 	bl	800aa2e <USBD_GetEpDesc>
 800a096:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a098:	2181      	movs	r1, #129	; 0x81
 800a09a:	4813      	ldr	r0, [pc, #76]	; (800a0e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a09c:	f000 fcc7 	bl	800aa2e <USBD_GetEpDesc>
 800a0a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2210      	movs	r2, #16
 800a0ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d006      	beq.n	800a0c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	711a      	strb	r2, [r3, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f042 0202 	orr.w	r2, r2, #2
 800a0c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	711a      	strb	r2, [r3, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f042 0202 	orr.w	r2, r2, #2
 800a0d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2243      	movs	r2, #67	; 0x43
 800a0da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0dc:	4b02      	ldr	r3, [pc, #8]	; (800a0e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000050 	.word	0x20000050

0800a0ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0f4:	2182      	movs	r1, #130	; 0x82
 800a0f6:	4818      	ldr	r0, [pc, #96]	; (800a158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0f8:	f000 fc99 	bl	800aa2e <USBD_GetEpDesc>
 800a0fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0fe:	2101      	movs	r1, #1
 800a100:	4815      	ldr	r0, [pc, #84]	; (800a158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a102:	f000 fc94 	bl	800aa2e <USBD_GetEpDesc>
 800a106:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a108:	2181      	movs	r1, #129	; 0x81
 800a10a:	4813      	ldr	r0, [pc, #76]	; (800a158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a10c:	f000 fc8f 	bl	800aa2e <USBD_GetEpDesc>
 800a110:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2210      	movs	r2, #16
 800a11c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d006      	beq.n	800a132 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2200      	movs	r2, #0
 800a128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a12c:	711a      	strb	r2, [r3, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a140:	711a      	strb	r2, [r3, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2243      	movs	r2, #67	; 0x43
 800a14a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a14c:	4b02      	ldr	r3, [pc, #8]	; (800a158 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000050 	.word	0x20000050

0800a15c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	220a      	movs	r2, #10
 800a168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	2000000c 	.word	0x2000000c

0800a17c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e009      	b.n	800a1a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	33b0      	adds	r3, #176	; 0xb0
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	32b0      	adds	r2, #176	; 0xb0
 800a1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e008      	b.n	800a1e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	32b0      	adds	r2, #176	; 0xb0
 800a208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a214:	2303      	movs	r3, #3
 800a216:	e004      	b.n	800a222 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
	...

0800a230 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32b0      	adds	r2, #176	; 0xb0
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32b0      	adds	r2, #176	; 0xb0
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e018      	b.n	800a290 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7c1b      	ldrb	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a266:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <USBD_CDC_ReceivePacket+0x68>)
 800a268:	7819      	ldrb	r1, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a270:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 ffe9 	bl	800c24c <USBD_LL_PrepareReceive>
 800a27a:	e008      	b.n	800a28e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a27c:	4b06      	ldr	r3, [pc, #24]	; (800a298 <USBD_CDC_ReceivePacket+0x68>)
 800a27e:	7819      	ldrb	r1, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a286:	2340      	movs	r3, #64	; 0x40
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 ffdf 	bl	800c24c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20000094 	.word	0x20000094

0800a29c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e01f      	b.n	800a2f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	79fa      	ldrb	r2, [r7, #7]
 800a2e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f001 fe59 	bl	800bfa0 <USBD_LL_Init>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a310:	2303      	movs	r3, #3
 800a312:	e025      	b.n	800a360 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	32ae      	adds	r2, #174	; 0xae
 800a326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00f      	beq.n	800a350 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32ae      	adds	r2, #174	; 0xae
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	f107 020e 	add.w	r2, r7, #14
 800a344:	4610      	mov	r0, r2
 800a346:	4798      	blx	r3
 800a348:	4602      	mov	r2, r0
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fe61 	bl	800c038 <USBD_LL_Start>
 800a376:	4603      	mov	r3, r0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a388:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d009      	beq.n	800a3c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f001 f908 	bl	800b62a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a428:	461a      	mov	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a436:	f003 031f 	and.w	r3, r3, #31
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d01a      	beq.n	800a474 <USBD_LL_SetupStage+0x72>
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d822      	bhi.n	800a488 <USBD_LL_SetupStage+0x86>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <USBD_LL_SetupStage+0x4a>
 800a446:	2b01      	cmp	r3, #1
 800a448:	d00a      	beq.n	800a460 <USBD_LL_SetupStage+0x5e>
 800a44a:	e01d      	b.n	800a488 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fb5f 	bl	800ab18 <USBD_StdDevReq>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]
      break;
 800a45e:	e020      	b.n	800a4a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fbc7 	bl	800abfc <USBD_StdItfReq>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]
      break;
 800a472:	e016      	b.n	800a4a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fc29 	bl	800acd4 <USBD_StdEPReq>
 800a482:	4603      	mov	r3, r0
 800a484:	73fb      	strb	r3, [r7, #15]
      break;
 800a486:	e00c      	b.n	800a4a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a48e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a492:	b2db      	uxtb	r3, r3
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 fe2e 	bl	800c0f8 <USBD_LL_StallEP>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a0:	bf00      	nop
  }

  return ret;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a4be:	7afb      	ldrb	r3, [r7, #11]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d16e      	bne.n	800a5a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	f040 8098 	bne.w	800a608 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d913      	bls.n	800a50c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	1ad2      	subs	r2, r2, r3
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	bf28      	it	cs
 800a4fe:	4613      	movcs	r3, r2
 800a500:	461a      	mov	r2, r3
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f001 f984 	bl	800b812 <USBD_CtlContinueRx>
 800a50a:	e07d      	b.n	800a608 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a512:	f003 031f 	and.w	r3, r3, #31
 800a516:	2b02      	cmp	r3, #2
 800a518:	d014      	beq.n	800a544 <USBD_LL_DataOutStage+0x98>
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d81d      	bhi.n	800a55a <USBD_LL_DataOutStage+0xae>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <USBD_LL_DataOutStage+0x7c>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d003      	beq.n	800a52e <USBD_LL_DataOutStage+0x82>
 800a526:	e018      	b.n	800a55a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	75bb      	strb	r3, [r7, #22]
            break;
 800a52c:	e018      	b.n	800a560 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a534:	b2db      	uxtb	r3, r3
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 fa5e 	bl	800a9fa <USBD_CoreFindIF>
 800a53e:	4603      	mov	r3, r0
 800a540:	75bb      	strb	r3, [r7, #22]
            break;
 800a542:	e00d      	b.n	800a560 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	4619      	mov	r1, r3
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fa60 	bl	800aa14 <USBD_CoreFindEP>
 800a554:	4603      	mov	r3, r0
 800a556:	75bb      	strb	r3, [r7, #22]
            break;
 800a558:	e002      	b.n	800a560 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	75bb      	strb	r3, [r7, #22]
            break;
 800a55e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a560:	7dbb      	ldrb	r3, [r7, #22]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d119      	bne.n	800a59a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d113      	bne.n	800a59a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a572:	7dba      	ldrb	r2, [r7, #22]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	32ae      	adds	r2, #174	; 0xae
 800a578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00b      	beq.n	800a59a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a582:	7dba      	ldrb	r2, [r7, #22]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a58a:	7dba      	ldrb	r2, [r7, #22]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	32ae      	adds	r2, #174	; 0xae
 800a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f001 f94a 	bl	800b834 <USBD_CtlSendStatus>
 800a5a0:	e032      	b.n	800a608 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fa31 	bl	800aa14 <USBD_CoreFindEP>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5b6:	7dbb      	ldrb	r3, [r7, #22]
 800a5b8:	2bff      	cmp	r3, #255	; 0xff
 800a5ba:	d025      	beq.n	800a608 <USBD_LL_DataOutStage+0x15c>
 800a5bc:	7dbb      	ldrb	r3, [r7, #22]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d122      	bne.n	800a608 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d117      	bne.n	800a5fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5ce:	7dba      	ldrb	r2, [r7, #22]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	32ae      	adds	r2, #174	; 0xae
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00f      	beq.n	800a5fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a5de:	7dba      	ldrb	r2, [r7, #22]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a5e6:	7dba      	ldrb	r2, [r7, #22]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	32ae      	adds	r2, #174	; 0xae
 800a5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	7afa      	ldrb	r2, [r7, #11]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	4798      	blx	r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	e000      	b.n	800a60a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b086      	sub	sp, #24
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	460b      	mov	r3, r1
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a620:	7afb      	ldrb	r3, [r7, #11]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d16f      	bne.n	800a706 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3314      	adds	r3, #20
 800a62a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a632:	2b02      	cmp	r3, #2
 800a634:	d15a      	bne.n	800a6ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	689a      	ldr	r2, [r3, #8]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d914      	bls.n	800a66c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	1ad2      	subs	r2, r2, r3
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	461a      	mov	r2, r3
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f001 f8ac 	bl	800b7b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65e:	2300      	movs	r3, #0
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f001 fdf1 	bl	800c24c <USBD_LL_PrepareReceive>
 800a66a:	e03f      	b.n	800a6ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	429a      	cmp	r2, r3
 800a676:	d11c      	bne.n	800a6b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a680:	429a      	cmp	r2, r3
 800a682:	d316      	bcc.n	800a6b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a68e:	429a      	cmp	r2, r3
 800a690:	d20f      	bcs.n	800a6b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a692:	2200      	movs	r2, #0
 800a694:	2100      	movs	r1, #0
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f001 f88d 	bl	800b7b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f001 fdce 	bl	800c24c <USBD_LL_PrepareReceive>
 800a6b0:	e01c      	b.n	800a6ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d10f      	bne.n	800a6de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6de:	2180      	movs	r1, #128	; 0x80
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f001 fd09 	bl	800c0f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f001 f8b7 	bl	800b85a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d03a      	beq.n	800a76c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fe42 	bl	800a380 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a704:	e032      	b.n	800a76c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a706:	7afb      	ldrb	r3, [r7, #11]
 800a708:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4619      	mov	r1, r3
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f97f 	bl	800aa14 <USBD_CoreFindEP>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2bff      	cmp	r3, #255	; 0xff
 800a71e:	d025      	beq.n	800a76c <USBD_LL_DataInStage+0x15a>
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d122      	bne.n	800a76c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d11c      	bne.n	800a76c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a732:	7dfa      	ldrb	r2, [r7, #23]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	32ae      	adds	r2, #174	; 0xae
 800a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d014      	beq.n	800a76c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a742:	7dfa      	ldrb	r2, [r7, #23]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a74a:	7dfa      	ldrb	r2, [r7, #23]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	32ae      	adds	r2, #174	; 0xae
 800a750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	7afa      	ldrb	r2, [r7, #11]
 800a758:	4611      	mov	r1, r2
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a762:	7dbb      	ldrb	r3, [r7, #22]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a768:	7dbb      	ldrb	r3, [r7, #22]
 800a76a:	e000      	b.n	800a76e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d014      	beq.n	800a7dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00e      	beq.n	800a7dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	6852      	ldr	r2, [r2, #4]
 800a7ca:	b2d2      	uxtb	r2, r2
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	4798      	blx	r3
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7dc:	2340      	movs	r3, #64	; 0x40
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 fc43 	bl	800c06e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2240      	movs	r2, #64	; 0x40
 800a7f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7f8:	2340      	movs	r3, #64	; 0x40
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2180      	movs	r1, #128	; 0x80
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fc35 	bl	800c06e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2240      	movs	r2, #64	; 0x40
 800a80e:	621a      	str	r2, [r3, #32]

  return ret;
 800a810:	7bfb      	ldrb	r3, [r7, #15]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2204      	movs	r2, #4
 800a854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b04      	cmp	r3, #4
 800a878:	d106      	bne.n	800a888 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a880:	b2da      	uxtb	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d110      	bne.n	800a8cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00b      	beq.n	800a8cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	32ae      	adds	r2, #174	; 0xae
 800a8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e01c      	b.n	800a932 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b03      	cmp	r3, #3
 800a902:	d115      	bne.n	800a930 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32ae      	adds	r2, #174	; 0xae
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	32ae      	adds	r2, #174	; 0xae
 800a922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	78fa      	ldrb	r2, [r7, #3]
 800a92a:	4611      	mov	r1, r2
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	32ae      	adds	r2, #174	; 0xae
 800a950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	e01c      	b.n	800a996 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b03      	cmp	r3, #3
 800a966:	d115      	bne.n	800a994 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	32ae      	adds	r2, #174	; 0xae
 800a972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32ae      	adds	r2, #174	; 0xae
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	78fa      	ldrb	r2, [r7, #3]
 800a98e:	4611      	mov	r1, r2
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00e      	beq.n	800a9f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6852      	ldr	r2, [r2, #4]
 800a9de:	b2d2      	uxtb	r2, r2
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b086      	sub	sp, #24
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d920      	bls.n	800aa98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa5e:	e013      	b.n	800aa88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa60:	f107 030a 	add.w	r3, r7, #10
 800aa64:	4619      	mov	r1, r3
 800aa66:	6978      	ldr	r0, [r7, #20]
 800aa68:	f000 f81b 	bl	800aaa2 <USBD_GetNextDesc>
 800aa6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	785b      	ldrb	r3, [r3, #1]
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	d108      	bne.n	800aa88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	789b      	ldrb	r3, [r3, #2]
 800aa7e:	78fa      	ldrb	r2, [r7, #3]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d008      	beq.n	800aa96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa84:	2300      	movs	r3, #0
 800aa86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	885b      	ldrh	r3, [r3, #2]
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	897b      	ldrh	r3, [r7, #10]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d8e5      	bhi.n	800aa60 <USBD_GetEpDesc+0x32>
 800aa94:	e000      	b.n	800aa98 <USBD_GetEpDesc+0x6a>
          break;
 800aa96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa98:	693b      	ldr	r3, [r7, #16]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	881a      	ldrh	r2, [r3, #0]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	4413      	add	r3, r2
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4413      	add	r3, r2
 800aacc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aace:	68fb      	ldr	r3, [r7, #12]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aafa:	8a3b      	ldrh	r3, [r7, #16]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	b21a      	sxth	r2, r3
 800ab00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	b21b      	sxth	r3, r3
 800ab08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab0a:	89fb      	ldrh	r3, [r7, #14]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	d005      	beq.n	800ab3e <USBD_StdDevReq+0x26>
 800ab32:	2b40      	cmp	r3, #64	; 0x40
 800ab34:	d857      	bhi.n	800abe6 <USBD_StdDevReq+0xce>
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00f      	beq.n	800ab5a <USBD_StdDevReq+0x42>
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d153      	bne.n	800abe6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	32ae      	adds	r2, #174	; 0xae
 800ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	e04a      	b.n	800abf0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	2b09      	cmp	r3, #9
 800ab60:	d83b      	bhi.n	800abda <USBD_StdDevReq+0xc2>
 800ab62:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <USBD_StdDevReq+0x50>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800abbd 	.word	0x0800abbd
 800ab6c:	0800abd1 	.word	0x0800abd1
 800ab70:	0800abdb 	.word	0x0800abdb
 800ab74:	0800abc7 	.word	0x0800abc7
 800ab78:	0800abdb 	.word	0x0800abdb
 800ab7c:	0800ab9b 	.word	0x0800ab9b
 800ab80:	0800ab91 	.word	0x0800ab91
 800ab84:	0800abdb 	.word	0x0800abdb
 800ab88:	0800abb3 	.word	0x0800abb3
 800ab8c:	0800aba5 	.word	0x0800aba5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fa3c 	bl	800b010 <USBD_GetDescriptor>
          break;
 800ab98:	e024      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fba1 	bl	800b2e4 <USBD_SetAddress>
          break;
 800aba2:	e01f      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fbe0 	bl	800b36c <USBD_SetConfig>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]
          break;
 800abb0:	e018      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fc83 	bl	800b4c0 <USBD_GetConfig>
          break;
 800abba:	e013      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fcb4 	bl	800b52c <USBD_GetStatus>
          break;
 800abc4:	e00e      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fce3 	bl	800b594 <USBD_SetFeature>
          break;
 800abce:	e009      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fd07 	bl	800b5e6 <USBD_ClrFeature>
          break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fd5e 	bl	800b69e <USBD_CtlError>
          break;
 800abe2:	bf00      	nop
      }
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fd58 	bl	800b69e <USBD_CtlError>
      break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop

0800abfc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac12:	2b40      	cmp	r3, #64	; 0x40
 800ac14:	d005      	beq.n	800ac22 <USBD_StdItfReq+0x26>
 800ac16:	2b40      	cmp	r3, #64	; 0x40
 800ac18:	d852      	bhi.n	800acc0 <USBD_StdItfReq+0xc4>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <USBD_StdItfReq+0x26>
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d14e      	bne.n	800acc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d840      	bhi.n	800acb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	889b      	ldrh	r3, [r3, #4]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d836      	bhi.n	800aca8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	889b      	ldrh	r3, [r3, #4]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fed9 	bl	800a9fa <USBD_CoreFindIF>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2bff      	cmp	r3, #255	; 0xff
 800ac50:	d01d      	beq.n	800ac8e <USBD_StdItfReq+0x92>
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11a      	bne.n	800ac8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac58:	7bba      	ldrb	r2, [r7, #14]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	32ae      	adds	r2, #174	; 0xae
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00f      	beq.n	800ac88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac68:	7bba      	ldrb	r2, [r7, #14]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac70:	7bba      	ldrb	r2, [r7, #14]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	32ae      	adds	r2, #174	; 0xae
 800ac76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac86:	e004      	b.n	800ac92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac8c:	e001      	b.n	800ac92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	88db      	ldrh	r3, [r3, #6]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d110      	bne.n	800acbc <USBD_StdItfReq+0xc0>
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10d      	bne.n	800acbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fdc7 	bl	800b834 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aca6:	e009      	b.n	800acbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fcf7 	bl	800b69e <USBD_CtlError>
          break;
 800acb0:	e004      	b.n	800acbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fcf2 	bl	800b69e <USBD_CtlError>
          break;
 800acba:	e000      	b.n	800acbe <USBD_StdItfReq+0xc2>
          break;
 800acbc:	bf00      	nop
      }
      break;
 800acbe:	e004      	b.n	800acca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fceb 	bl	800b69e <USBD_CtlError>
      break;
 800acc8:	bf00      	nop
  }

  return ret;
 800acca:	7bfb      	ldrb	r3, [r7, #15]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	889b      	ldrh	r3, [r3, #4]
 800ace6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acf0:	2b40      	cmp	r3, #64	; 0x40
 800acf2:	d007      	beq.n	800ad04 <USBD_StdEPReq+0x30>
 800acf4:	2b40      	cmp	r3, #64	; 0x40
 800acf6:	f200 817f 	bhi.w	800aff8 <USBD_StdEPReq+0x324>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d02a      	beq.n	800ad54 <USBD_StdEPReq+0x80>
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	f040 817a 	bne.w	800aff8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff fe83 	bl	800aa14 <USBD_CoreFindEP>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad12:	7b7b      	ldrb	r3, [r7, #13]
 800ad14:	2bff      	cmp	r3, #255	; 0xff
 800ad16:	f000 8174 	beq.w	800b002 <USBD_StdEPReq+0x32e>
 800ad1a:	7b7b      	ldrb	r3, [r7, #13]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f040 8170 	bne.w	800b002 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad22:	7b7a      	ldrb	r2, [r7, #13]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad2a:	7b7a      	ldrb	r2, [r7, #13]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	32ae      	adds	r2, #174	; 0xae
 800ad30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 8163 	beq.w	800b002 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad3c:	7b7a      	ldrb	r2, [r7, #13]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	32ae      	adds	r2, #174	; 0xae
 800ad42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad52:	e156      	b.n	800b002 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	785b      	ldrb	r3, [r3, #1]
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d008      	beq.n	800ad6e <USBD_StdEPReq+0x9a>
 800ad5c:	2b03      	cmp	r3, #3
 800ad5e:	f300 8145 	bgt.w	800afec <USBD_StdEPReq+0x318>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 809b 	beq.w	800ae9e <USBD_StdEPReq+0x1ca>
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d03c      	beq.n	800ade6 <USBD_StdEPReq+0x112>
 800ad6c:	e13e      	b.n	800afec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d002      	beq.n	800ad80 <USBD_StdEPReq+0xac>
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d016      	beq.n	800adac <USBD_StdEPReq+0xd8>
 800ad7e:	e02c      	b.n	800adda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00d      	beq.n	800ada2 <USBD_StdEPReq+0xce>
 800ad86:	7bbb      	ldrb	r3, [r7, #14]
 800ad88:	2b80      	cmp	r3, #128	; 0x80
 800ad8a:	d00a      	beq.n	800ada2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 f9b1 	bl	800c0f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad96:	2180      	movs	r1, #128	; 0x80
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f001 f9ad 	bl	800c0f8 <USBD_LL_StallEP>
 800ad9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ada0:	e020      	b.n	800ade4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fc7a 	bl	800b69e <USBD_CtlError>
              break;
 800adaa:	e01b      	b.n	800ade4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	885b      	ldrh	r3, [r3, #2]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10e      	bne.n	800add2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <USBD_StdEPReq+0xfe>
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	2b80      	cmp	r3, #128	; 0x80
 800adbe:	d008      	beq.n	800add2 <USBD_StdEPReq+0xfe>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	88db      	ldrh	r3, [r3, #6]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 f993 	bl	800c0f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fd2e 	bl	800b834 <USBD_CtlSendStatus>

              break;
 800add8:	e004      	b.n	800ade4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fc5e 	bl	800b69e <USBD_CtlError>
              break;
 800ade2:	bf00      	nop
          }
          break;
 800ade4:	e107      	b.n	800aff6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d002      	beq.n	800adf8 <USBD_StdEPReq+0x124>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d016      	beq.n	800ae24 <USBD_StdEPReq+0x150>
 800adf6:	e04b      	b.n	800ae90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00d      	beq.n	800ae1a <USBD_StdEPReq+0x146>
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	2b80      	cmp	r3, #128	; 0x80
 800ae02:	d00a      	beq.n	800ae1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 f975 	bl	800c0f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae0e:	2180      	movs	r1, #128	; 0x80
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 f971 	bl	800c0f8 <USBD_LL_StallEP>
 800ae16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae18:	e040      	b.n	800ae9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fc3e 	bl	800b69e <USBD_CtlError>
              break;
 800ae22:	e03b      	b.n	800ae9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	885b      	ldrh	r3, [r3, #2]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d136      	bne.n	800ae9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 f97b 	bl	800c136 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fcf7 	bl	800b834 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff fde2 	bl	800aa14 <USBD_CoreFindEP>
 800ae50:	4603      	mov	r3, r0
 800ae52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae54:	7b7b      	ldrb	r3, [r7, #13]
 800ae56:	2bff      	cmp	r3, #255	; 0xff
 800ae58:	d01f      	beq.n	800ae9a <USBD_StdEPReq+0x1c6>
 800ae5a:	7b7b      	ldrb	r3, [r7, #13]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d11c      	bne.n	800ae9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae60:	7b7a      	ldrb	r2, [r7, #13]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae68:	7b7a      	ldrb	r2, [r7, #13]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	32ae      	adds	r2, #174	; 0xae
 800ae6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d010      	beq.n	800ae9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae78:	7b7a      	ldrb	r2, [r7, #13]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	32ae      	adds	r2, #174	; 0xae
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae8e:	e004      	b.n	800ae9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fc03 	bl	800b69e <USBD_CtlError>
              break;
 800ae98:	e000      	b.n	800ae9c <USBD_StdEPReq+0x1c8>
              break;
 800ae9a:	bf00      	nop
          }
          break;
 800ae9c:	e0ab      	b.n	800aff6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d002      	beq.n	800aeb0 <USBD_StdEPReq+0x1dc>
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d032      	beq.n	800af14 <USBD_StdEPReq+0x240>
 800aeae:	e097      	b.n	800afe0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <USBD_StdEPReq+0x1f2>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	2b80      	cmp	r3, #128	; 0x80
 800aeba:	d004      	beq.n	800aec6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fbed 	bl	800b69e <USBD_CtlError>
                break;
 800aec4:	e091      	b.n	800afea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	da0b      	bge.n	800aee6 <USBD_StdEPReq+0x212>
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	3310      	adds	r3, #16
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	4413      	add	r3, r2
 800aee2:	3304      	adds	r3, #4
 800aee4:	e00b      	b.n	800aefe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeec:	4613      	mov	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	4413      	add	r3, r2
 800aefc:	3304      	adds	r3, #4
 800aefe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2200      	movs	r2, #0
 800af04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2202      	movs	r2, #2
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fc37 	bl	800b780 <USBD_CtlSendData>
              break;
 800af12:	e06a      	b.n	800afea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	da11      	bge.n	800af40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	f003 020f 	and.w	r2, r3, #15
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	4613      	mov	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	440b      	add	r3, r1
 800af2e:	3324      	adds	r3, #36	; 0x24
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d117      	bne.n	800af66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fbb0 	bl	800b69e <USBD_CtlError>
                  break;
 800af3e:	e054      	b.n	800afea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	f003 020f 	and.w	r2, r3, #15
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d104      	bne.n	800af66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fb9d 	bl	800b69e <USBD_CtlError>
                  break;
 800af64:	e041      	b.n	800afea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da0b      	bge.n	800af86 <USBD_StdEPReq+0x2b2>
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	3310      	adds	r3, #16
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	4413      	add	r3, r2
 800af82:	3304      	adds	r3, #4
 800af84:	e00b      	b.n	800af9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af86:	7bbb      	ldrb	r3, [r7, #14]
 800af88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	4413      	add	r3, r2
 800af9c:	3304      	adds	r3, #4
 800af9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <USBD_StdEPReq+0x2d8>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b80      	cmp	r3, #128	; 0x80
 800afaa:	d103      	bne.n	800afb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2200      	movs	r2, #0
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	e00e      	b.n	800afd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f8db 	bl	800c174 <USBD_LL_IsStallEP>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d003      	beq.n	800afcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2201      	movs	r2, #1
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	e002      	b.n	800afd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2202      	movs	r2, #2
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fbd1 	bl	800b780 <USBD_CtlSendData>
              break;
 800afde:	e004      	b.n	800afea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb5b 	bl	800b69e <USBD_CtlError>
              break;
 800afe8:	bf00      	nop
          }
          break;
 800afea:	e004      	b.n	800aff6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fb55 	bl	800b69e <USBD_CtlError>
          break;
 800aff4:	bf00      	nop
      }
      break;
 800aff6:	e005      	b.n	800b004 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fb4f 	bl	800b69e <USBD_CtlError>
      break;
 800b000:	e000      	b.n	800b004 <USBD_StdEPReq+0x330>
      break;
 800b002:	bf00      	nop
  }

  return ret;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
	...

0800b010 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b01a:	2300      	movs	r3, #0
 800b01c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	885b      	ldrh	r3, [r3, #2]
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	3b01      	subs	r3, #1
 800b030:	2b06      	cmp	r3, #6
 800b032:	f200 8128 	bhi.w	800b286 <USBD_GetDescriptor+0x276>
 800b036:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <USBD_GetDescriptor+0x2c>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b059 	.word	0x0800b059
 800b040:	0800b071 	.word	0x0800b071
 800b044:	0800b0b1 	.word	0x0800b0b1
 800b048:	0800b287 	.word	0x0800b287
 800b04c:	0800b287 	.word	0x0800b287
 800b050:	0800b227 	.word	0x0800b227
 800b054:	0800b253 	.word	0x0800b253
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	7c12      	ldrb	r2, [r2, #16]
 800b064:	f107 0108 	add.w	r1, r7, #8
 800b068:	4610      	mov	r0, r2
 800b06a:	4798      	blx	r3
 800b06c:	60f8      	str	r0, [r7, #12]
      break;
 800b06e:	e112      	b.n	800b296 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	7c1b      	ldrb	r3, [r3, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10d      	bne.n	800b094 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	f107 0208 	add.w	r2, r7, #8
 800b084:	4610      	mov	r0, r2
 800b086:	4798      	blx	r3
 800b088:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3301      	adds	r3, #1
 800b08e:	2202      	movs	r2, #2
 800b090:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b092:	e100      	b.n	800b296 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	f107 0208 	add.w	r2, r7, #8
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4798      	blx	r3
 800b0a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	701a      	strb	r2, [r3, #0]
      break;
 800b0ae:	e0f2      	b.n	800b296 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	885b      	ldrh	r3, [r3, #2]
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	f200 80ac 	bhi.w	800b214 <USBD_GetDescriptor+0x204>
 800b0bc:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <USBD_GetDescriptor+0xb4>)
 800b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c2:	bf00      	nop
 800b0c4:	0800b0dd 	.word	0x0800b0dd
 800b0c8:	0800b111 	.word	0x0800b111
 800b0cc:	0800b145 	.word	0x0800b145
 800b0d0:	0800b179 	.word	0x0800b179
 800b0d4:	0800b1ad 	.word	0x0800b1ad
 800b0d8:	0800b1e1 	.word	0x0800b1e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	7c12      	ldrb	r2, [r2, #16]
 800b0f4:	f107 0108 	add.w	r1, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0fe:	e091      	b.n	800b224 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 facb 	bl	800b69e <USBD_CtlError>
            err++;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	3301      	adds	r3, #1
 800b10c:	72fb      	strb	r3, [r7, #11]
          break;
 800b10e:	e089      	b.n	800b224 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	7c12      	ldrb	r2, [r2, #16]
 800b128:	f107 0108 	add.w	r1, r7, #8
 800b12c:	4610      	mov	r0, r2
 800b12e:	4798      	blx	r3
 800b130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b132:	e077      	b.n	800b224 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fab1 	bl	800b69e <USBD_CtlError>
            err++;
 800b13c:	7afb      	ldrb	r3, [r7, #11]
 800b13e:	3301      	adds	r3, #1
 800b140:	72fb      	strb	r3, [r7, #11]
          break;
 800b142:	e06f      	b.n	800b224 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00b      	beq.n	800b168 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	7c12      	ldrb	r2, [r2, #16]
 800b15c:	f107 0108 	add.w	r1, r7, #8
 800b160:	4610      	mov	r0, r2
 800b162:	4798      	blx	r3
 800b164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b166:	e05d      	b.n	800b224 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fa97 	bl	800b69e <USBD_CtlError>
            err++;
 800b170:	7afb      	ldrb	r3, [r7, #11]
 800b172:	3301      	adds	r3, #1
 800b174:	72fb      	strb	r3, [r7, #11]
          break;
 800b176:	e055      	b.n	800b224 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7c12      	ldrb	r2, [r2, #16]
 800b190:	f107 0108 	add.w	r1, r7, #8
 800b194:	4610      	mov	r0, r2
 800b196:	4798      	blx	r3
 800b198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b19a:	e043      	b.n	800b224 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa7d 	bl	800b69e <USBD_CtlError>
            err++;
 800b1a4:	7afb      	ldrb	r3, [r7, #11]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1aa:	e03b      	b.n	800b224 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00b      	beq.n	800b1d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	7c12      	ldrb	r2, [r2, #16]
 800b1c4:	f107 0108 	add.w	r1, r7, #8
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ce:	e029      	b.n	800b224 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fa63 	bl	800b69e <USBD_CtlError>
            err++;
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1de:	e021      	b.n	800b224 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00b      	beq.n	800b204 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	7c12      	ldrb	r2, [r2, #16]
 800b1f8:	f107 0108 	add.w	r1, r7, #8
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4798      	blx	r3
 800b200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b202:	e00f      	b.n	800b224 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa49 	bl	800b69e <USBD_CtlError>
            err++;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	3301      	adds	r3, #1
 800b210:	72fb      	strb	r3, [r7, #11]
          break;
 800b212:	e007      	b.n	800b224 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fa41 	bl	800b69e <USBD_CtlError>
          err++;
 800b21c:	7afb      	ldrb	r3, [r7, #11]
 800b21e:	3301      	adds	r3, #1
 800b220:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b222:	bf00      	nop
      }
      break;
 800b224:	e037      	b.n	800b296 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	7c1b      	ldrb	r3, [r3, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d109      	bne.n	800b242 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b236:	f107 0208 	add.w	r2, r7, #8
 800b23a:	4610      	mov	r0, r2
 800b23c:	4798      	blx	r3
 800b23e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b240:	e029      	b.n	800b296 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fa2a 	bl	800b69e <USBD_CtlError>
        err++;
 800b24a:	7afb      	ldrb	r3, [r7, #11]
 800b24c:	3301      	adds	r3, #1
 800b24e:	72fb      	strb	r3, [r7, #11]
      break;
 800b250:	e021      	b.n	800b296 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	7c1b      	ldrb	r3, [r3, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10d      	bne.n	800b276 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	f107 0208 	add.w	r2, r7, #8
 800b266:	4610      	mov	r0, r2
 800b268:	4798      	blx	r3
 800b26a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	2207      	movs	r2, #7
 800b272:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b274:	e00f      	b.n	800b296 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fa10 	bl	800b69e <USBD_CtlError>
        err++;
 800b27e:	7afb      	ldrb	r3, [r7, #11]
 800b280:	3301      	adds	r3, #1
 800b282:	72fb      	strb	r3, [r7, #11]
      break;
 800b284:	e007      	b.n	800b296 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fa08 	bl	800b69e <USBD_CtlError>
      err++;
 800b28e:	7afb      	ldrb	r3, [r7, #11]
 800b290:	3301      	adds	r3, #1
 800b292:	72fb      	strb	r3, [r7, #11]
      break;
 800b294:	bf00      	nop
  }

  if (err != 0U)
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d11e      	bne.n	800b2da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	88db      	ldrh	r3, [r3, #6]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d016      	beq.n	800b2d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b2a4:	893b      	ldrh	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00e      	beq.n	800b2c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	88da      	ldrh	r2, [r3, #6]
 800b2ae:	893b      	ldrh	r3, [r7, #8]
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	bf28      	it	cs
 800b2b4:	4613      	movcs	r3, r2
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2ba:	893b      	ldrh	r3, [r7, #8]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fa5d 	bl	800b780 <USBD_CtlSendData>
 800b2c6:	e009      	b.n	800b2dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f9e7 	bl	800b69e <USBD_CtlError>
 800b2d0:	e004      	b.n	800b2dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 faae 	bl	800b834 <USBD_CtlSendStatus>
 800b2d8:	e000      	b.n	800b2dc <USBD_GetDescriptor+0x2cc>
    return;
 800b2da:	bf00      	nop
  }
}
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop

0800b2e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	889b      	ldrh	r3, [r3, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d131      	bne.n	800b35a <USBD_SetAddress+0x76>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	88db      	ldrh	r3, [r3, #6]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d12d      	bne.n	800b35a <USBD_SetAddress+0x76>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	2b7f      	cmp	r3, #127	; 0x7f
 800b304:	d829      	bhi.n	800b35a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	885b      	ldrh	r3, [r3, #2]
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b310:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d104      	bne.n	800b328 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f9bc 	bl	800b69e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b326:	e01d      	b.n	800b364 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7bfa      	ldrb	r2, [r7, #15]
 800b32c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 ff49 	bl	800c1cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fa7a 	bl	800b834 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d004      	beq.n	800b350 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2202      	movs	r2, #2
 800b34a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34e:	e009      	b.n	800b364 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b358:	e004      	b.n	800b364 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f99e 	bl	800b69e <USBD_CtlError>
  }
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	885b      	ldrh	r3, [r3, #2]
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	4b4e      	ldr	r3, [pc, #312]	; (800b4bc <USBD_SetConfig+0x150>)
 800b382:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b384:	4b4d      	ldr	r3, [pc, #308]	; (800b4bc <USBD_SetConfig+0x150>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d905      	bls.n	800b398 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f985 	bl	800b69e <USBD_CtlError>
    return USBD_FAIL;
 800b394:	2303      	movs	r3, #3
 800b396:	e08c      	b.n	800b4b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d002      	beq.n	800b3aa <USBD_SetConfig+0x3e>
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d029      	beq.n	800b3fc <USBD_SetConfig+0x90>
 800b3a8:	e075      	b.n	800b496 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3aa:	4b44      	ldr	r3, [pc, #272]	; (800b4bc <USBD_SetConfig+0x150>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d020      	beq.n	800b3f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3b2:	4b42      	ldr	r3, [pc, #264]	; (800b4bc <USBD_SetConfig+0x150>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3bc:	4b3f      	ldr	r3, [pc, #252]	; (800b4bc <USBD_SetConfig+0x150>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7fe ffe7 	bl	800a396 <USBD_SetClassConfig>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d008      	beq.n	800b3e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f962 	bl	800b69e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2202      	movs	r2, #2
 800b3de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3e2:	e065      	b.n	800b4b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fa25 	bl	800b834 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2203      	movs	r2, #3
 800b3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3f2:	e05d      	b.n	800b4b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fa1d 	bl	800b834 <USBD_CtlSendStatus>
      break;
 800b3fa:	e059      	b.n	800b4b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3fc:	4b2f      	ldr	r3, [pc, #188]	; (800b4bc <USBD_SetConfig+0x150>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d112      	bne.n	800b42a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2202      	movs	r2, #2
 800b408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b40c:	4b2b      	ldr	r3, [pc, #172]	; (800b4bc <USBD_SetConfig+0x150>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	461a      	mov	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b416:	4b29      	ldr	r3, [pc, #164]	; (800b4bc <USBD_SetConfig+0x150>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fe ffd6 	bl	800a3ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa06 	bl	800b834 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b428:	e042      	b.n	800b4b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b42a:	4b24      	ldr	r3, [pc, #144]	; (800b4bc <USBD_SetConfig+0x150>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	429a      	cmp	r2, r3
 800b436:	d02a      	beq.n	800b48e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7fe ffc4 	bl	800a3ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b446:	4b1d      	ldr	r3, [pc, #116]	; (800b4bc <USBD_SetConfig+0x150>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b450:	4b1a      	ldr	r3, [pc, #104]	; (800b4bc <USBD_SetConfig+0x150>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7fe ff9d 	bl	800a396 <USBD_SetClassConfig>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b460:	7bfb      	ldrb	r3, [r7, #15]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00f      	beq.n	800b486 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f918 	bl	800b69e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7fe ffa9 	bl	800a3ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2202      	movs	r2, #2
 800b480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b484:	e014      	b.n	800b4b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f9d4 	bl	800b834 <USBD_CtlSendStatus>
      break;
 800b48c:	e010      	b.n	800b4b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f9d0 	bl	800b834 <USBD_CtlSendStatus>
      break;
 800b494:	e00c      	b.n	800b4b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f900 	bl	800b69e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b49e:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <USBD_SetConfig+0x150>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7fe ff92 	bl	800a3ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ae:	bf00      	nop
  }

  return ret;
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	200006ac 	.word	0x200006ac

0800b4c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	88db      	ldrh	r3, [r3, #6]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d004      	beq.n	800b4dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f8e2 	bl	800b69e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4da:	e023      	b.n	800b524 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	dc02      	bgt.n	800b4ee <USBD_GetConfig+0x2e>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dc03      	bgt.n	800b4f4 <USBD_GetConfig+0x34>
 800b4ec:	e015      	b.n	800b51a <USBD_GetConfig+0x5a>
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d00b      	beq.n	800b50a <USBD_GetConfig+0x4a>
 800b4f2:	e012      	b.n	800b51a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	2201      	movs	r2, #1
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f93c 	bl	800b780 <USBD_CtlSendData>
        break;
 800b508:	e00c      	b.n	800b524 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3304      	adds	r3, #4
 800b50e:	2201      	movs	r2, #1
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f934 	bl	800b780 <USBD_CtlSendData>
        break;
 800b518:	e004      	b.n	800b524 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f8be 	bl	800b69e <USBD_CtlError>
        break;
 800b522:	bf00      	nop
}
 800b524:	bf00      	nop
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	2b02      	cmp	r3, #2
 800b542:	d81e      	bhi.n	800b582 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	88db      	ldrh	r3, [r3, #6]
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d004      	beq.n	800b556 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f8a5 	bl	800b69e <USBD_CtlError>
        break;
 800b554:	e01a      	b.n	800b58c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b562:	2b00      	cmp	r3, #0
 800b564:	d005      	beq.n	800b572 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f043 0202 	orr.w	r2, r3, #2
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	330c      	adds	r3, #12
 800b576:	2202      	movs	r2, #2
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f900 	bl	800b780 <USBD_CtlSendData>
      break;
 800b580:	e004      	b.n	800b58c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f88a 	bl	800b69e <USBD_CtlError>
      break;
 800b58a:	bf00      	nop
  }
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	885b      	ldrh	r3, [r3, #2]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d107      	bne.n	800b5b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f940 	bl	800b834 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5b4:	e013      	b.n	800b5de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d10b      	bne.n	800b5d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	889b      	ldrh	r3, [r3, #4]
 800b5c2:	0a1b      	lsrs	r3, r3, #8
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f930 	bl	800b834 <USBD_CtlSendStatus>
}
 800b5d4:	e003      	b.n	800b5de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f860 	bl	800b69e <USBD_CtlError>
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d80b      	bhi.n	800b616 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	885b      	ldrh	r3, [r3, #2]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d10c      	bne.n	800b620 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f910 	bl	800b834 <USBD_CtlSendStatus>
      }
      break;
 800b614:	e004      	b.n	800b620 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f840 	bl	800b69e <USBD_CtlError>
      break;
 800b61e:	e000      	b.n	800b622 <USBD_ClrFeature+0x3c>
      break;
 800b620:	bf00      	nop
  }
}
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3301      	adds	r3, #1
 800b644:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	781a      	ldrb	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3301      	adds	r3, #1
 800b652:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff fa41 	bl	800aadc <SWAPBYTE>
 800b65a:	4603      	mov	r3, r0
 800b65c:	461a      	mov	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3301      	adds	r3, #1
 800b666:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3301      	adds	r3, #1
 800b66c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f7ff fa34 	bl	800aadc <SWAPBYTE>
 800b674:	4603      	mov	r3, r0
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3301      	adds	r3, #1
 800b680:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3301      	adds	r3, #1
 800b686:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff fa27 	bl	800aadc <SWAPBYTE>
 800b68e:	4603      	mov	r3, r0
 800b690:	461a      	mov	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	80da      	strh	r2, [r3, #6]
}
 800b696:	bf00      	nop
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6a8:	2180      	movs	r1, #128	; 0x80
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fd24 	bl	800c0f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fd20 	bl	800c0f8 <USBD_LL_StallEP>
}
 800b6b8:	bf00      	nop
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d036      	beq.n	800b744 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	f000 f836 	bl	800b74c <USBD_GetLen>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	7812      	ldrb	r2, [r2, #0]
 800b6f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	4413      	add	r3, r2
 800b706:	2203      	movs	r2, #3
 800b708:	701a      	strb	r2, [r3, #0]
  idx++;
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	3301      	adds	r3, #1
 800b70e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b710:	e013      	b.n	800b73a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	4413      	add	r3, r2
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	3301      	adds	r3, #1
 800b722:	613b      	str	r3, [r7, #16]
    idx++;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	3301      	adds	r3, #1
 800b728:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	4413      	add	r3, r2
 800b730:	2200      	movs	r2, #0
 800b732:	701a      	strb	r2, [r3, #0]
    idx++;
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	3301      	adds	r3, #1
 800b738:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e7      	bne.n	800b712 <USBD_GetString+0x52>
 800b742:	e000      	b.n	800b746 <USBD_GetString+0x86>
    return;
 800b744:	bf00      	nop
  }
}
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b75c:	e005      	b.n	800b76a <USBD_GetLen+0x1e>
  {
    len++;
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	3301      	adds	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	3301      	adds	r3, #1
 800b768:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1f5      	bne.n	800b75e <USBD_GetLen+0x12>
  }

  return len;
 800b772:	7bfb      	ldrb	r3, [r7, #15]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2202      	movs	r2, #2
 800b790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 fd2f 	bl	800c20a <USBD_LL_Transmit>

  return USBD_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 fd1e 	bl	800c20a <USBD_LL_Transmit>

  return USBD_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	2100      	movs	r1, #0
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 fd22 	bl	800c24c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	2100      	movs	r1, #0
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 fd11 	bl	800c24c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2204      	movs	r2, #4
 800b840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b844:	2300      	movs	r3, #0
 800b846:	2200      	movs	r2, #0
 800b848:	2100      	movs	r1, #0
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fcdd 	bl	800c20a <USBD_LL_Transmit>

  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2205      	movs	r2, #5
 800b866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b86a:	2300      	movs	r3, #0
 800b86c:	2200      	movs	r2, #0
 800b86e:	2100      	movs	r1, #0
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fceb 	bl	800c24c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4613      	mov	r3, r2
 800b88c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b88e:	2301      	movs	r3, #1
 800b890:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b896:	4b1f      	ldr	r3, [pc, #124]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b898:	7a5b      	ldrb	r3, [r3, #9]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d131      	bne.n	800b904 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b8a0:	4b1c      	ldr	r3, [pc, #112]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8a2:	7a5b      	ldrb	r3, [r3, #9]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4b1a      	ldr	r3, [pc, #104]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b8ae:	4b19      	ldr	r3, [pc, #100]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8b0:	7a5b      	ldrb	r3, [r3, #9]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	4a17      	ldr	r2, [pc, #92]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b8be:	4b15      	ldr	r3, [pc, #84]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8c0:	7a5b      	ldrb	r3, [r3, #9]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4b13      	ldr	r3, [pc, #76]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8c8:	4413      	add	r3, r2
 800b8ca:	79fa      	ldrb	r2, [r7, #7]
 800b8cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b8ce:	4b11      	ldr	r3, [pc, #68]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8d0:	7a5b      	ldrb	r3, [r3, #9]
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	b2d1      	uxtb	r1, r2
 800b8d8:	4a0e      	ldr	r2, [pc, #56]	; (800b914 <FATFS_LinkDriverEx+0x94>)
 800b8da:	7251      	strb	r1, [r2, #9]
 800b8dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b8de:	7dbb      	ldrb	r3, [r7, #22]
 800b8e0:	3330      	adds	r3, #48	; 0x30
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	223a      	movs	r2, #58	; 0x3a
 800b8ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	3302      	adds	r3, #2
 800b8f4:	222f      	movs	r2, #47	; 0x2f
 800b8f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	3303      	adds	r3, #3
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
}
 800b906:	4618      	mov	r0, r3
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	200006b0 	.word	0x200006b0

0800b918 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b922:	2200      	movs	r2, #0
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7ff ffaa 	bl	800b880 <FATFS_LinkDriverEx>
 800b92c:	4603      	mov	r3, r0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b93c:	2200      	movs	r2, #0
 800b93e:	4912      	ldr	r1, [pc, #72]	; (800b988 <MX_USB_DEVICE_Init+0x50>)
 800b940:	4812      	ldr	r0, [pc, #72]	; (800b98c <MX_USB_DEVICE_Init+0x54>)
 800b942:	f7fe fcab 	bl	800a29c <USBD_Init>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b94c:	f7f5 fa2e 	bl	8000dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b950:	490f      	ldr	r1, [pc, #60]	; (800b990 <MX_USB_DEVICE_Init+0x58>)
 800b952:	480e      	ldr	r0, [pc, #56]	; (800b98c <MX_USB_DEVICE_Init+0x54>)
 800b954:	f7fe fcd2 	bl	800a2fc <USBD_RegisterClass>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b95e:	f7f5 fa25 	bl	8000dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b962:	490c      	ldr	r1, [pc, #48]	; (800b994 <MX_USB_DEVICE_Init+0x5c>)
 800b964:	4809      	ldr	r0, [pc, #36]	; (800b98c <MX_USB_DEVICE_Init+0x54>)
 800b966:	f7fe fc09 	bl	800a17c <USBD_CDC_RegisterInterface>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b970:	f7f5 fa1c 	bl	8000dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b974:	4805      	ldr	r0, [pc, #20]	; (800b98c <MX_USB_DEVICE_Init+0x54>)
 800b976:	f7fe fcf7 	bl	800a368 <USBD_Start>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b980:	f7f5 fa14 	bl	8000dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b984:	bf00      	nop
 800b986:	bd80      	pop	{r7, pc}
 800b988:	200000ac 	.word	0x200000ac
 800b98c:	200006bc 	.word	0x200006bc
 800b990:	20000018 	.word	0x20000018
 800b994:	20000098 	.word	0x20000098

0800b998 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b99c:	2200      	movs	r2, #0
 800b99e:	4905      	ldr	r1, [pc, #20]	; (800b9b4 <CDC_Init_FS+0x1c>)
 800b9a0:	4805      	ldr	r0, [pc, #20]	; (800b9b8 <CDC_Init_FS+0x20>)
 800b9a2:	f7fe fc05 	bl	800a1b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b9a6:	4905      	ldr	r1, [pc, #20]	; (800b9bc <CDC_Init_FS+0x24>)
 800b9a8:	4803      	ldr	r0, [pc, #12]	; (800b9b8 <CDC_Init_FS+0x20>)
 800b9aa:	f7fe fc23 	bl	800a1f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b9ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	20001198 	.word	0x20001198
 800b9b8:	200006bc 	.word	0x200006bc
 800b9bc:	20000998 	.word	0x20000998

0800b9c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b9c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	6039      	str	r1, [r7, #0]
 800b9da:	71fb      	strb	r3, [r7, #7]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	2b23      	cmp	r3, #35	; 0x23
 800b9e4:	d84a      	bhi.n	800ba7c <CDC_Control_FS+0xac>
 800b9e6:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <CDC_Control_FS+0x1c>)
 800b9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ec:	0800ba7d 	.word	0x0800ba7d
 800b9f0:	0800ba7d 	.word	0x0800ba7d
 800b9f4:	0800ba7d 	.word	0x0800ba7d
 800b9f8:	0800ba7d 	.word	0x0800ba7d
 800b9fc:	0800ba7d 	.word	0x0800ba7d
 800ba00:	0800ba7d 	.word	0x0800ba7d
 800ba04:	0800ba7d 	.word	0x0800ba7d
 800ba08:	0800ba7d 	.word	0x0800ba7d
 800ba0c:	0800ba7d 	.word	0x0800ba7d
 800ba10:	0800ba7d 	.word	0x0800ba7d
 800ba14:	0800ba7d 	.word	0x0800ba7d
 800ba18:	0800ba7d 	.word	0x0800ba7d
 800ba1c:	0800ba7d 	.word	0x0800ba7d
 800ba20:	0800ba7d 	.word	0x0800ba7d
 800ba24:	0800ba7d 	.word	0x0800ba7d
 800ba28:	0800ba7d 	.word	0x0800ba7d
 800ba2c:	0800ba7d 	.word	0x0800ba7d
 800ba30:	0800ba7d 	.word	0x0800ba7d
 800ba34:	0800ba7d 	.word	0x0800ba7d
 800ba38:	0800ba7d 	.word	0x0800ba7d
 800ba3c:	0800ba7d 	.word	0x0800ba7d
 800ba40:	0800ba7d 	.word	0x0800ba7d
 800ba44:	0800ba7d 	.word	0x0800ba7d
 800ba48:	0800ba7d 	.word	0x0800ba7d
 800ba4c:	0800ba7d 	.word	0x0800ba7d
 800ba50:	0800ba7d 	.word	0x0800ba7d
 800ba54:	0800ba7d 	.word	0x0800ba7d
 800ba58:	0800ba7d 	.word	0x0800ba7d
 800ba5c:	0800ba7d 	.word	0x0800ba7d
 800ba60:	0800ba7d 	.word	0x0800ba7d
 800ba64:	0800ba7d 	.word	0x0800ba7d
 800ba68:	0800ba7d 	.word	0x0800ba7d
 800ba6c:	0800ba7d 	.word	0x0800ba7d
 800ba70:	0800ba7d 	.word	0x0800ba7d
 800ba74:	0800ba7d 	.word	0x0800ba7d
 800ba78:	0800ba7d 	.word	0x0800ba7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba7c:	bf00      	nop
  }

  return (USBD_OK);
 800ba7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4805      	ldr	r0, [pc, #20]	; (800bab0 <CDC_Receive_FS+0x24>)
 800ba9a:	f7fe fbab 	bl	800a1f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba9e:	4804      	ldr	r0, [pc, #16]	; (800bab0 <CDC_Receive_FS+0x24>)
 800baa0:	f7fe fbc6 	bl	800a230 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800baa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200006bc 	.word	0x200006bc

0800bab4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	371c      	adds	r7, #28
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
	...

0800bad8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2212      	movs	r2, #18
 800bae8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800baea:	4b03      	ldr	r3, [pc, #12]	; (800baf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800baec:	4618      	mov	r0, r3
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	200000c8 	.word	0x200000c8

0800bafc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4603      	mov	r3, r0
 800bb04:	6039      	str	r1, [r7, #0]
 800bb06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb0e:	4b03      	ldr	r3, [pc, #12]	; (800bb1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	200000dc 	.word	0x200000dc

0800bb20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d105      	bne.n	800bb3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	4907      	ldr	r1, [pc, #28]	; (800bb54 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb36:	4808      	ldr	r0, [pc, #32]	; (800bb58 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb38:	f7ff fdc2 	bl	800b6c0 <USBD_GetString>
 800bb3c:	e004      	b.n	800bb48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	4904      	ldr	r1, [pc, #16]	; (800bb54 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb42:	4805      	ldr	r0, [pc, #20]	; (800bb58 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb44:	f7ff fdbc 	bl	800b6c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb48:	4b02      	ldr	r3, [pc, #8]	; (800bb54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	20001998 	.word	0x20001998
 800bb58:	0800c3ac 	.word	0x0800c3ac

0800bb5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	6039      	str	r1, [r7, #0]
 800bb66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	4904      	ldr	r1, [pc, #16]	; (800bb7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb6c:	4804      	ldr	r0, [pc, #16]	; (800bb80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb6e:	f7ff fda7 	bl	800b6c0 <USBD_GetString>
  return USBD_StrDesc;
 800bb72:	4b02      	ldr	r3, [pc, #8]	; (800bb7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20001998 	.word	0x20001998
 800bb80:	0800c3c4 	.word	0x0800c3c4

0800bb84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	221a      	movs	r2, #26
 800bb94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb96:	f000 f843 	bl	800bc20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb9a:	4b02      	ldr	r3, [pc, #8]	; (800bba4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	200000e0 	.word	0x200000e0

0800bba8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	6039      	str	r1, [r7, #0]
 800bbb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d105      	bne.n	800bbc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	4907      	ldr	r1, [pc, #28]	; (800bbdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbbe:	4808      	ldr	r0, [pc, #32]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbc0:	f7ff fd7e 	bl	800b6c0 <USBD_GetString>
 800bbc4:	e004      	b.n	800bbd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	4904      	ldr	r1, [pc, #16]	; (800bbdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbca:	4805      	ldr	r0, [pc, #20]	; (800bbe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbcc:	f7ff fd78 	bl	800b6c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbd0:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20001998 	.word	0x20001998
 800bbe0:	0800c3d8 	.word	0x0800c3d8

0800bbe4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	6039      	str	r1, [r7, #0]
 800bbee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d105      	bne.n	800bc02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	4907      	ldr	r1, [pc, #28]	; (800bc18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbfa:	4808      	ldr	r0, [pc, #32]	; (800bc1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbfc:	f7ff fd60 	bl	800b6c0 <USBD_GetString>
 800bc00:	e004      	b.n	800bc0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	4904      	ldr	r1, [pc, #16]	; (800bc18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc06:	4805      	ldr	r0, [pc, #20]	; (800bc1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc08:	f7ff fd5a 	bl	800b6c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc0c:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20001998 	.word	0x20001998
 800bc1c:	0800c3e4 	.word	0x0800c3e4

0800bc20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <Get_SerialNum+0x44>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <Get_SerialNum+0x48>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc32:	4b0e      	ldr	r3, [pc, #56]	; (800bc6c <Get_SerialNum+0x4c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc46:	2208      	movs	r2, #8
 800bc48:	4909      	ldr	r1, [pc, #36]	; (800bc70 <Get_SerialNum+0x50>)
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 f814 	bl	800bc78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc50:	2204      	movs	r2, #4
 800bc52:	4908      	ldr	r1, [pc, #32]	; (800bc74 <Get_SerialNum+0x54>)
 800bc54:	68b8      	ldr	r0, [r7, #8]
 800bc56:	f000 f80f 	bl	800bc78 <IntToUnicode>
  }
}
 800bc5a:	bf00      	nop
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	1fff7a10 	.word	0x1fff7a10
 800bc68:	1fff7a14 	.word	0x1fff7a14
 800bc6c:	1fff7a18 	.word	0x1fff7a18
 800bc70:	200000e2 	.word	0x200000e2
 800bc74:	200000f2 	.word	0x200000f2

0800bc78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	4613      	mov	r3, r2
 800bc84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
 800bc8e:	e027      	b.n	800bce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	0f1b      	lsrs	r3, r3, #28
 800bc94:	2b09      	cmp	r3, #9
 800bc96:	d80b      	bhi.n	800bcb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	0f1b      	lsrs	r3, r3, #28
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	4619      	mov	r1, r3
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	440b      	add	r3, r1
 800bca8:	3230      	adds	r2, #48	; 0x30
 800bcaa:	b2d2      	uxtb	r2, r2
 800bcac:	701a      	strb	r2, [r3, #0]
 800bcae:	e00a      	b.n	800bcc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	0f1b      	lsrs	r3, r3, #28
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4619      	mov	r1, r3
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	440b      	add	r3, r1
 800bcc0:	3237      	adds	r2, #55	; 0x37
 800bcc2:	b2d2      	uxtb	r2, r2
 800bcc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	011b      	lsls	r3, r3, #4
 800bcca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	75fb      	strb	r3, [r7, #23]
 800bce0:	7dfa      	ldrb	r2, [r7, #23]
 800bce2:	79fb      	ldrb	r3, [r7, #7]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d3d3      	bcc.n	800bc90 <IntToUnicode+0x18>
  }
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	371c      	adds	r7, #28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
	...

0800bcf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08a      	sub	sp, #40	; 0x28
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd00:	f107 0314 	add.w	r3, r7, #20
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	605a      	str	r2, [r3, #4]
 800bd0a:	609a      	str	r2, [r3, #8]
 800bd0c:	60da      	str	r2, [r3, #12]
 800bd0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd18:	d147      	bne.n	800bdaa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	4b25      	ldr	r3, [pc, #148]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd22:	4a24      	ldr	r2, [pc, #144]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd24:	f043 0301 	orr.w	r3, r3, #1
 800bd28:	6313      	str	r3, [r2, #48]	; 0x30
 800bd2a:	4b22      	ldr	r3, [pc, #136]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	613b      	str	r3, [r7, #16]
 800bd34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bd36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bd44:	f107 0314 	add.w	r3, r7, #20
 800bd48:	4619      	mov	r1, r3
 800bd4a:	481b      	ldr	r0, [pc, #108]	; (800bdb8 <HAL_PCD_MspInit+0xc0>)
 800bd4c:	f7f6 fd30 	bl	80027b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bd50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bd54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd56:	2302      	movs	r3, #2
 800bd58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd62:	230a      	movs	r3, #10
 800bd64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd66:	f107 0314 	add.w	r3, r7, #20
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4812      	ldr	r0, [pc, #72]	; (800bdb8 <HAL_PCD_MspInit+0xc0>)
 800bd6e:	f7f6 fd1f 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd72:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd76:	4a0f      	ldr	r2, [pc, #60]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd7c:	6353      	str	r3, [r2, #52]	; 0x34
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd86:	4a0b      	ldr	r2, [pc, #44]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd8c:	6453      	str	r3, [r2, #68]	; 0x44
 800bd8e:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <HAL_PCD_MspInit+0xbc>)
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	2043      	movs	r0, #67	; 0x43
 800bda0:	f7f6 f953 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bda4:	2043      	movs	r0, #67	; 0x43
 800bda6:	f7f6 f96c 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bdaa:	bf00      	nop
 800bdac:	3728      	adds	r7, #40	; 0x28
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	40023800 	.word	0x40023800
 800bdb8:	40020000 	.word	0x40020000

0800bdbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7fe fb15 	bl	800a402 <USBD_LL_SetupStage>
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bdf2:	78fa      	ldrb	r2, [r7, #3]
 800bdf4:	6879      	ldr	r1, [r7, #4]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	440b      	add	r3, r1
 800be00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	78fb      	ldrb	r3, [r7, #3]
 800be08:	4619      	mov	r1, r3
 800be0a:	f7fe fb4f 	bl	800a4ac <USBD_LL_DataOutStage>
}
 800be0e:	bf00      	nop
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800be28:	78fa      	ldrb	r2, [r7, #3]
 800be2a:	6879      	ldr	r1, [r7, #4]
 800be2c:	4613      	mov	r3, r2
 800be2e:	00db      	lsls	r3, r3, #3
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	440b      	add	r3, r1
 800be36:	334c      	adds	r3, #76	; 0x4c
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	4619      	mov	r1, r3
 800be3e:	f7fe fbe8 	bl	800a612 <USBD_LL_DataInStage>
}
 800be42:	bf00      	nop
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe fd1c 	bl	800a896 <USBD_LL_SOF>
}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be6e:	2301      	movs	r3, #1
 800be70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]
 800be7e:	e008      	b.n	800be92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d102      	bne.n	800be8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be88:	2301      	movs	r3, #1
 800be8a:	73fb      	strb	r3, [r7, #15]
 800be8c:	e001      	b.n	800be92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be8e:	f7f4 ff8d 	bl	8000dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be98:	7bfa      	ldrb	r2, [r7, #15]
 800be9a:	4611      	mov	r1, r2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fcbc 	bl	800a81a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe fc64 	bl	800a776 <USBD_LL_Reset>
}
 800beae:	bf00      	nop
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fcb7 	bl	800a83a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6812      	ldr	r2, [r2, #0]
 800beda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a1b      	ldr	r3, [r3, #32]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800beec:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <HAL_PCD_SuspendCallback+0x48>)
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	4a03      	ldr	r2, [pc, #12]	; (800bf00 <HAL_PCD_SuspendCallback+0x48>)
 800bef2:	f043 0306 	orr.w	r3, r3, #6
 800bef6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bef8:	bf00      	nop
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	e000ed00 	.word	0xe000ed00

0800bf04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fca7 	bl	800a866 <USBD_LL_Resume>
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf32:	78fa      	ldrb	r2, [r7, #3]
 800bf34:	4611      	mov	r1, r2
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fcff 	bl	800a93a <USBD_LL_IsoOUTIncomplete>
}
 800bf3c:	bf00      	nop
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf56:	78fa      	ldrb	r2, [r7, #3]
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fcbb 	bl	800a8d6 <USBD_LL_IsoINIncomplete>
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fd11 	bl	800a99e <USBD_LL_DevConnected>
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fd0e 	bl	800a9b4 <USBD_LL_DevDisconnected>
}
 800bf98:	bf00      	nop
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d13c      	bne.n	800c02a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bfb0:	4a20      	ldr	r2, [pc, #128]	; (800c034 <USBD_LL_Init+0x94>)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a1e      	ldr	r2, [pc, #120]	; (800c034 <USBD_LL_Init+0x94>)
 800bfbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bfc0:	4b1c      	ldr	r3, [pc, #112]	; (800c034 <USBD_LL_Init+0x94>)
 800bfc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bfc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bfc8:	4b1a      	ldr	r3, [pc, #104]	; (800c034 <USBD_LL_Init+0x94>)
 800bfca:	2204      	movs	r2, #4
 800bfcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bfce:	4b19      	ldr	r3, [pc, #100]	; (800c034 <USBD_LL_Init+0x94>)
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bfd4:	4b17      	ldr	r3, [pc, #92]	; (800c034 <USBD_LL_Init+0x94>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfda:	4b16      	ldr	r3, [pc, #88]	; (800c034 <USBD_LL_Init+0x94>)
 800bfdc:	2202      	movs	r2, #2
 800bfde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfe0:	4b14      	ldr	r3, [pc, #80]	; (800c034 <USBD_LL_Init+0x94>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bfe6:	4b13      	ldr	r3, [pc, #76]	; (800c034 <USBD_LL_Init+0x94>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bfec:	4b11      	ldr	r3, [pc, #68]	; (800c034 <USBD_LL_Init+0x94>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bff2:	4b10      	ldr	r3, [pc, #64]	; (800c034 <USBD_LL_Init+0x94>)
 800bff4:	2201      	movs	r2, #1
 800bff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bff8:	4b0e      	ldr	r3, [pc, #56]	; (800c034 <USBD_LL_Init+0x94>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bffe:	480d      	ldr	r0, [pc, #52]	; (800c034 <USBD_LL_Init+0x94>)
 800c000:	f7f6 fda3 	bl	8002b4a <HAL_PCD_Init>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c00a:	f7f4 fecf 	bl	8000dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c00e:	2180      	movs	r1, #128	; 0x80
 800c010:	4808      	ldr	r0, [pc, #32]	; (800c034 <USBD_LL_Init+0x94>)
 800c012:	f7f7 fffa 	bl	800400a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c016:	2240      	movs	r2, #64	; 0x40
 800c018:	2100      	movs	r1, #0
 800c01a:	4806      	ldr	r0, [pc, #24]	; (800c034 <USBD_LL_Init+0x94>)
 800c01c:	f7f7 ffae 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c020:	2280      	movs	r2, #128	; 0x80
 800c022:	2101      	movs	r1, #1
 800c024:	4803      	ldr	r0, [pc, #12]	; (800c034 <USBD_LL_Init+0x94>)
 800c026:	f7f7 ffa9 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20001b98 	.word	0x20001b98

0800c038 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f6 fe98 	bl	8002d84 <HAL_PCD_Start>
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 f942 	bl	800c2e4 <USBD_Get_USB_Status>
 800c060:	4603      	mov	r3, r0
 800c062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c064:	7bbb      	ldrb	r3, [r7, #14]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	4608      	mov	r0, r1
 800c078:	4611      	mov	r1, r2
 800c07a:	461a      	mov	r2, r3
 800c07c:	4603      	mov	r3, r0
 800c07e:	70fb      	strb	r3, [r7, #3]
 800c080:	460b      	mov	r3, r1
 800c082:	70bb      	strb	r3, [r7, #2]
 800c084:	4613      	mov	r3, r2
 800c086:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c096:	78bb      	ldrb	r3, [r7, #2]
 800c098:	883a      	ldrh	r2, [r7, #0]
 800c09a:	78f9      	ldrb	r1, [r7, #3]
 800c09c:	f7f7 fb69 	bl	8003772 <HAL_PCD_EP_Open>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 f91c 	bl	800c2e4 <USBD_Get_USB_Status>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0d4:	78fa      	ldrb	r2, [r7, #3]
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f7 fbb2 	bl	8003842 <HAL_PCD_EP_Close>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e2:	7bfb      	ldrb	r3, [r7, #15]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 f8fd 	bl	800c2e4 <USBD_Get_USB_Status>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c112:	78fa      	ldrb	r2, [r7, #3]
 800c114:	4611      	mov	r1, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f7f7 fc8a 	bl	8003a30 <HAL_PCD_EP_SetStall>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f8de 	bl	800c2e4 <USBD_Get_USB_Status>
 800c128:	4603      	mov	r3, r0
 800c12a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b084      	sub	sp, #16
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	460b      	mov	r3, r1
 800c140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	4611      	mov	r1, r2
 800c154:	4618      	mov	r0, r3
 800c156:	f7f7 fccf 	bl	8003af8 <HAL_PCD_EP_ClrStall>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	4618      	mov	r0, r3
 800c162:	f000 f8bf 	bl	800c2e4 <USBD_Get_USB_Status>
 800c166:	4603      	mov	r3, r0
 800c168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c186:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	da0b      	bge.n	800c1a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c196:	68f9      	ldr	r1, [r7, #12]
 800c198:	4613      	mov	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	333e      	adds	r3, #62	; 0x3e
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	e00b      	b.n	800c1c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c1a8:	78fb      	ldrb	r3, [r7, #3]
 800c1aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1ae:	68f9      	ldr	r1, [r7, #12]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	440b      	add	r3, r1
 800c1ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c1be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1e6:	78fa      	ldrb	r2, [r7, #3]
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7f7 fa9c 	bl	8003728 <HAL_PCD_SetAddress>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 f874 	bl	800c2e4 <USBD_Get_USB_Status>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c200:	7bbb      	ldrb	r3, [r7, #14]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b086      	sub	sp, #24
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	607a      	str	r2, [r7, #4]
 800c214:	603b      	str	r3, [r7, #0]
 800c216:	460b      	mov	r3, r1
 800c218:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c228:	7af9      	ldrb	r1, [r7, #11]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	f7f7 fbb5 	bl	800399c <HAL_PCD_EP_Transmit>
 800c232:	4603      	mov	r3, r0
 800c234:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c236:	7dfb      	ldrb	r3, [r7, #23]
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 f853 	bl	800c2e4 <USBD_Get_USB_Status>
 800c23e:	4603      	mov	r3, r0
 800c240:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c242:	7dbb      	ldrb	r3, [r7, #22]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	607a      	str	r2, [r7, #4]
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	460b      	mov	r3, r1
 800c25a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c26a:	7af9      	ldrb	r1, [r7, #11]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	f7f7 fb31 	bl	80038d6 <HAL_PCD_EP_Receive>
 800c274:	4603      	mov	r3, r0
 800c276:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f832 	bl	800c2e4 <USBD_Get_USB_Status>
 800c280:	4603      	mov	r3, r0
 800c282:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c284:	7dbb      	ldrb	r3, [r7, #22]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b082      	sub	sp, #8
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	460b      	mov	r3, r1
 800c298:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2a0:	78fa      	ldrb	r2, [r7, #3]
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7f7 fb61 	bl	800396c <HAL_PCD_EP_GetRxCount>
 800c2aa:	4603      	mov	r3, r0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c2bc:	4b03      	ldr	r3, [pc, #12]	; (800c2cc <USBD_static_malloc+0x18>)
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	200020a4 	.word	0x200020a4

0800c2d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]

}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	2b03      	cmp	r3, #3
 800c2f6:	d817      	bhi.n	800c328 <USBD_Get_USB_Status+0x44>
 800c2f8:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <USBD_Get_USB_Status+0x1c>)
 800c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c311 	.word	0x0800c311
 800c304:	0800c317 	.word	0x0800c317
 800c308:	0800c31d 	.word	0x0800c31d
 800c30c:	0800c323 	.word	0x0800c323
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]
    break;
 800c314:	e00b      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c316:	2303      	movs	r3, #3
 800c318:	73fb      	strb	r3, [r7, #15]
    break;
 800c31a:	e008      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c31c:	2301      	movs	r3, #1
 800c31e:	73fb      	strb	r3, [r7, #15]
    break;
 800c320:	e005      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c322:	2303      	movs	r3, #3
 800c324:	73fb      	strb	r3, [r7, #15]
    break;
 800c326:	e002      	b.n	800c32e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	73fb      	strb	r3, [r7, #15]
    break;
 800c32c:	bf00      	nop
  }
  return usb_status;
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3714      	adds	r7, #20
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <__libc_init_array>:
 800c33c:	b570      	push	{r4, r5, r6, lr}
 800c33e:	4d0d      	ldr	r5, [pc, #52]	; (800c374 <__libc_init_array+0x38>)
 800c340:	4c0d      	ldr	r4, [pc, #52]	; (800c378 <__libc_init_array+0x3c>)
 800c342:	1b64      	subs	r4, r4, r5
 800c344:	10a4      	asrs	r4, r4, #2
 800c346:	2600      	movs	r6, #0
 800c348:	42a6      	cmp	r6, r4
 800c34a:	d109      	bne.n	800c360 <__libc_init_array+0x24>
 800c34c:	4d0b      	ldr	r5, [pc, #44]	; (800c37c <__libc_init_array+0x40>)
 800c34e:	4c0c      	ldr	r4, [pc, #48]	; (800c380 <__libc_init_array+0x44>)
 800c350:	f000 f820 	bl	800c394 <_init>
 800c354:	1b64      	subs	r4, r4, r5
 800c356:	10a4      	asrs	r4, r4, #2
 800c358:	2600      	movs	r6, #0
 800c35a:	42a6      	cmp	r6, r4
 800c35c:	d105      	bne.n	800c36a <__libc_init_array+0x2e>
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	f855 3b04 	ldr.w	r3, [r5], #4
 800c364:	4798      	blx	r3
 800c366:	3601      	adds	r6, #1
 800c368:	e7ee      	b.n	800c348 <__libc_init_array+0xc>
 800c36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c36e:	4798      	blx	r3
 800c370:	3601      	adds	r6, #1
 800c372:	e7f2      	b.n	800c35a <__libc_init_array+0x1e>
 800c374:	0800c430 	.word	0x0800c430
 800c378:	0800c430 	.word	0x0800c430
 800c37c:	0800c430 	.word	0x0800c430
 800c380:	0800c434 	.word	0x0800c434

0800c384 <memset>:
 800c384:	4402      	add	r2, r0
 800c386:	4603      	mov	r3, r0
 800c388:	4293      	cmp	r3, r2
 800c38a:	d100      	bne.n	800c38e <memset+0xa>
 800c38c:	4770      	bx	lr
 800c38e:	f803 1b01 	strb.w	r1, [r3], #1
 800c392:	e7f9      	b.n	800c388 <memset+0x4>

0800c394 <_init>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr

0800c3a0 <_fini>:
 800c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a2:	bf00      	nop
 800c3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a6:	bc08      	pop	{r3}
 800c3a8:	469e      	mov	lr, r3
 800c3aa:	4770      	bx	lr
