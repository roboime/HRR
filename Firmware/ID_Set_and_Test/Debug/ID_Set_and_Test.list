
ID_Set_and_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b540  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b730  0800b730  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b730  0800b730  0001b730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b738  0800b738  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b73c  0800b73c  0001b73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800b740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          0000216c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002268  20002268  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e722  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e6b  00000000  00000000  0003e84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  000426c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001830  00000000  00000000  00044078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002711f  00000000  00000000  000458a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef2d  00000000  00000000  0006c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f9e  00000000  00000000  0008b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e892  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d60  00000000  00000000  0016e8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b6b0 	.word	0x0800b6b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800b6b0 	.word	0x0800b6b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <sendInstruction.0>:
  	  paramArray[0] = 0x03; //Starting adress da instruçao de ID
  	  paramArray[1] = 0x00; //novo ID (se mudar tem q mudar o uartbuf2 do sendInstruction)
  	  uint8_t paramArray2[5];
  	  uint8_t paramArray3[5];

  	  void sendInstruction(uint8_t instruction, uint8_t* paramArray, uint8_t numParams){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	4613      	mov	r3, r2
 80004da:	73bb      	strb	r3, [r7, #14]
 80004dc:	4663      	mov	r3, ip
 80004de:	f8c7 c004 	str.w	ip, [r7, #4]
  		  //while(huartptr->gState != HAL_UART_STATE_READY);	//Tem que implementar timeout
  		  uartBuf[0] = 0xFF;				//Header
 80004e2:	22ff      	movs	r2, #255	; 0xff
 80004e4:	705a      	strb	r2, [r3, #1]
  		  uartBuf[1] = 0xFF;				//Header
 80004e6:	22ff      	movs	r2, #255	; 0xff
 80004e8:	709a      	strb	r2, [r3, #2]
  		  uartBuf[2] = motorId;				//ID
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	70da      	strb	r2, [r3, #3]
  		  uartBuf[3] = numParams + 2;		//Length
 80004ee:	7bba      	ldrb	r2, [r7, #14]
 80004f0:	3202      	adds	r2, #2
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	711a      	strb	r2, [r3, #4]
  		  uartBuf[4] = instruction;			//Instruction
 80004f6:	7bfa      	ldrb	r2, [r7, #15]
 80004f8:	715a      	strb	r2, [r3, #5]
  		  uint8_t i;
  		  uint8_t somaParams = 0;
 80004fa:	2200      	movs	r2, #0
 80004fc:	75ba      	strb	r2, [r7, #22]
  		  for(i=0; i<numParams; i++){
 80004fe:	2200      	movs	r2, #0
 8000500:	75fa      	strb	r2, [r7, #23]
 8000502:	e011      	b.n	8000528 <sendInstruction.0+0x5c>
  			  uartBuf[i+5] = paramArray[i];	//Parameters
 8000504:	7dfa      	ldrb	r2, [r7, #23]
 8000506:	68b9      	ldr	r1, [r7, #8]
 8000508:	4411      	add	r1, r2
 800050a:	7dfa      	ldrb	r2, [r7, #23]
 800050c:	3205      	adds	r2, #5
 800050e:	7809      	ldrb	r1, [r1, #0]
 8000510:	441a      	add	r2, r3
 8000512:	7051      	strb	r1, [r2, #1]
  			  somaParams += paramArray[i];
 8000514:	7dfa      	ldrb	r2, [r7, #23]
 8000516:	68b9      	ldr	r1, [r7, #8]
 8000518:	440a      	add	r2, r1
 800051a:	7811      	ldrb	r1, [r2, #0]
 800051c:	7dba      	ldrb	r2, [r7, #22]
 800051e:	440a      	add	r2, r1
 8000520:	75ba      	strb	r2, [r7, #22]
  		  for(i=0; i<numParams; i++){
 8000522:	7dfa      	ldrb	r2, [r7, #23]
 8000524:	3201      	adds	r2, #1
 8000526:	75fa      	strb	r2, [r7, #23]
 8000528:	7df9      	ldrb	r1, [r7, #23]
 800052a:	7bba      	ldrb	r2, [r7, #14]
 800052c:	4291      	cmp	r1, r2
 800052e:	d3e9      	bcc.n	8000504 <sendInstruction.0+0x38>
  		  }
  		  uartBuf[i+5] = ~(motorId + numParams + 2 + instruction + somaParams);	//Checksum
 8000530:	7819      	ldrb	r1, [r3, #0]
 8000532:	7bba      	ldrb	r2, [r7, #14]
 8000534:	440a      	add	r2, r1
 8000536:	b2d1      	uxtb	r1, r2
 8000538:	7bfa      	ldrb	r2, [r7, #15]
 800053a:	440a      	add	r2, r1
 800053c:	b2d1      	uxtb	r1, r2
 800053e:	7dba      	ldrb	r2, [r7, #22]
 8000540:	440a      	add	r2, r1
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	3202      	adds	r2, #2
 8000546:	b2d1      	uxtb	r1, r2
 8000548:	7dfa      	ldrb	r2, [r7, #23]
 800054a:	3205      	adds	r2, #5
 800054c:	43c9      	mvns	r1, r1
 800054e:	b2c9      	uxtb	r1, r1
 8000550:	441a      	add	r2, r3
 8000552:	7051      	strb	r1, [r2, #1]
  		  HAL_UART_Transmit_DMA(&huart1, uartBuf, sizeof(uartBuf));  //tem q ficar mudando a porta aqui
 8000554:	3301      	adds	r3, #1
 8000556:	2240      	movs	r2, #64	; 0x40
 8000558:	4619      	mov	r1, r3
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <sendInstruction.0+0x9c>)
 800055c:	f005 fb74 	bl	8005c48 <HAL_UART_Transmit_DMA>
  }
 8000560:	bf00      	nop
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200003c8 	.word	0x200003c8

0800056c <main>:
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09a      	sub	sp, #104	; 0x68
 8000570:	af00      	add	r7, sp, #0
int main(void)
 8000572:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000576:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_Init();
 8000578:	f001 f9d8 	bl	800192c <HAL_Init>
  SystemClock_Config();
 800057c:	f000 f874 	bl	8000668 <SystemClock_Config>
  MX_GPIO_Init();
 8000580:	f000 fbbe 	bl	8000d00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000584:	f000 f952 	bl	800082c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000588:	f00a fb64 	bl	800ac54 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 800058c:	f000 f928 	bl	80007e0 <MX_SDIO_SD_Init>
  MX_DMA_Init();
 8000590:	f000 fb68 	bl	8000c64 <MX_DMA_Init>
  MX_SPI2_Init();
 8000594:	f000 f980 	bl	8000898 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000598:	f000 f9b4 	bl	8000904 <MX_TIM3_Init>
  MX_TIM4_Init();
 800059c:	f000 fa2c 	bl	80009f8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 fab8 	bl	8000b14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 fae0 	bl	8000b68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 fb08 	bl	8000bbc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005ac:	f000 fb30 	bl	8000c10 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80005b0:	f000 f8c4 	bl	800073c <MX_ADC1_Init>
  MX_UART4_Init();
 80005b4:	f000 fa84 	bl	8000ac0 <MX_UART4_Init>
  	  uint8_t motorId = 0xFE;
 80005b8:	23fe      	movs	r3, #254	; 0xfe
 80005ba:	763b      	strb	r3, [r7, #24]
  	  paramArray[0] = 0x03; //Starting adress da instruçao de ID
 80005bc:	2303      	movs	r3, #3
 80005be:	753b      	strb	r3, [r7, #20]
  	  paramArray[1] = 0x00; //novo ID (se mudar tem q mudar o uartbuf2 do sendInstruction)
 80005c0:	2300      	movs	r3, #0
 80005c2:	757b      	strb	r3, [r7, #21]
  	  //sendInstruction(0x03, paramArray, 2);  // set ID
  	  //motorId = 00;
  	  uint16_t pos1 = 1000;
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  	  uint16_t pos2 = 500;
 80005cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  	  uint16_t spd = 500;
 80005d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

  	  paramArray2[0] = 30;		//Goal position
 80005dc:	231e      	movs	r3, #30
 80005de:	733b      	strb	r3, [r7, #12]
  	  paramArray2[1] = pos1;		//Conferir endianess
 80005e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	737b      	strb	r3, [r7, #13]
  	  paramArray2[2] = pos1>>8;
 80005e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	73bb      	strb	r3, [r7, #14]
  	  paramArray2[3] = spd;
 80005f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	73fb      	strb	r3, [r7, #15]
  	  paramArray2[4] = spd>>8;
 80005fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	b29b      	uxth	r3, r3
 8000604:	b2db      	uxtb	r3, r3
 8000606:	743b      	strb	r3, [r7, #16]

  	  paramArray3[0] = 30;		//Goal position
 8000608:	231e      	movs	r3, #30
 800060a:	713b      	strb	r3, [r7, #4]
  	  paramArray3[1] = pos2;		//Conferir endianess
 800060c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000610:	b2db      	uxtb	r3, r3
 8000612:	717b      	strb	r3, [r7, #5]
  	  paramArray3[2] = pos2>>8;
 8000614:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	b29b      	uxth	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	71bb      	strb	r3, [r7, #6]
  	  paramArray3[3] = spd;
 8000620:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000624:	b2db      	uxtb	r3, r3
 8000626:	71fb      	strb	r3, [r7, #7]
  	  paramArray3[4] = spd>>8;
 8000628:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b29b      	uxth	r3, r3
 8000630:	b2db      	uxtb	r3, r3
 8000632:	723b      	strb	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sendInstruction(0x03, paramArray2, 5);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	f107 0218 	add.w	r2, r7, #24
 800063c:	4694      	mov	ip, r2
 800063e:	2205      	movs	r2, #5
 8000640:	4619      	mov	r1, r3
 8000642:	2003      	movs	r0, #3
 8000644:	f7ff ff42 	bl	80004cc <sendInstruction.0>
	  HAL_Delay(200);
 8000648:	20c8      	movs	r0, #200	; 0xc8
 800064a:	f001 f9e1 	bl	8001a10 <HAL_Delay>
	  sendInstruction(0x03, paramArray3, 5);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	f107 0218 	add.w	r2, r7, #24
 8000654:	4694      	mov	ip, r2
 8000656:	2205      	movs	r2, #5
 8000658:	4619      	mov	r1, r3
 800065a:	2003      	movs	r0, #3
 800065c:	f7ff ff36 	bl	80004cc <sendInstruction.0>
	  HAL_Delay(200);
 8000660:	20c8      	movs	r0, #200	; 0xc8
 8000662:	f001 f9d5 	bl	8001a10 <HAL_Delay>
	  sendInstruction(0x03, paramArray2, 5);
 8000666:	e7e5      	b.n	8000634 <main+0xc8>

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00b f812 	bl	800b6a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fd5a 	bl	80041a8 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 fbcd 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f003 ffbb 	bl	8004698 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000728:	f000 fbb6 	bl	8000e98 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_ADC1_Init+0x9c>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800075a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ADC1_Init+0x98>)
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <MX_ADC1_Init+0xa0>)
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC1_Init+0x98>)
 800078a:	2201      	movs	r2, #1
 800078c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_ADC1_Init+0x98>)
 800079e:	f001 f95b 	bl	8001a58 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 fb76 	bl	8000e98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_ADC1_Init+0x98>)
 80007be:	f001 f98f 	bl	8001ae0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 fb66 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000118 	.word	0x20000118
 80007d8:	40012000 	.word	0x40012000
 80007dc:	0f000001 	.word	0x0f000001

080007e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_SDIO_SD_Init+0x48>)
 80007e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_SDIO_SD_Init+0x44>)
 8000810:	f004 f962 	bl	8004ad8 <HAL_SD_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800081a:	f000 fb3d 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001c0 	.word	0x200001c0
 8000828:	40012c00 	.word	0x40012c00

0800082c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_SPI1_Init+0x64>)
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_SPI1_Init+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800083c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI1_Init+0x64>)
 8000858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI1_Init+0x64>)
 8000878:	220a      	movs	r2, #10
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_SPI1_Init+0x64>)
 800087e:	f004 fcdb 	bl	8005238 <HAL_SPI_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000888:	f000 fb06 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000244 	.word	0x20000244
 8000894:	40013000 	.word	0x40013000

08000898 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI2_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MX_SPI2_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_SPI2_Init+0x64>)
 80008a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SPI2_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI2_Init+0x64>)
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI2_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI2_Init+0x64>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_SPI2_Init+0x64>)
 80008ea:	f004 fca5 	bl	8005238 <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 fad0 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000029c 	.word	0x2000029c
 8000900:	40003800 	.word	0x40003800

08000904 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_TIM3_Init+0xec>)
 8000928:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <MX_TIM3_Init+0xf0>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_TIM3_Init+0xec>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_TIM3_Init+0xec>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_TIM3_Init+0xec>)
 800093a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_TIM3_Init+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_TIM3_Init+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800094c:	4828      	ldr	r0, [pc, #160]	; (80009f0 <MX_TIM3_Init+0xec>)
 800094e:	f004 fcfc 	bl	800534a <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 fa9e 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4619      	mov	r1, r3
 800096a:	4821      	ldr	r0, [pc, #132]	; (80009f0 <MX_TIM3_Init+0xec>)
 800096c:	f005 f84e 	bl	8005a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000976:	f000 fa8f 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097a:	2360      	movs	r3, #96	; 0x60
 800097c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <MX_TIM3_Init+0xec>)
 8000992:	f004 fd29 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800099c:	f000 fa7c 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2204      	movs	r2, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_TIM3_Init+0xec>)
 80009a8:	f004 fd1e 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009b2:	f000 fa71 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2208      	movs	r2, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_TIM3_Init+0xec>)
 80009be:	f004 fd13 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80009c8:	f000 fa66 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	220c      	movs	r2, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_TIM3_Init+0xec>)
 80009d4:	f004 fd08 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80009de:	f000 fa5b 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009e2:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_TIM3_Init+0xec>)
 80009e4:	f000 fc3a 	bl	800125c <HAL_TIM_MspPostInit>

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200002f4 	.word	0x200002f4
 80009f4:	40000400 	.word	0x40000400

080009f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <MX_TIM4_Init+0xc4>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a42:	f004 fc82 	bl	800534a <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 fa24 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a60:	f004 ffd4 	bl	8005a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a6a:	f000 fa15 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2208      	movs	r2, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a86:	f004 fcaf 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a90:	f000 fa02 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	220c      	movs	r2, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000a9c:	f004 fca4 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 f9f7 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_TIM4_Init+0xc0>)
 8000aac:	f000 fbd6 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000033c 	.word	0x2000033c
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_UART4_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000acc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ad0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_UART4_Init+0x4c>)
 8000af8:	f005 f804 	bl	8005b04 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f9c9 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000384 	.word	0x20000384
 8000b10:	40004c00 	.word	0x40004c00

08000b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b20:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <MX_USART1_UART_Init+0x50>)
 8000b22:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b38:	220c      	movs	r2, #12
 8000b3a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_USART1_UART_Init+0x48>)
 8000b4a:	f005 f828 	bl	8005b9e <HAL_HalfDuplex_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000b54:	f000 f9a0 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200003c8 	.word	0x200003c8
 8000b60:	40011000 	.word	0x40011000
 8000b64:	000186a0 	.word	0x000186a0

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b74:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <MX_USART2_UART_Init+0x50>)
 8000b76:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_USART2_UART_Init+0x48>)
 8000b9e:	f004 fffe 	bl	8005b9e <HAL_HalfDuplex_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000ba8:	f000 f976 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000040c 	.word	0x2000040c
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	000186a0 	.word	0x000186a0

08000bbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <MX_USART3_UART_Init+0x4c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bc8:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <MX_USART3_UART_Init+0x50>)
 8000bca:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000be0:	220c      	movs	r2, #12
 8000be2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_USART3_UART_Init+0x48>)
 8000bf2:	f004 ffd4 	bl	8005b9e <HAL_HalfDuplex_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8000bfc:	f000 f94c 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000450 	.word	0x20000450
 8000c08:	40004800 	.word	0x40004800
 8000c0c:	000186a0 	.word	0x000186a0

08000c10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <MX_USART6_UART_Init+0x4c>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 100000;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c1c:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <MX_USART6_UART_Init+0x50>)
 8000c1e:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c34:	220c      	movs	r2, #12
 8000c36:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USART6_UART_Init+0x48>)
 8000c46:	f004 ffaa 	bl	8005b9e <HAL_HalfDuplex_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8000c50:	f000 f922 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000494 	.word	0x20000494
 8000c5c:	40011400 	.word	0x40011400
 8000c60:	000186a0 	.word	0x000186a0

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_DMA_Init+0x98>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <MX_DMA_Init+0x98>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_DMA_Init+0x98>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_DMA_Init+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <MX_DMA_Init+0x98>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_DMA_Init+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	200e      	movs	r0, #14
 8000ca8:	f001 fa13 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cac:	200e      	movs	r0, #14
 8000cae:	f001 fa2c 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2011      	movs	r0, #17
 8000cb8:	f001 fa0b 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cbc:	2011      	movs	r0, #17
 8000cbe:	f001 fa24 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2038      	movs	r0, #56	; 0x38
 8000cc8:	f001 fa03 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ccc:	2038      	movs	r0, #56	; 0x38
 8000cce:	f001 fa1c 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2045      	movs	r0, #69	; 0x45
 8000cd8:	f001 f9fb 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cdc:	2045      	movs	r0, #69	; 0x45
 8000cde:	f001 fa14 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2046      	movs	r0, #70	; 0x46
 8000ce8:	f001 f9f3 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000cec:	2046      	movs	r0, #70	; 0x46
 8000cee:	f001 fa0c 	bl	800210a <HAL_NVIC_EnableIRQ>

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	4b59      	ldr	r3, [pc, #356]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a58      	ldr	r2, [pc, #352]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b56      	ldr	r3, [pc, #344]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a51      	ldr	r2, [pc, #324]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a4a      	ldr	r2, [pc, #296]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b44      	ldr	r3, [pc, #272]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a3c      	ldr	r2, [pc, #240]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a35      	ldr	r2, [pc, #212]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <MX_GPIO_Init+0x180>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000dc4:	482f      	ldr	r0, [pc, #188]	; (8000e84 <MX_GPIO_Init+0x184>)
 8000dc6:	f001 ff59 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_GPIO_Init+0x188>)
 8000de6:	f001 fdad 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <MX_GPIO_Init+0x18c>)
 8000e00:	f001 fda0 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e16:	2305      	movs	r3, #5
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481b      	ldr	r0, [pc, #108]	; (8000e90 <MX_GPIO_Init+0x190>)
 8000e22:	f001 fd8f 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000e26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_GPIO_Init+0x184>)
 8000e40:	f001 fd80 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_GPIO_Init+0x188>)
 8000e5a:	f001 fd73 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e62:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <MX_GPIO_Init+0x194>)
 8000e74:	f001 fd66 	bl	8002944 <HAL_GPIO_Init>

}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40021000 	.word	0x40021000

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <HAL_ADC_MspInit+0xd8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d156      	bne.n	8000fc4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_ADC_MspInit+0xdc>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <HAL_ADC_MspInit+0xdc>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_ADC_MspInit+0xdc>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <HAL_ADC_MspInit+0xdc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <HAL_ADC_MspInit+0xdc>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <HAL_ADC_MspInit+0xdc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BAT_Voltage_Pin;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f52:	2303      	movs	r3, #3
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_Voltage_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <HAL_ADC_MspInit+0xe0>)
 8000f62:	f001 fcef 	bl	8002944 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_ADC_MspInit+0xe8>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000faa:	f001 f8c9 	bl	8002140 <HAL_DMA_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000fb4:	f7ff ff70 	bl	8000e98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbe:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_ADC_MspInit+0xe4>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	20000160 	.word	0x20000160
 8000fdc:	40026410 	.word	0x40026410

08000fe0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <HAL_SD_MspInit+0xc0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d14a      	bne.n	8001098 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 800100c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_SD_MspInit+0xc4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001056:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001068:	230c      	movs	r3, #12
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <HAL_SD_MspInit+0xc8>)
 8001074:	f001 fc66 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001078:	2304      	movs	r3, #4
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001088:	230c      	movs	r3, #12
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <HAL_SD_MspInit+0xcc>)
 8001094:	f001 fc56 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a41      	ldr	r2, [pc, #260]	; (80011d4 <HAL_SPI_MspInit+0x124>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12c      	bne.n	800112c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a3f      	ldr	r2, [pc, #252]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 80010dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800110a:	23e0      	movs	r3, #224	; 0xe0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111a:	2305      	movs	r3, #5
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	482d      	ldr	r0, [pc, #180]	; (80011dc <HAL_SPI_MspInit+0x12c>)
 8001126:	f001 fc0d 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800112a:	e04f      	b.n	80011cc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <HAL_SPI_MspInit+0x130>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d14a      	bne.n	80011cc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_SPI_MspInit+0x128>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118a:	2304      	movs	r3, #4
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800119a:	2305      	movs	r3, #5
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <HAL_SPI_MspInit+0x134>)
 80011a6:	f001 fbcd 	bl	8002944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011aa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011bc:	2305      	movs	r3, #5
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <HAL_SPI_MspInit+0x138>)
 80011c8:	f001 fbbc 	bl	8002944 <HAL_GPIO_Init>
}
 80011cc:	bf00      	nop
 80011ce:	3730      	adds	r7, #48	; 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40003800 	.word	0x40003800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_TIM_PWM_MspInit+0x64>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10e      	bne.n	800121c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_TIM_PWM_MspInit+0x68>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_TIM_PWM_MspInit+0x68>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_TIM_PWM_MspInit+0x68>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800121a:	e012      	b.n	8001242 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_TIM_PWM_MspInit+0x6c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_PWM_MspInit+0x68>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_TIM_PWM_MspInit+0x68>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_PWM_MspInit+0x68>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40000400 	.word	0x40000400
 8001254:	40023800 	.word	0x40023800
 8001258:	40000800 	.word	0x40000800

0800125c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_TIM_MspPostInit+0xec>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d13c      	bne.n	80012f8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a2a      	ldr	r2, [pc, #168]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80012b6:	2313      	movs	r3, #19
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c6:	2302      	movs	r3, #2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	481f      	ldr	r0, [pc, #124]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 80012d2:	f001 fb37 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e6:	2302      	movs	r3, #2
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4818      	ldr	r0, [pc, #96]	; (8001354 <HAL_TIM_MspPostInit+0xf8>)
 80012f2:	f001 fb27 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012f6:	e023      	b.n	8001340 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_TIM_MspPostInit+0xfc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d11e      	bne.n	8001340 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800131e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001330:	2302      	movs	r3, #2
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 800133c:	f001 fb02 	bl	8002944 <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40000400 	.word	0x40000400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40000800 	.word	0x40000800

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b092      	sub	sp, #72	; 0x48
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a84      	ldr	r2, [pc, #528]	; (800158c <HAL_UART_MspInit+0x230>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d135      	bne.n	80013ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
 8001382:	4b83      	ldr	r3, [pc, #524]	; (8001590 <HAL_UART_MspInit+0x234>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a82      	ldr	r2, [pc, #520]	; (8001590 <HAL_UART_MspInit+0x234>)
 8001388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b80      	ldr	r3, [pc, #512]	; (8001590 <HAL_UART_MspInit+0x234>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
 8001398:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139e:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <HAL_UART_MspInit+0x234>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a7b      	ldr	r2, [pc, #492]	; (8001590 <HAL_UART_MspInit+0x234>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <HAL_UART_MspInit+0x234>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013c8:	2308      	movs	r3, #8
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d0:	4619      	mov	r1, r3
 80013d2:	4870      	ldr	r0, [pc, #448]	; (8001594 <HAL_UART_MspInit+0x238>)
 80013d4:	f001 fab6 	bl	8002944 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2034      	movs	r0, #52	; 0x34
 80013de:	f000 fe78 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013e2:	2034      	movs	r0, #52	; 0x34
 80013e4:	f000 fe91 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013e8:	e1b6      	b.n	8001758 <HAL_UART_MspInit+0x3fc>
  else if(huart->Instance==USART1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6a      	ldr	r2, [pc, #424]	; (8001598 <HAL_UART_MspInit+0x23c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d162      	bne.n	80014ba <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f8:	4b65      	ldr	r3, [pc, #404]	; (8001590 <HAL_UART_MspInit+0x234>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	4a64      	ldr	r2, [pc, #400]	; (8001590 <HAL_UART_MspInit+0x234>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	6453      	str	r3, [r2, #68]	; 0x44
 8001404:	4b62      	ldr	r3, [pc, #392]	; (8001590 <HAL_UART_MspInit+0x234>)
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <HAL_UART_MspInit+0x234>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a5d      	ldr	r2, [pc, #372]	; (8001590 <HAL_UART_MspInit+0x234>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_UART_MspInit+0x234>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800142c:	2340      	movs	r3, #64	; 0x40
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143c:	2307      	movs	r3, #7
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001444:	4619      	mov	r1, r3
 8001446:	4855      	ldr	r0, [pc, #340]	; (800159c <HAL_UART_MspInit+0x240>)
 8001448:	f001 fa7c 	bl	8002944 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800144c:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <HAL_UART_MspInit+0x244>)
 800144e:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_UART_MspInit+0x248>)
 8001450:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001454:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001458:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <HAL_UART_MspInit+0x244>)
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001474:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <HAL_UART_MspInit+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_UART_MspInit+0x244>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800148c:	4844      	ldr	r0, [pc, #272]	; (80015a0 <HAL_UART_MspInit+0x244>)
 800148e:	f000 fe57 	bl	8002140 <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001498:	f7ff fcfe 	bl	8000e98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a40      	ldr	r2, [pc, #256]	; (80015a0 <HAL_UART_MspInit+0x244>)
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
 80014a2:	4a3f      	ldr	r2, [pc, #252]	; (80015a0 <HAL_UART_MspInit+0x244>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2025      	movs	r0, #37	; 0x25
 80014ae:	f000 fe10 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014b2:	2025      	movs	r0, #37	; 0x25
 80014b4:	f000 fe29 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 80014b8:	e14e      	b.n	8001758 <HAL_UART_MspInit+0x3fc>
  else if(huart->Instance==USART2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a3a      	ldr	r2, [pc, #232]	; (80015a8 <HAL_UART_MspInit+0x24c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d179      	bne.n	80015b8 <HAL_UART_MspInit+0x25c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_UART_MspInit+0x234>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_UART_MspInit+0x234>)
 80014ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <HAL_UART_MspInit+0x234>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_UART_MspInit+0x234>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <HAL_UART_MspInit+0x234>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_UART_MspInit+0x234>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fc:	2304      	movs	r3, #4
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001504:	2301      	movs	r3, #1
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150c:	2307      	movs	r3, #7
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001514:	4619      	mov	r1, r3
 8001516:	4825      	ldr	r0, [pc, #148]	; (80015ac <HAL_UART_MspInit+0x250>)
 8001518:	f001 fa14 	bl	8002944 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_UART_MspInit+0x254>)
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_UART_MspInit+0x258>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001528:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_UART_MspInit+0x254>)
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x254>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800155c:	4814      	ldr	r0, [pc, #80]	; (80015b0 <HAL_UART_MspInit+0x254>)
 800155e:	f000 fdef 	bl	8002140 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x210>
      Error_Handler();
 8001568:	f7ff fc96 	bl	8000e98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_UART_MspInit+0x254>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2026      	movs	r0, #38	; 0x26
 800157e:	f000 fda8 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001582:	2026      	movs	r0, #38	; 0x26
 8001584:	f000 fdc1 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 8001588:	e0e6      	b.n	8001758 <HAL_UART_MspInit+0x3fc>
 800158a:	bf00      	nop
 800158c:	40004c00 	.word	0x40004c00
 8001590:	40023800 	.word	0x40023800
 8001594:	40020800 	.word	0x40020800
 8001598:	40011000 	.word	0x40011000
 800159c:	40020400 	.word	0x40020400
 80015a0:	200004d8 	.word	0x200004d8
 80015a4:	400264b8 	.word	0x400264b8
 80015a8:	40004400 	.word	0x40004400
 80015ac:	40020000 	.word	0x40020000
 80015b0:	20000538 	.word	0x20000538
 80015b4:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a68      	ldr	r2, [pc, #416]	; (8001760 <HAL_UART_MspInit+0x404>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d163      	bne.n	800168a <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_UART_MspInit+0x408>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a66      	ldr	r2, [pc, #408]	; (8001764 <HAL_UART_MspInit+0x408>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_UART_MspInit+0x408>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b60      	ldr	r3, [pc, #384]	; (8001764 <HAL_UART_MspInit+0x408>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a5f      	ldr	r2, [pc, #380]	; (8001764 <HAL_UART_MspInit+0x408>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_UART_MspInit+0x408>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001600:	2312      	movs	r3, #18
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160c:	2307      	movs	r3, #7
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001614:	4619      	mov	r1, r3
 8001616:	4854      	ldr	r0, [pc, #336]	; (8001768 <HAL_UART_MspInit+0x40c>)
 8001618:	f001 f994 	bl	8002944 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_UART_MspInit+0x410>)
 800161e:	4a54      	ldr	r2, [pc, #336]	; (8001770 <HAL_UART_MspInit+0x414>)
 8001620:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001622:	4b52      	ldr	r3, [pc, #328]	; (800176c <HAL_UART_MspInit+0x410>)
 8001624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001628:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_UART_MspInit+0x410>)
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b4e      	ldr	r3, [pc, #312]	; (800176c <HAL_UART_MspInit+0x410>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_UART_MspInit+0x410>)
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800163e:	4b4b      	ldr	r3, [pc, #300]	; (800176c <HAL_UART_MspInit+0x410>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001644:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_UART_MspInit+0x410>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_UART_MspInit+0x410>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_UART_MspInit+0x410>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_UART_MspInit+0x410>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800165c:	4843      	ldr	r0, [pc, #268]	; (800176c <HAL_UART_MspInit+0x410>)
 800165e:	f000 fd6f 	bl	8002140 <HAL_DMA_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_UART_MspInit+0x310>
      Error_Handler();
 8001668:	f7ff fc16 	bl	8000e98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3f      	ldr	r2, [pc, #252]	; (800176c <HAL_UART_MspInit+0x410>)
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <HAL_UART_MspInit+0x410>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2027      	movs	r0, #39	; 0x27
 800167e:	f000 fd28 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001682:	2027      	movs	r0, #39	; 0x27
 8001684:	f000 fd41 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 8001688:	e066      	b.n	8001758 <HAL_UART_MspInit+0x3fc>
  else if(huart->Instance==USART6)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a39      	ldr	r2, [pc, #228]	; (8001774 <HAL_UART_MspInit+0x418>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d161      	bne.n	8001758 <HAL_UART_MspInit+0x3fc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_UART_MspInit+0x408>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	4a31      	ldr	r2, [pc, #196]	; (8001764 <HAL_UART_MspInit+0x408>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	6453      	str	r3, [r2, #68]	; 0x44
 80016a4:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_UART_MspInit+0x408>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_UART_MspInit+0x408>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a2a      	ldr	r2, [pc, #168]	; (8001764 <HAL_UART_MspInit+0x408>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_UART_MspInit+0x408>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016cc:	2340      	movs	r3, #64	; 0x40
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016dc:	2308      	movs	r3, #8
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016e4:	4619      	mov	r1, r3
 80016e6:	4824      	ldr	r0, [pc, #144]	; (8001778 <HAL_UART_MspInit+0x41c>)
 80016e8:	f001 f92c 	bl	8002944 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_UART_MspInit+0x420>)
 80016ee:	4a24      	ldr	r2, [pc, #144]	; (8001780 <HAL_UART_MspInit+0x424>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80016f2:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_UART_MspInit+0x420>)
 80016f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_UART_MspInit+0x420>)
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_UART_MspInit+0x420>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_UART_MspInit+0x420>)
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_UART_MspInit+0x420>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_UART_MspInit+0x420>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x420>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_UART_MspInit+0x420>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x420>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <HAL_UART_MspInit+0x420>)
 800172e:	f000 fd07 	bl	8002140 <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0x3e0>
      Error_Handler();
 8001738:	f7ff fbae 	bl	8000e98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_UART_MspInit+0x420>)
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_UART_MspInit+0x420>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2047      	movs	r0, #71	; 0x47
 800174e:	f000 fcc0 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001752:	2047      	movs	r0, #71	; 0x47
 8001754:	f000 fcd9 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 8001758:	bf00      	nop
 800175a:	3748      	adds	r7, #72	; 0x48
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004800 	.word	0x40004800
 8001764:	40023800 	.word	0x40023800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	20000598 	.word	0x20000598
 8001770:	40026058 	.word	0x40026058
 8001774:	40011400 	.word	0x40011400
 8001778:	40020800 	.word	0x40020800
 800177c:	200005f8 	.word	0x200005f8
 8001780:	400264a0 	.word	0x400264a0

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 f8fe 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <DMA1_Stream3_IRQHandler+0x10>)
 80017de:	f000 fe47 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000598 	.word	0x20000598

080017ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <DMA1_Stream6_IRQHandler+0x10>)
 80017f2:	f000 fe3d 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000538 	.word	0x20000538

08001800 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <USART1_IRQHandler+0x10>)
 8001806:	f004 fa9d 	bl	8005d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200003c8 	.word	0x200003c8

08001814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USART2_IRQHandler+0x10>)
 800181a:	f004 fa93 	bl	8005d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000040c 	.word	0x2000040c

08001828 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <USART3_IRQHandler+0x10>)
 800182e:	f004 fa89 	bl	8005d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000450 	.word	0x20000450

0800183c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <UART4_IRQHandler+0x10>)
 8001842:	f004 fa7f 	bl	8005d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000384 	.word	0x20000384

08001850 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA2_Stream0_IRQHandler+0x10>)
 8001856:	f000 fe0b 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000160 	.word	0x20000160

08001864 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <OTG_FS_IRQHandler+0x10>)
 800186a:	f001 fb70 	bl	8002f4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20001b3c 	.word	0x20001b3c

08001878 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA2_Stream6_IRQHandler+0x10>)
 800187e:	f000 fdf7 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200005f8 	.word	0x200005f8

0800188c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA2_Stream7_IRQHandler+0x10>)
 8001892:	f000 fded 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200004d8 	.word	0x200004d8

080018a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART6_IRQHandler+0x10>)
 80018a6:	f004 fa4d 	bl	8005d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000494 	.word	0x20000494

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd7 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f009 fea7 	bl	800b658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7fe fe2f 	bl	800056c <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800191c:	0800b740 	.word	0x0800b740
  ldr r2, =_sbss
 8001920:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001924:	20002268 	.word	0x20002268

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fbb1 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff faa0 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fbc9 	bl	8002126 <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fb91 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000658 	.word	0x20000658

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000658 	.word	0x20000658

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e033      	b.n	8001ad6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fa3c 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9e:	f023 0302 	bic.w	r3, r3, #2
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f93a 	bl	8001d24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac6:	e001      	b.n	8001acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1c>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e105      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x228>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d925      	bls.n	8001b58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b1e      	subs	r3, #30
 8001b22:	2207      	movs	r2, #7
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	400a      	ands	r2, r1
 8001b30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68d9      	ldr	r1, [r3, #12]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	4603      	mov	r3, r0
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4403      	add	r3, r0
 8001b4a:	3b1e      	subs	r3, #30
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	e022      	b.n	8001b9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6919      	ldr	r1, [r3, #16]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	400a      	ands	r2, r1
 8001b7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4403      	add	r3, r0
 8001b94:	409a      	lsls	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d824      	bhi.n	8001bf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b05      	subs	r3, #5
 8001bb8:	221f      	movs	r2, #31
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	3b05      	subs	r3, #5
 8001be2:	fa00 f203 	lsl.w	r2, r0, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
 8001bee:	e04c      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d824      	bhi.n	8001c42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b23      	subs	r3, #35	; 0x23
 8001c0a:	221f      	movs	r2, #31
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43da      	mvns	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	400a      	ands	r2, r1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b23      	subs	r3, #35	; 0x23
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c40:	e023      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3b41      	subs	r3, #65	; 0x41
 8001c54:	221f      	movs	r2, #31
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	400a      	ands	r2, r1
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b41      	subs	r3, #65	; 0x41
 8001c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <HAL_ADC_ConfigChannel+0x234>)
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_ADC_ConfigChannel+0x238>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d109      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1cc>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_ADC_ConfigChannel+0x238>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d123      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x21e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0x1e6>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d11b      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d111      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_ADC_ConfigChannel+0x23c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_ADC_ConfigChannel+0x240>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	0c9a      	lsrs	r2, r3, #18
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf0:	e002      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f9      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40012300 	.word	0x40012300
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2c:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <ADC_Init+0x1f0>)
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	021a      	lsls	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	4a58      	ldr	r2, [pc, #352]	; (8001f18 <ADC_Init+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e00f      	b.n	8001e22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0202 	bic.w	r2, r2, #2
 8001e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7e1b      	ldrb	r3, [r3, #24]
 8001e3c:	005a      	lsls	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	035a      	lsls	r2, r3, #13
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	e007      	b.n	8001e98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	051a      	lsls	r2, r3, #20
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eda:	025a      	lsls	r2, r3, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6899      	ldr	r1, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	029a      	lsls	r2, r3, #10
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40012300 	.word	0x40012300
 8001f18:	0f000001 	.word	0x0f000001

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fc54 	bl	80019f8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e099      	b.n	8002290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	e00f      	b.n	800219e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217e:	f7ff fc3b 	bl	80019f8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b05      	cmp	r3, #5
 800218a:	d908      	bls.n	800219e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e078      	b.n	8002290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e8      	bne.n	800217e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_DMA_Init+0x158>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4313      	orrs	r3, r2
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0307 	bic.w	r3, r3, #7
 800221e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b04      	cmp	r3, #4
 8002230:	d117      	bne.n	8002262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fb01 	bl	800284c <DMA_CheckFifoParam>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225e:	2301      	movs	r3, #1
 8002260:	e016      	b.n	8002290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fab8 	bl	80027e0 <DMA_CalcBaseAndBitshift>
 8002270:	4603      	mov	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	f010803f 	.word	0xf010803f

0800229c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Start_IT+0x26>
 80022be:	2302      	movs	r3, #2
 80022c0:	e040      	b.n	8002344 <HAL_DMA_Start_IT+0xa8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d12f      	bne.n	8002336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fa4a 	bl	8002784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0216 	orr.w	r2, r2, #22
 800230a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e005      	b.n	8002342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fb4d 	bl	80019f8 <HAL_GetTick>
 800235e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d008      	beq.n	800237e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e052      	b.n	8002424 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0216 	bic.w	r2, r2, #22
 800238c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_DMA_Abort+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ce:	e013      	b.n	80023f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d0:	f7ff fb12 	bl	80019f8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d90c      	bls.n	80023f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2203      	movs	r2, #3
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e015      	b.n	8002424 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e4      	bne.n	80023d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	223f      	movs	r2, #63	; 0x3f
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00c      	b.n	8002464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2205      	movs	r2, #5
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800247c:	4b8e      	ldr	r3, [pc, #568]	; (80026b8 <HAL_DMA_IRQHandler+0x248>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a8e      	ldr	r2, [pc, #568]	; (80026bc <HAL_DMA_IRQHandler+0x24c>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0a9b      	lsrs	r3, r3, #10
 8002488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	2208      	movs	r2, #8
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2208      	movs	r2, #8
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d012      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2201      	movs	r2, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2204      	movs	r2, #4
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d012      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2204      	movs	r2, #4
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2210      	movs	r2, #16
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d043      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d03c      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2210      	movs	r2, #16
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d024      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
 800259e:	e01f      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0208 	bic.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2220      	movs	r2, #32
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 808f 	beq.w	8002710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8087 	beq.w	8002710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2220      	movs	r2, #32
 8002608:	409a      	lsls	r2, r3
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d136      	bne.n	8002688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0216 	bic.w	r2, r2, #22
 8002628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_DMA_IRQHandler+0x1da>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0208 	bic.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	223f      	movs	r2, #63	; 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07e      	beq.n	800277c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
        }
        return;
 8002686:	e079      	b.n	800277c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01d      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
 80026b4:	e02c      	b.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
 80026d0:	e01e      	b.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	2b00      	cmp	r3, #0
 8002716:	d032      	beq.n	800277e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d022      	beq.n	800276a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2205      	movs	r2, #5
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	d307      	bcc.n	8002758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f2      	bne.n	800273c <HAL_DMA_IRQHandler+0x2cc>
 8002756:	e000      	b.n	800275a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x30e>
        return;
 800277c:	bf00      	nop
    }
  }
}
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d108      	bne.n	80027c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027c2:	e007      	b.n	80027d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3b10      	subs	r3, #16
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <DMA_CalcBaseAndBitshift+0x64>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <DMA_CalcBaseAndBitshift+0x68>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d909      	bls.n	8002822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58
 8002820:	e007      	b.n	8002832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	aaaaaaab 	.word	0xaaaaaaab
 8002848:	0800b728 	.word	0x0800b728

0800284c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d856      	bhi.n	800291a <DMA_CheckFifoParam+0xce>
 800286c:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <DMA_CheckFifoParam+0x28>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	08002885 	.word	0x08002885
 8002878:	08002897 	.word	0x08002897
 800287c:	08002885 	.word	0x08002885
 8002880:	0800291b 	.word	0x0800291b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d046      	beq.n	800291e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e043      	b.n	800291e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800289e:	d140      	bne.n	8002922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e03d      	b.n	8002922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ae:	d121      	bne.n	80028f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d837      	bhi.n	8002926 <DMA_CheckFifoParam+0xda>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <DMA_CheckFifoParam+0x70>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d3 	.word	0x080028d3
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	080028e5 	.word	0x080028e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e030      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d025      	beq.n	800292a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e2:	e022      	b.n	800292a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028f2:	e01c      	b.n	800292e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d903      	bls.n	8002902 <DMA_CheckFifoParam+0xb6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002900:	e018      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      break;
 8002906:	e015      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e00b      	b.n	8002932 <DMA_CheckFifoParam+0xe6>
      break;
 800291a:	bf00      	nop
 800291c:	e00a      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e008      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
 8002924:	e006      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e004      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;   
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
    }
  } 
  
  return status; 
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e16b      	b.n	8002c38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 815a 	bne.w	8002c32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80b4 	beq.w	8002c32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <HAL_GPIO_Init+0x30c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a5f      	ldr	r2, [pc, #380]	; (8002c50 <HAL_GPIO_Init+0x30c>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_GPIO_Init+0x30c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_GPIO_Init+0x310>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_GPIO_Init+0x314>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a51      	ldr	r2, [pc, #324]	; (8002c5c <HAL_GPIO_Init+0x318>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	; (8002c60 <HAL_GPIO_Init+0x31c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4f      	ldr	r2, [pc, #316]	; (8002c64 <HAL_GPIO_Init+0x320>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x216>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x212>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4c      	ldr	r2, [pc, #304]	; (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x20e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x20a>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00e      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	e00c      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b52:	2306      	movs	r3, #6
 8002b54:	e00a      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b56:	2305      	movs	r3, #5
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x228>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4935      	ldr	r1, [pc, #212]	; (8002c54 <HAL_GPIO_Init+0x310>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bae:	4a32      	ldr	r2, [pc, #200]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c2c:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f ae90 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40021400 	.word	0x40021400
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40021c00 	.word	0x40021c00
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb0:	b08f      	sub	sp, #60	; 0x3c
 8002cb2:	af0a      	add	r7, sp, #40	; 0x28
 8002cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e10f      	b.n	8002ee0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f008 f99a 	bl	800b014 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fced 	bl	80076de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	687e      	ldr	r6, [r7, #4]
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d22:	1d33      	adds	r3, r6, #4
 8002d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d26:	6838      	ldr	r0, [r7, #0]
 8002d28:	f004 fbc4 	bl	80074b4 <USB_CoreInit>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0d0      	b.n	8002ee0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fcdb 	bl	8007700 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e04a      	b.n	8002de6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	333d      	adds	r3, #61	; 0x3d
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	333c      	adds	r3, #60	; 0x3c
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3344      	adds	r3, #68	; 0x44
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3340      	adds	r3, #64	; 0x40
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3348      	adds	r3, #72	; 0x48
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	334c      	adds	r3, #76	; 0x4c
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3354      	adds	r3, #84	; 0x54
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	3301      	adds	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3af      	bcc.n	8002d50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e044      	b.n	8002e80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3b5      	bcc.n	8002df6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	687e      	ldr	r6, [r7, #4]
 8002e92:	466d      	mov	r5, sp
 8002e94:	f106 0410 	add.w	r4, r6, #16
 8002e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea8:	1d33      	adds	r3, r6, #4
 8002eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	f004 fc73 	bl	8007798 <USB_DevInit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00d      	b.n	8002ee0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 fdc2 	bl	8008a62 <USB_DevDisconnect>

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ee8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_Start+0x1c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e020      	b.n	8002f46 <HAL_PCD_Start+0x5e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d109      	bne.n	8002f28 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d005      	beq.n	8002f28 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fbc5 	bl	80076bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f005 fd72 	bl	8008a20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f4e:	b590      	push	{r4, r7, lr}
 8002f50:	b08d      	sub	sp, #52	; 0x34
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f005 fe30 	bl	8008bca <USB_GetMode>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 848a 	bne.w	8003886 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f005 fd94 	bl	8008aa4 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8480 	beq.w	8003884 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f005 fd81 	bl	8008aa4 <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d107      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f002 0202 	and.w	r2, r2, #2
 8002fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 fd6f 	bl	8008aa4 <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d161      	bne.n	8003094 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0210 	bic.w	r2, r2, #16
 8002fde:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	0c5b      	lsrs	r3, r3, #17
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	2b02      	cmp	r3, #2
 800300a:	d124      	bne.n	8003056 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d035      	beq.n	8003084 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	6a38      	ldr	r0, [r7, #32]
 800302c:	f005 fba6 	bl	800877c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800303c:	441a      	add	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304e:	441a      	add	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	621a      	str	r2, [r3, #32]
 8003054:	e016      	b.n	8003084 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	0c5b      	lsrs	r3, r3, #17
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	2b06      	cmp	r3, #6
 8003060:	d110      	bne.n	8003084 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003068:	2208      	movs	r2, #8
 800306a:	4619      	mov	r1, r3
 800306c:	6a38      	ldr	r0, [r7, #32]
 800306e:	f005 fb85 	bl	800877c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800307e:	441a      	add	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0210 	orr.w	r2, r2, #16
 8003092:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f005 fd03 	bl	8008aa4 <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030a8:	f040 80a7 	bne.w	80031fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fd08 	bl	8008aca <USB_ReadDevAllOutEpInterrupt>
 80030ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030bc:	e099      	b.n	80031f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 808e 	beq.w	80031e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 fd2c 	bl	8008b32 <USB_ReadDevOutEPInterrupt>
 80030da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	461a      	mov	r2, r3
 80030f4:	2301      	movs	r3, #1
 80030f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fec2 	bl	8003e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	2308      	movs	r3, #8
 800311a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 ff98 	bl	8004054 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	2310      	movs	r3, #16
 800313e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d030      	beq.n	80031ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d109      	bne.n	800316a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003168:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	3304      	adds	r3, #4
 800317e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	78db      	ldrb	r3, [r3, #3]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d108      	bne.n	800319a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f008 f851 	bl	800b23c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a6:	461a      	mov	r2, r3
 80031a8:	2302      	movs	r3, #2
 80031aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c2:	461a      	mov	r2, r3
 80031c4:	2320      	movs	r3, #32
 80031c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031de:	461a      	mov	r2, r3
 80031e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	3301      	adds	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f af62 	bne.w	80030be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f005 fc50 	bl	8008aa4 <USB_ReadInterrupts>
 8003204:	4603      	mov	r3, r0
 8003206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800320e:	f040 80db 	bne.w	80033c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f005 fc71 	bl	8008afe <USB_ReadDevAllInEpInterrupt>
 800321c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003222:	e0cd      	b.n	80033c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80c2 	beq.w	80033b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f005 fc97 	bl	8008b6e <USB_ReadDevInEPInterrupt>
 8003240:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d057      	beq.n	80032fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	2201      	movs	r2, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43db      	mvns	r3, r3
 8003266:	69f9      	ldr	r1, [r7, #28]
 8003268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800326c:	4013      	ands	r3, r2
 800326e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327c:	461a      	mov	r2, r3
 800327e:	2301      	movs	r3, #1
 8003280:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d132      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334c      	adds	r3, #76	; 0x4c
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	3348      	adds	r3, #72	; 0x48
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4419      	add	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4403      	add	r3, r0
 80032be:	334c      	adds	r3, #76	; 0x4c
 80032c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d113      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x3a2>
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	3354      	adds	r3, #84	; 0x54
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e8:	461a      	mov	r2, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	f005 fc9e 	bl	8008c2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f007 ff1b 	bl	800b132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003312:	461a      	mov	r2, r3
 8003314:	2308      	movs	r3, #8
 8003316:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332e:	461a      	mov	r2, r3
 8003330:	2310      	movs	r3, #16
 8003332:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334a:	461a      	mov	r2, r3
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d023      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800335a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335c:	6a38      	ldr	r0, [r7, #32]
 800335e:	f004 fb7f 	bl	8007a60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3338      	adds	r3, #56	; 0x38
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	78db      	ldrb	r3, [r3, #3]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d108      	bne.n	8003390 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2200      	movs	r2, #0
 8003382:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f007 ff68 	bl	800b260 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	461a      	mov	r2, r3
 800339e:	2302      	movs	r3, #2
 80033a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fcdb 	bl	8003d6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	3301      	adds	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f47f af2e 	bne.w	8003224 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f005 fb69 	bl	8008aa4 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033dc:	d122      	bne.n	8003424 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d108      	bne.n	800340e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003404:	2100      	movs	r1, #0
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fec2 	bl	8004190 <HAL_PCDEx_LPM_Callback>
 800340c:	e002      	b.n	8003414 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f007 ff06 	bl	800b220 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f005 fb3b 	bl	8008aa4 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003438:	d112      	bne.n	8003460 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f007 fec2 	bl	800b1d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800345e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fb1d 	bl	8008aa4 <USB_ReadInterrupts>
 800346a:	4603      	mov	r3, r0
 800346c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003474:	f040 80b7 	bne.w	80035e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2110      	movs	r1, #16
 8003492:	4618      	mov	r0, r3
 8003494:	f004 fae4 	bl	8007a60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349c:	e046      	b.n	800352c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034aa:	461a      	mov	r2, r3
 80034ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c2:	0151      	lsls	r1, r2, #5
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	440a      	add	r2, r1
 80034c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034de:	461a      	mov	r2, r3
 80034e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f6:	0151      	lsls	r1, r2, #5
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	440a      	add	r2, r1
 80034fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003500:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003504:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003516:	0151      	lsls	r1, r2, #5
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	440a      	add	r2, r1
 800351c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003520:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003524:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	3301      	adds	r3, #1
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003532:	429a      	cmp	r2, r3
 8003534:	d3b3      	bcc.n	800349e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003544:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003548:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003562:	f043 030b 	orr.w	r3, r3, #11
 8003566:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003578:	f043 030b 	orr.w	r3, r3, #11
 800357c:	6453      	str	r3, [r2, #68]	; 0x44
 800357e:	e015      	b.n	80035ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003592:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003596:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a6:	f043 030b 	orr.w	r3, r3, #11
 80035aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035d0:	461a      	mov	r2, r3
 80035d2:	f005 fb2b 	bl	8008c2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 fa5a 	bl	8008aa4 <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d124      	bne.n	8003646 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f005 faf0 	bl	8008be6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f004 faa5 	bl	8007b5a <USB_GetDevSpeed>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681c      	ldr	r4, [r3, #0]
 800361c:	f001 fa28 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8003620:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	4620      	mov	r0, r4
 800362c:	f003 ffa4 	bl	8007578 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f007 fda6 	bl	800b182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003644:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f005 fa2a 	bl	8008aa4 <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d10a      	bne.n	8003670 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f007 fd83 	bl	800b166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f002 0208 	and.w	r2, r2, #8
 800366e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fa15 	bl	8008aa4 <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d122      	bne.n	80036ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
 8003694:	e014      	b.n	80036c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fb27 	bl	8003d08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3e5      	bcc.n	8003696 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 f9e8 	bl	8008aa4 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036de:	d13b      	bne.n	8003758 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e0:	2301      	movs	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
 80036e4:	e02b      	b.n	800373e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3340      	adds	r3, #64	; 0x40
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d115      	bne.n	8003738 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800370c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800370e:	2b00      	cmp	r3, #0
 8003710:	da12      	bge.n	8003738 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	333f      	adds	r3, #63	; 0x3f
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800372e:	b2db      	uxtb	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fae8 	bl	8003d08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	3301      	adds	r3, #1
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	429a      	cmp	r2, r3
 8003746:	d3ce      	bcc.n	80036e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f005 f9a1 	bl	8008aa4 <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376c:	d155      	bne.n	800381a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376e:	2301      	movs	r3, #1
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	e045      	b.n	8003800 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d12e      	bne.n	80037fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800379c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da2b      	bge.n	80037fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d121      	bne.n	80037fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f6:	6053      	str	r3, [r2, #4]
            break;
 80037f8:	e007      	b.n	800380a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	3301      	adds	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	429a      	cmp	r2, r3
 8003808:	d3b4      	bcc.n	8003774 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f005 f940 	bl	8008aa4 <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d10a      	bne.n	8003846 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f007 fd27 	bl	800b284 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f005 f92a 	bl	8008aa4 <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d115      	bne.n	8003886 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f007 fd17 	bl	800b2a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	e000      	b.n	8003886 <HAL_PCD_IRQHandler+0x938>
      return;
 8003884:	bf00      	nop
    }
  }
}
 8003886:	3734      	adds	r7, #52	; 0x34
 8003888:	46bd      	mov	sp, r7
 800388a:	bd90      	pop	{r4, r7, pc}

0800388c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_PCD_SetAddress+0x1a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e013      	b.n	80038ce <HAL_PCD_SetAddress+0x42>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f005 f888 	bl	80089d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	4608      	mov	r0, r1
 80038e0:	4611      	mov	r1, r2
 80038e2:	461a      	mov	r2, r3
 80038e4:	4603      	mov	r3, r0
 80038e6:	70fb      	strb	r3, [r7, #3]
 80038e8:	460b      	mov	r3, r1
 80038ea:	803b      	strh	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	da0f      	bge.n	800391c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	3338      	adds	r3, #56	; 0x38
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	705a      	strb	r2, [r3, #1]
 800391a:	e00f      	b.n	800393c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003948:	883a      	ldrh	r2, [r7, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	78ba      	ldrb	r2, [r7, #2]
 8003952:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003966:	78bb      	ldrb	r3, [r7, #2]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d102      	bne.n	8003972 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_PCD_EP_Open+0xaa>
 800397c:	2302      	movs	r3, #2
 800397e:	e00e      	b.n	800399e <HAL_PCD_EP_Open+0xc8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	4618      	mov	r0, r3
 8003990:	f004 f908 	bl	8007ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800399c:	7afb      	ldrb	r3, [r7, #11]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da0f      	bge.n	80039da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3338      	adds	r3, #56	; 0x38
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	705a      	strb	r2, [r3, #1]
 80039d8:	e00f      	b.n	80039fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_EP_Close+0x6e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e00e      	b.n	8003a32 <HAL_PCD_EP_Close+0x8c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 f946 	bl	8007cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	460b      	mov	r3, r1
 8003a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	f004 fc25 	bl	80082fc <USB_EP0StartXfer>
 8003ab2:	e008      	b.n	8003ac6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6979      	ldr	r1, [r7, #20]
 8003ac2:	f004 f9d3 	bl	8007e6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	3338      	adds	r3, #56	; 0x38
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d102      	bne.n	8003b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6979      	ldr	r1, [r7, #20]
 8003b72:	f004 fbc3 	bl	80082fc <USB_EP0StartXfer>
 8003b76:	e008      	b.n	8003b8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	f004 f971 	bl	8007e6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d901      	bls.n	8003bb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e050      	b.n	8003c54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0f      	bge.n	8003bda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3338      	adds	r3, #56	; 0x38
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00d      	b.n	8003bf6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	3304      	adds	r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_PCD_EP_SetStall+0x82>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e01e      	b.n	8003c54 <HAL_PCD_EP_SetStall+0xc0>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f004 fe01 	bl	800882c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	b2d9      	uxtb	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c44:	461a      	mov	r2, r3
 8003c46:	f004 fff1 	bl	8008c2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d901      	bls.n	8003c7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e042      	b.n	8003d00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da0f      	bge.n	8003ca2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3338      	adds	r3, #56	; 0x38
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	705a      	strb	r2, [r3, #1]
 8003ca0:	e00f      	b.n	8003cc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_PCD_EP_ClrStall+0x86>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e00e      	b.n	8003d00 <HAL_PCD_EP_ClrStall+0xa4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f004 fe09 	bl	8008908 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	da0c      	bge.n	8003d36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	f003 020f 	and.w	r2, r3, #15
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	3338      	adds	r3, #56	; 0x38
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	3304      	adds	r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e00c      	b.n	8003d50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 020f 	and.w	r2, r3, #15
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 fc28 	bl	80085ac <USB_EPStopXfer>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d60:	7afb      	ldrb	r3, [r7, #11]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b08a      	sub	sp, #40	; 0x28
 8003d6e:	af02      	add	r7, sp, #8
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	3338      	adds	r3, #56	; 0x38
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d901      	bls.n	8003da2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e06c      	b.n	8003e7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d902      	bls.n	8003dbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc6:	e02b      	b.n	8003e20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d902      	bls.n	8003de4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3303      	adds	r3, #3
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6919      	ldr	r1, [r3, #16]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4603      	mov	r3, r0
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f004 fc7c 	bl	8008700 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	441a      	add	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d809      	bhi.n	8003e4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d203      	bcs.n	8003e4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1be      	bne.n	8003dc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d811      	bhi.n	8003e7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e76:	4013      	ands	r3, r2
 8003e78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	333c      	adds	r3, #60	; 0x3c
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d17b      	bne.n	8003fb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d015      	beq.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4a61      	ldr	r2, [pc, #388]	; (800404c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	f240 80b9 	bls.w	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80b3 	beq.w	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e0a7      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	461a      	mov	r2, r3
 8003f08:	2320      	movs	r3, #32
 8003f0a:	6093      	str	r3, [r2, #8]
 8003f0c:	e098      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 8093 	bne.w	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4a4b      	ldr	r2, [pc, #300]	; (800404c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d90f      	bls.n	8003f42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	6093      	str	r3, [r2, #8]
 8003f40:	e07e      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	0159      	lsls	r1, r3, #5
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	440b      	add	r3, r1
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d114      	bne.n	8003fa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2101      	movs	r1, #1
 8003f90:	f004 fe4c 	bl	8008c2c <USB_EP0_OutStart>
 8003f94:	e006      	b.n	8003fa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f007 f8a6 	bl	800b0fc <HAL_PCD_DataOutStageCallback>
 8003fb0:	e046      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	4a26      	ldr	r2, [pc, #152]	; (8004050 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d124      	bne.n	8004004 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd6:	6093      	str	r3, [r2, #8]
 8003fd8:	e032      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f007 f87d 	bl	800b0fc <HAL_PCD_DataOutStageCallback>
 8004002:	e01d      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d114      	bne.n	8004034 <PCD_EP_OutXfrComplete_int+0x1b0>
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800402c:	461a      	mov	r2, r3
 800402e:	2100      	movs	r1, #0
 8004030:	f004 fdfc 	bl	8008c2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f007 f85e 	bl	800b0fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	4f54300a 	.word	0x4f54300a
 8004050:	4f54310a 	.word	0x4f54310a

08004054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	333c      	adds	r3, #60	; 0x3c
 800406c:	3304      	adds	r3, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a15      	ldr	r2, [pc, #84]	; (80040dc <PCD_EP_OutSetupPacket_int+0x88>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d90e      	bls.n	80040a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004090:	2b00      	cmp	r3, #0
 8004092:	d009      	beq.n	80040a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a0:	461a      	mov	r2, r3
 80040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f007 f815 	bl	800b0d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <PCD_EP_OutSetupPacket_int+0x88>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d90c      	bls.n	80040d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d108      	bne.n	80040d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040c8:	461a      	mov	r2, r3
 80040ca:	2101      	movs	r1, #1
 80040cc:	f004 fdae 	bl	8008c2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	4f54300a 	.word	0x4f54300a

080040e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
 80040ec:	4613      	mov	r3, r2
 80040ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d107      	bne.n	800410e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040fe:	883b      	ldrh	r3, [r7, #0]
 8004100:	0419      	lsls	r1, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	430a      	orrs	r2, r1
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
 800410c:	e028      	b.n	8004160 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]
 8004120:	e00d      	b.n	800413e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3340      	adds	r3, #64	; 0x40
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	3301      	adds	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	3b01      	subs	r3, #1
 8004144:	429a      	cmp	r2, r3
 8004146:	d3ec      	bcc.n	8004122 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004148:	883b      	ldrh	r3, [r7, #0]
 800414a:	0418      	lsls	r0, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	3b01      	subs	r3, #1
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	4302      	orrs	r2, r0
 8004158:	3340      	adds	r3, #64	; 0x40
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e267      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d075      	beq.n	80042b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c6:	4b88      	ldr	r3, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00c      	beq.n	80041ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d112      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b82      	ldr	r3, [pc, #520]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	4b7e      	ldr	r3, [pc, #504]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x108>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d157      	bne.n	80042b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e242      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x74>
 800420e:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6f      	ldr	r2, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6c      	ldr	r2, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 8004240:	4b69      	ldr	r3, [pc, #420]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a68      	ldr	r2, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a65      	ldr	r2, [pc, #404]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fd fbca 	bl	80019f8 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd fbc6 	bl	80019f8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e207      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xc0>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fd fbb6 	bl	80019f8 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd fbb2 	bl	80019f8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1f3      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xe8>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1c7      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_OscConfig+0x244>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fd fb6b 	bl	80019f8 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004326:	f7fd fb67 	bl	80019f8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1a8      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4925      	ldr	r1, [pc, #148]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x244>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fd fb4a 	bl	80019f8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004368:	f7fd fb46 	bl	80019f8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e187      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x248>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fd fb2a 	bl	80019f8 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a8:	f7fd fb26 	bl	80019f8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e167      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x200>
 80043c6:	e01b      	b.n	8004400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x248>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fd fb13 	bl	80019f8 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	e00e      	b.n	80043f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fd fb0f 	bl	80019f8 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d907      	bls.n	80043f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e150      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470000 	.word	0x42470000
 80043f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ea      	bne.n	80043d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8097 	beq.w	800453c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b81      	ldr	r3, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a7c      	ldr	r2, [pc, #496]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b7a      	ldr	r3, [pc, #488]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b77      	ldr	r3, [pc, #476]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d118      	bne.n	800447c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444a:	4b74      	ldr	r3, [pc, #464]	; (800461c <HAL_RCC_OscConfig+0x474>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a73      	ldr	r2, [pc, #460]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004456:	f7fd facf 	bl	80019f8 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445e:	f7fd facb 	bl	80019f8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e10c      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	4b6a      	ldr	r3, [pc, #424]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x2ea>
 8004484:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a63      	ldr	r2, [pc, #396]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	e01c      	b.n	80044cc <HAL_RCC_OscConfig+0x324>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x30c>
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x324>
 80044b4:	4b58      	ldr	r3, [pc, #352]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a57      	ldr	r2, [pc, #348]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	4b55      	ldr	r3, [pc, #340]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a54      	ldr	r2, [pc, #336]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fd fa90 	bl	80019f8 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fd fa8c 	bl	80019f8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0cb      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ee      	beq.n	80044dc <HAL_RCC_OscConfig+0x334>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004500:	f7fd fa7a 	bl	80019f8 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd fa76 	bl	80019f8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0b5      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ee      	bne.n	8004508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004530:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a38      	ldr	r2, [pc, #224]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a1 	beq.w	8004688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d05c      	beq.n	800460c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d141      	bne.n	80045de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fd fa4a 	bl	80019f8 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd fa46 	bl	80019f8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e087      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	3b01      	subs	r3, #1
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	491b      	ldr	r1, [pc, #108]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b6:	f7fd fa1f 	bl	80019f8 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045be:	f7fd fa1b 	bl	80019f8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e05c      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x416>
 80045dc:	e054      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd fa08 	bl	80019f8 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fa04 	bl	80019f8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e045      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x444>
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e038      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x4ec>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d028      	beq.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d121      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d11a      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0cc      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ac:	4b68      	ldr	r3, [pc, #416]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d90c      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a58      	ldr	r2, [pc, #352]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800470e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d044      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d119      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d003      	beq.n	8004756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004752:	2b03      	cmp	r3, #3
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e06f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e067      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4934      	ldr	r1, [pc, #208]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004788:	f7fd f936 	bl	80019f8 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fd f932 	bl	80019f8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e04f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d20c      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490a      	ldr	r1, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd f896 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00
 8004854:	40023800 	.word	0x40023800
 8004858:	0800b710 	.word	0x0800b710
 800485c:	20000000 	.word	0x20000000
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b094      	sub	sp, #80	; 0x50
 800486a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
 8004870:	2300      	movs	r3, #0
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004874:	2300      	movs	r3, #0
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 80e1 	bhi.w	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004896:	e0db      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800489c:	e0db      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80048a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048a2:	e0d8      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a4:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ae:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d063      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	099b      	lsrs	r3, r3, #6
 80048c0:	2200      	movs	r2, #0
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	2300      	movs	r3, #0
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
 80048d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	0159      	lsls	r1, r3, #5
 80048e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e8:	0150      	lsls	r0, r2, #5
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4621      	mov	r1, r4
 80048f0:	1a51      	subs	r1, r2, r1
 80048f2:	6139      	str	r1, [r7, #16]
 80048f4:	4629      	mov	r1, r5
 80048f6:	eb63 0301 	sbc.w	r3, r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	018b      	lsls	r3, r1, #6
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004912:	4651      	mov	r1, sl
 8004914:	018a      	lsls	r2, r1, #6
 8004916:	4651      	mov	r1, sl
 8004918:	ebb2 0801 	subs.w	r8, r2, r1
 800491c:	4659      	mov	r1, fp
 800491e:	eb63 0901 	sbc.w	r9, r3, r1
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800492e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004936:	4690      	mov	r8, r2
 8004938:	4699      	mov	r9, r3
 800493a:	4623      	mov	r3, r4
 800493c:	eb18 0303 	adds.w	r3, r8, r3
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	462b      	mov	r3, r5
 8004944:	eb49 0303 	adc.w	r3, r9, r3
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004956:	4629      	mov	r1, r5
 8004958:	024b      	lsls	r3, r1, #9
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004960:	4621      	mov	r1, r4
 8004962:	024a      	lsls	r2, r1, #9
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
 800496e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004974:	f7fb fc28 	bl	80001c8 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004980:	e058      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	2200      	movs	r2, #0
 800498a:	4618      	mov	r0, r3
 800498c:	4611      	mov	r1, r2
 800498e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	2300      	movs	r3, #0
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	f04f 0000 	mov.w	r0, #0
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ae:	0150      	lsls	r0, r2, #5
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4641      	mov	r1, r8
 80049b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049d4:	ebb2 040a 	subs.w	r4, r2, sl
 80049d8:	eb63 050b 	sbc.w	r5, r3, fp
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	464b      	mov	r3, r9
 80049f8:	eb45 0303 	adc.w	r3, r5, r3
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	028b      	lsls	r3, r1, #10
 8004a0e:	4621      	mov	r1, r4
 8004a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a14:	4621      	mov	r1, r4
 8004a16:	028a      	lsls	r2, r1, #10
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	61fa      	str	r2, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	f7fb fbce 	bl	80001c8 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4613      	mov	r3, r2
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3750      	adds	r7, #80	; 0x50
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	007a1200 	.word	0x007a1200

08004a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000000 	.word	0x20000000

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a8c:	f7ff fff0 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0a9b      	lsrs	r3, r3, #10
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	0800b720 	.word	0x0800b720

08004ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ab4:	f7ff ffdc 	bl	8004a70 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0b5b      	lsrs	r3, r3, #13
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	0800b720 	.word	0x0800b720

08004ad8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e022      	b.n	8004b30 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc fa6f 	bl	8000fe0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2203      	movs	r2, #3
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f814 	bl	8004b38 <HAL_SD_InitCard>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e00a      	b.n	8004b30 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b38:	b5b0      	push	{r4, r5, r7, lr}
 8004b3a:	b08e      	sub	sp, #56	; 0x38
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004b54:	2376      	movs	r3, #118	; 0x76
 8004b56:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681d      	ldr	r5, [r3, #0]
 8004b5c:	466c      	mov	r4, sp
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b70:	4628      	mov	r0, r5
 8004b72:	f002 f885 	bl	8006c80 <SDIO_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e04f      	b.n	8004c28 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004b88:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <HAL_SD_InitCard+0xf8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f002 f89f 	bl	8006cd6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_SD_InitCard+0xf8>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004b9e:	2002      	movs	r0, #2
 8004ba0:	f7fc ff36 	bl	8001a10 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fab9 	bl	800511c <SD_PowerON>
 8004baa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e02e      	b.n	8004c28 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9d8 	bl	8004f80 <SD_InitCard>
 8004bd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e01b      	b.n	8004c28 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f002 f8d2 	bl	8006da2 <SDMMC_CmdBlockLength>
 8004bfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00f      	beq.n	8004c26 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_SD_InitCard+0xfc>)
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c30:	422580a0 	.word	0x422580a0
 8004c34:	004005ff 	.word	0x004005ff

08004c38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c46:	0f9b      	lsrs	r3, r3, #30
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c52:	0e9b      	lsrs	r3, r3, #26
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c64:	0e1b      	lsrs	r3, r3, #24
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c98:	0d1b      	lsrs	r3, r3, #20
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cb6:	0bdb      	lsrs	r3, r3, #15
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc8:	0b9b      	lsrs	r3, r3, #14
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cda:	0b5b      	lsrs	r3, r3, #13
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cec:	0b1b      	lsrs	r3, r3, #12
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d163      	bne.n	8004dd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0c:	009a      	lsls	r2, r3, #2
 8004d0e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d12:	4013      	ands	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d18:	0f92      	lsrs	r2, r2, #30
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d24:	0edb      	lsrs	r3, r3, #27
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d36:	0e1b      	lsrs	r3, r3, #24
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d48:	0d5b      	lsrs	r3, r3, #21
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	0c9b      	lsrs	r3, r3, #18
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6c:	0bdb      	lsrs	r3, r3, #15
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	7e1b      	ldrb	r3, [r3, #24]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	3302      	adds	r3, #2
 8004d90:	2201      	movs	r2, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d9a:	fb03 f202 	mul.w	r2, r3, r2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	7a1b      	ldrb	r3, [r3, #8]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2201      	movs	r2, #1
 8004dae:	409a      	lsls	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004dbc:	0a52      	lsrs	r2, r2, #9
 8004dbe:	fb03 f202 	mul.w	r2, r3, r2
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8004dce:	e031      	b.n	8004e34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d11d      	bne.n	8004e14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	431a      	orrs	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	3301      	adds	r3, #1
 8004df4:	029a      	lsls	r2, r3, #10
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
 8004e12:	e00f      	b.n	8004e34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <HAL_SD_GetCardCSD+0x344>)
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e09d      	b.n	8004f70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e38:	0b9b      	lsrs	r3, r3, #14
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4a:	09db      	lsrs	r3, r3, #7
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	0fdb      	lsrs	r3, r3, #31
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	0f5b      	lsrs	r3, r3, #29
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	0e9b      	lsrs	r3, r3, #26
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	0d9b      	lsrs	r3, r3, #22
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	0d5b      	lsrs	r3, r3, #21
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	0bdb      	lsrs	r3, r3, #15
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	0b9b      	lsrs	r3, r3, #14
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	0b5b      	lsrs	r3, r3, #13
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	0b1b      	lsrs	r3, r3, #12
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	004005ff 	.word	0x004005ff

08004f80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f80:	b5b0      	push	{r4, r5, r7, lr}
 8004f82:	b094      	sub	sp, #80	; 0x50
 8004f84:	af04      	add	r7, sp, #16
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 feae 	bl	8006cf2 <SDIO_GetPowerState>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004fa0:	e0b8      	b.n	8005114 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d02f      	beq.n	800500a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f001 ffbe 	bl	8006f30 <SDMMC_CmdSendCID>
 8004fb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <SD_InitCard+0x40>
    {
      return errorstate;
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	e0a9      	b.n	8005114 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fed8 	bl	8006d7c <SDIO_GetResponse>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fecf 	bl	8006d7c <SDIO_GetResponse>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2108      	movs	r1, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 fec6 	bl	8006d7c <SDIO_GetResponse>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	210c      	movs	r1, #12
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 febd 	bl	8006d7c <SDIO_GetResponse>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	2b03      	cmp	r3, #3
 8005010:	d00d      	beq.n	800502e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f107 020e 	add.w	r2, r7, #14
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f001 ffc4 	bl	8006faa <SDMMC_CmdSetRelAdd>
 8005022:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <SD_InitCard+0xae>
    {
      return errorstate;
 800502a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502c:	e072      	b.n	8005114 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	2b03      	cmp	r3, #3
 8005034:	d036      	beq.n	80050a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005036:	89fb      	ldrh	r3, [r7, #14]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f001 ff8e 	bl	8006f6c <SDMMC_CmdSendCSD>
 8005050:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505a:	e05b      	b.n	8005114 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fe8a 	bl	8006d7c <SDIO_GetResponse>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2104      	movs	r1, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fe81 	bl	8006d7c <SDIO_GetResponse>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2108      	movs	r1, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fe78 	bl	8006d7c <SDIO_GetResponse>
 800508c:	4602      	mov	r2, r0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	210c      	movs	r1, #12
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fe6f 	bl	8006d7c <SDIO_GetResponse>
 800509e:	4602      	mov	r2, r0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2104      	movs	r1, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 fe66 	bl	8006d7c <SDIO_GetResponse>
 80050b0:	4603      	mov	r3, r0
 80050b2:	0d1a      	lsrs	r2, r3, #20
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fdba 	bl	8004c38 <HAL_SD_GetCardCSD>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050ce:	e021      	b.n	8005114 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	2200      	movs	r2, #0
 80050dc:	461c      	mov	r4, r3
 80050de:	4615      	mov	r5, r2
 80050e0:	4622      	mov	r2, r4
 80050e2:	462b      	mov	r3, r5
 80050e4:	4608      	mov	r0, r1
 80050e6:	f001 fe7e 	bl	8006de6 <SDMMC_CmdSelDesel>
 80050ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	e00e      	b.n	8005114 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	466c      	mov	r4, sp
 80050fe:	f103 0210 	add.w	r2, r3, #16
 8005102:	ca07      	ldmia	r2, {r0, r1, r2}
 8005104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005108:	3304      	adds	r3, #4
 800510a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800510c:	4628      	mov	r0, r5
 800510e:	f001 fdb7 	bl	8006c80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3740      	adds	r7, #64	; 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	bdb0      	pop	{r4, r5, r7, pc}

0800511c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fe79 	bl	8006e2c <SDMMC_CmdGoIdleState>
 800513a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	e072      	b.n	800522c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fe8c 	bl	8006e68 <SDMMC_CmdOperCond>
 8005150:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00d      	beq.n	8005174 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f001 fe62 	bl	8006e2c <SDMMC_CmdGoIdleState>
 8005168:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	e05b      	b.n	800522c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517e:	2b01      	cmp	r3, #1
 8005180:	d137      	bne.n	80051f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fe8c 	bl	8006ea6 <SDMMC_CmdAppCommand>
 800518e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02d      	beq.n	80051f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005196:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800519a:	e047      	b.n	800522c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fe7f 	bl	8006ea6 <SDMMC_CmdAppCommand>
 80051a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	e03b      	b.n	800522c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	491e      	ldr	r1, [pc, #120]	; (8005234 <SD_PowerON+0x118>)
 80051ba:	4618      	mov	r0, r3
 80051bc:	f001 fe95 	bl	8006eea <SDMMC_CmdAppOperCommand>
 80051c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051cc:	e02e      	b.n	800522c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 fdd1 	bl	8006d7c <SDIO_GetResponse>
 80051da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	0fdb      	lsrs	r3, r3, #31
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <SD_PowerON+0xcc>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <SD_PowerON+0xce>
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]

    count++;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d802      	bhi.n	8005202 <SD_PowerON+0xe6>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0cc      	beq.n	800519c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005208:	4293      	cmp	r3, r2
 800520a:	d902      	bls.n	8005212 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800520c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005210:	e00c      	b.n	800522c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
 8005222:	e002      	b.n	800522a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	c1100000 	.word	0xc1100000

08005238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07b      	b.n	8005342 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800525a:	d009      	beq.n	8005270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	61da      	str	r2, [r3, #28]
 8005262:	e005      	b.n	8005270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fb ff10 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	ea42 0103 	orr.w	r1, r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	0c1b      	lsrs	r3, r3, #16
 800530e:	f003 0104 	and.w	r1, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0210 	and.w	r2, r3, #16
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005330:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e041      	b.n	80053e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fb ff3b 	bl	80011ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3304      	adds	r3, #4
 8005386:	4619      	mov	r1, r3
 8005388:	4610      	mov	r0, r2
 800538a:	f000 f8ef 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005402:	2302      	movs	r3, #2
 8005404:	e0ae      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	f200 809f 	bhi.w	8005554 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005451 	.word	0x08005451
 8005420:	08005555 	.word	0x08005555
 8005424:	08005555 	.word	0x08005555
 8005428:	08005555 	.word	0x08005555
 800542c:	08005491 	.word	0x08005491
 8005430:	08005555 	.word	0x08005555
 8005434:	08005555 	.word	0x08005555
 8005438:	08005555 	.word	0x08005555
 800543c:	080054d3 	.word	0x080054d3
 8005440:	08005555 	.word	0x08005555
 8005444:	08005555 	.word	0x08005555
 8005448:	08005555 	.word	0x08005555
 800544c:	08005513 	.word	0x08005513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f928 	bl	80056ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0208 	orr.w	r2, r2, #8
 800546a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0204 	bic.w	r2, r2, #4
 800547a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	619a      	str	r2, [r3, #24]
      break;
 800548e:	e064      	b.n	800555a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f978 	bl	800578c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6999      	ldr	r1, [r3, #24]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	021a      	lsls	r2, r3, #8
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	619a      	str	r2, [r3, #24]
      break;
 80054d0:	e043      	b.n	800555a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f9cd 	bl	8005878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0208 	orr.w	r2, r2, #8
 80054ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0204 	bic.w	r2, r2, #4
 80054fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	61da      	str	r2, [r3, #28]
      break;
 8005510:	e023      	b.n	800555a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fa21 	bl	8005960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69d9      	ldr	r1, [r3, #28]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	021a      	lsls	r2, r3, #8
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
      break;
 8005552:	e002      	b.n	800555a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
      break;
 8005558:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a40      	ldr	r2, [pc, #256]	; (8005680 <TIM_Base_SetConfig+0x114>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a3d      	ldr	r2, [pc, #244]	; (8005684 <TIM_Base_SetConfig+0x118>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <TIM_Base_SetConfig+0x11c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3b      	ldr	r2, [pc, #236]	; (800568c <TIM_Base_SetConfig+0x120>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3a      	ldr	r2, [pc, #232]	; (8005690 <TIM_Base_SetConfig+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <TIM_Base_SetConfig+0x114>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d02b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d027      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <TIM_Base_SetConfig+0x118>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d023      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2b      	ldr	r2, [pc, #172]	; (8005688 <TIM_Base_SetConfig+0x11c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01f      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	; (800568c <TIM_Base_SetConfig+0x120>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a29      	ldr	r2, [pc, #164]	; (8005690 <TIM_Base_SetConfig+0x124>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d017      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a28      	ldr	r2, [pc, #160]	; (8005694 <TIM_Base_SetConfig+0x128>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a27      	ldr	r2, [pc, #156]	; (8005698 <TIM_Base_SetConfig+0x12c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a26      	ldr	r2, [pc, #152]	; (800569c <TIM_Base_SetConfig+0x130>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <TIM_Base_SetConfig+0x134>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <TIM_Base_SetConfig+0x138>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a23      	ldr	r2, [pc, #140]	; (80056a8 <TIM_Base_SetConfig+0x13c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d108      	bne.n	8005630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <TIM_Base_SetConfig+0x114>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <TIM_Base_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800
 80056a0:	40001800 	.word	0x40001800
 80056a4:	40001c00 	.word	0x40001c00
 80056a8:	40002000 	.word	0x40002000

080056ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 0302 	bic.w	r3, r3, #2
 80056f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a20      	ldr	r2, [pc, #128]	; (8005784 <TIM_OC1_SetConfig+0xd8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC1_SetConfig+0x64>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1f      	ldr	r2, [pc, #124]	; (8005788 <TIM_OC1_SetConfig+0xdc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10c      	bne.n	800572a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0308 	bic.w	r3, r3, #8
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <TIM_OC1_SetConfig+0xd8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC1_SetConfig+0x8e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <TIM_OC1_SetConfig+0xdc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d111      	bne.n	800575e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	621a      	str	r2, [r3, #32]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	40010000 	.word	0x40010000
 8005788:	40010400 	.word	0x40010400

0800578c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f023 0210 	bic.w	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a22      	ldr	r2, [pc, #136]	; (8005870 <TIM_OC2_SetConfig+0xe4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC2_SetConfig+0x68>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a21      	ldr	r2, [pc, #132]	; (8005874 <TIM_OC2_SetConfig+0xe8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10d      	bne.n	8005810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <TIM_OC2_SetConfig+0xe4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC2_SetConfig+0x94>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC2_SetConfig+0xe8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d113      	bne.n	8005848 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400

08005878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <TIM_OC3_SetConfig+0xe0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_OC3_SetConfig+0x66>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a20      	ldr	r2, [pc, #128]	; (800595c <TIM_OC3_SetConfig+0xe4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10d      	bne.n	80058fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a16      	ldr	r2, [pc, #88]	; (8005958 <TIM_OC3_SetConfig+0xe0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC3_SetConfig+0x92>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a15      	ldr	r2, [pc, #84]	; (800595c <TIM_OC3_SetConfig+0xe4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d113      	bne.n	8005932 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	621a      	str	r2, [r3, #32]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40010000 	.word	0x40010000
 800595c:	40010400 	.word	0x40010400

08005960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <TIM_OC4_SetConfig+0xa4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC4_SetConfig+0x68>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a11      	ldr	r2, [pc, #68]	; (8005a08 <TIM_OC4_SetConfig+0xa8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d109      	bne.n	80059dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	019b      	lsls	r3, r3, #6
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40010400 	.word	0x40010400

08005a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e05a      	b.n	8005ada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a21      	ldr	r2, [pc, #132]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d022      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a70:	d01d      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d018      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d10c      	bne.n	8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40001800 	.word	0x40001800

08005b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e03f      	b.n	8005b96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb fc16 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	; 0x24
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fe25 	bl	8006798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e047      	b.n	8005c40 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7fb fbc9 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2224      	movs	r2, #36	; 0x24
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fdd8 	bl	8006798 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005c06:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08c      	sub	sp, #48	; 0x30
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d165      	bne.n	8005d2e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_UART_Transmit_DMA+0x26>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e05e      	b.n	8005d30 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UART_Transmit_DMA+0x38>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e057      	b.n	8005d30 <HAL_UART_Transmit_DMA+0xe8>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2221      	movs	r2, #33	; 0x21
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_UART_Transmit_DMA+0xf0>)
 8005cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_UART_Transmit_DMA+0xf4>)
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	4a20      	ldr	r2, [pc, #128]	; (8005d40 <HAL_UART_Transmit_DMA+0xf8>)
 8005cbe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005cc8:	f107 0308 	add.w	r3, r7, #8
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	461a      	mov	r2, r3
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	f7fc fadc 	bl	800229c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	617b      	str	r3, [r7, #20]
   return(result);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d16:	627a      	str	r2, [r7, #36]	; 0x24
 8005d18:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6a39      	ldr	r1, [r7, #32]
 8005d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
  }
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	080062c9 	.word	0x080062c9
 8005d3c:	08006363 	.word	0x08006363
 8005d40:	0800637f 	.word	0x0800637f

08005d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b0ba      	sub	sp, #232	; 0xe8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_UART_IRQHandler+0x66>
 8005d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fc3c 	bl	8006620 <UART_Receive_IT>
      return;
 8005da8:	e256      	b.n	8006258 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80de 	beq.w	8005f70 <HAL_UART_IRQHandler+0x22c>
 8005db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80d1 	beq.w	8005f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_UART_IRQHandler+0xae>
 8005dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <HAL_UART_IRQHandler+0xd2>
 8005dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f043 0202 	orr.w	r2, r3, #2
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_UART_IRQHandler+0xf6>
 8005e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f043 0204 	orr.w	r2, r3, #4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <HAL_UART_IRQHandler+0x126>
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f043 0208 	orr.w	r2, r3, #8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 81ed 	beq.w	800624e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_UART_IRQHandler+0x14e>
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fbc7 	bl	8006620 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <HAL_UART_IRQHandler+0x17a>
 8005eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04f      	beq.n	8005f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 facf 	bl	8006462 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d141      	bne.n	8005f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3314      	adds	r3, #20
 8005efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1d9      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d013      	beq.n	8005f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	4a7d      	ldr	r2, [pc, #500]	; (8006120 <HAL_UART_IRQHandler+0x3dc>)
 8005f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fa7a 	bl	800242c <HAL_DMA_Abort_IT>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	e00e      	b.n	8005f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9a4 	bl	800629c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	e00a      	b.n	8005f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9a0 	bl	800629c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e006      	b.n	8005f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f99c 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f6a:	e170      	b.n	800624e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	bf00      	nop
    return;
 8005f6e:	e16e      	b.n	800624e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f040 814a 	bne.w	800620e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8143 	beq.w	800620e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 813c 	beq.w	800620e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	f040 80b4 	bne.w	8006124 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8140 	beq.w	8006252 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	f080 8139 	bcs.w	8006252 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff2:	f000 8088 	beq.w	8006106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800600c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800602e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800603a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1d9      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800606a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800606e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e1      	bne.n	8006042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3314      	adds	r3, #20
 8006084:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800608e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e3      	bne.n	800607e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d6:	f023 0310 	bic.w	r3, r3, #16
 80060da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e3      	bne.n	80060c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	4618      	mov	r0, r3
 8006102:	f7fc f923 	bl	800234c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610e:	b29b      	uxth	r3, r3
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	b29b      	uxth	r3, r3
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f8ca 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800611c:	e099      	b.n	8006252 <HAL_UART_IRQHandler+0x50e>
 800611e:	bf00      	nop
 8006120:	08006529 	.word	0x08006529
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800612c:	b29b      	uxth	r3, r3
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 808b 	beq.w	8006256 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8086 	beq.w	8006256 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800615a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800616e:	647a      	str	r2, [r7, #68]	; 0x44
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e3      	bne.n	800614a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	623b      	str	r3, [r7, #32]
   return(result);
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	f023 0301 	bic.w	r3, r3, #1
 8006198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3314      	adds	r3, #20
 80061a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061a6:	633a      	str	r2, [r7, #48]	; 0x30
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e3      	bne.n	8006182 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0310 	bic.w	r3, r3, #16
 80061de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061ec:	61fa      	str	r2, [r7, #28]
 80061ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	69b9      	ldr	r1, [r7, #24]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	617b      	str	r3, [r7, #20]
   return(result);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e3      	bne.n	80061c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f852 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800620c:	e023      	b.n	8006256 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800620e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <HAL_UART_IRQHandler+0x4ea>
 800621a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f992 	bl	8006550 <UART_Transmit_IT>
    return;
 800622c:	e014      	b.n	8006258 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00e      	beq.n	8006258 <HAL_UART_IRQHandler+0x514>
 800623a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9d2 	bl	80065f0 <UART_EndTransmit_IT>
    return;
 800624c:	e004      	b.n	8006258 <HAL_UART_IRQHandler+0x514>
    return;
 800624e:	bf00      	nop
 8006250:	e002      	b.n	8006258 <HAL_UART_IRQHandler+0x514>
      return;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <HAL_UART_IRQHandler+0x514>
      return;
 8006256:	bf00      	nop
  }
}
 8006258:	37e8      	adds	r7, #232	; 0xe8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop

08006260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b090      	sub	sp, #64	; 0x40
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d137      	bne.n	8006354 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	2200      	movs	r2, #0
 80062e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	623b      	str	r3, [r7, #32]
   return(result);
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3314      	adds	r3, #20
 8006308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800630a:	633a      	str	r2, [r7, #48]	; 0x30
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800631e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	60fb      	str	r3, [r7, #12]
   return(result);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
 8006336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800633e:	61fa      	str	r2, [r7, #28]
 8006340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69b9      	ldr	r1, [r7, #24]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	617b      	str	r3, [r7, #20]
   return(result);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006352:	e002      	b.n	800635a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006356:	f7ff ff83 	bl	8006260 <HAL_UART_TxCpltCallback>
}
 800635a:	bf00      	nop
 800635c:	3740      	adds	r7, #64	; 0x40
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff ff7f 	bl	8006274 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b21      	cmp	r3, #33	; 0x21
 80063b0:	d108      	bne.n	80063c4 <UART_DMAError+0x46>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063be:	68b8      	ldr	r0, [r7, #8]
 80063c0:	f000 f827 	bl	8006412 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	bf0c      	ite	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	2300      	movne	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b22      	cmp	r3, #34	; 0x22
 80063e4:	d108      	bne.n	80063f8 <UART_DMAError+0x7a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2200      	movs	r2, #0
 80063f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063f2:	68b8      	ldr	r0, [r7, #8]
 80063f4:	f000 f835 	bl	8006462 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	f043 0210 	orr.w	r2, r3, #16
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006404:	68b8      	ldr	r0, [r7, #8]
 8006406:	f7ff ff49 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006412:	b480      	push	{r7}
 8006414:	b089      	sub	sp, #36	; 0x24
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	330c      	adds	r3, #12
 8006420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	60bb      	str	r3, [r7, #8]
   return(result);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	330c      	adds	r3, #12
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	61ba      	str	r2, [r7, #24]
 800643c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6979      	ldr	r1, [r7, #20]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	613b      	str	r3, [r7, #16]
   return(result);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e5      	bne.n	800641a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006456:	bf00      	nop
 8006458:	3724      	adds	r7, #36	; 0x24
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006462:	b480      	push	{r7}
 8006464:	b095      	sub	sp, #84	; 0x54
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006480:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800648a:	643a      	str	r2, [r7, #64]	; 0x40
 800648c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e5      	bne.n	800649e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d119      	bne.n	800650e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0310 	bic.w	r3, r3, #16
 80064f0:	647b      	str	r3, [r7, #68]	; 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064fa:	61ba      	str	r2, [r7, #24]
 80064fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800651c:	bf00      	nop
 800651e:	3754      	adds	r7, #84	; 0x54
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7ff feaa 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b21      	cmp	r3, #33	; 0x21
 8006562:	d13e      	bne.n	80065e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d114      	bne.n	8006598 <UART_Transmit_IT+0x48>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d110      	bne.n	8006598 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800658a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	1c9a      	adds	r2, r3, #2
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	621a      	str	r2, [r3, #32]
 8006596:	e008      	b.n	80065aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6211      	str	r1, [r2, #32]
 80065a2:	781a      	ldrb	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4619      	mov	r1, r3
 80065b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10f      	bne.n	80065de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e000      	b.n	80065e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
  }
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006606:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fe25 	bl	8006260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	; 0x30
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b22      	cmp	r3, #34	; 0x22
 8006632:	f040 80ab 	bne.w	800678c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d117      	bne.n	8006670 <UART_Receive_IT+0x50>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d113      	bne.n	8006670 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	b29a      	uxth	r2, r3
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	1c9a      	adds	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	629a      	str	r2, [r3, #40]	; 0x28
 800666e:	e026      	b.n	80066be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006676:	2300      	movs	r3, #0
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d007      	beq.n	8006694 <UART_Receive_IT+0x74>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <UART_Receive_IT+0x82>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d106      	bne.n	80066a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b2da      	uxtb	r2, r3
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e008      	b.n	80066b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4619      	mov	r1, r3
 80066cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d15a      	bne.n	8006788 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0220 	bic.w	r2, r2, #32
 80066e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	2b01      	cmp	r3, #1
 8006710:	d135      	bne.n	800677e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006738:	623a      	str	r2, [r7, #32]
 800673a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61bb      	str	r3, [r7, #24]
   return(result);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b10      	cmp	r3, #16
 8006758:	d10a      	bne.n	8006770 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fd9a 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
 800677c:	e002      	b.n	8006784 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fd82 	bl	8006288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	e002      	b.n	800678e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3730      	adds	r7, #48	; 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800679c:	b0c0      	sub	sp, #256	; 0x100
 800679e:	af00      	add	r7, sp, #0
 80067a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	68d9      	ldr	r1, [r3, #12]
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	ea40 0301 	orr.w	r3, r0, r1
 80067c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067f0:	f021 010c 	bic.w	r1, r1, #12
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067fe:	430b      	orrs	r3, r1
 8006800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006812:	6999      	ldr	r1, [r3, #24]
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	ea40 0301 	orr.w	r3, r0, r1
 800681e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b8f      	ldr	r3, [pc, #572]	; (8006a64 <UART_SetConfig+0x2cc>)
 8006828:	429a      	cmp	r2, r3
 800682a:	d005      	beq.n	8006838 <UART_SetConfig+0xa0>
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b8d      	ldr	r3, [pc, #564]	; (8006a68 <UART_SetConfig+0x2d0>)
 8006834:	429a      	cmp	r2, r3
 8006836:	d104      	bne.n	8006842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fe f93a 	bl	8004ab0 <HAL_RCC_GetPCLK2Freq>
 800683c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006840:	e003      	b.n	800684a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006842:	f7fe f921 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8006846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	f040 810c 	bne.w	8006a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685c:	2200      	movs	r2, #0
 800685e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	1891      	adds	r1, r2, r2
 8006870:	65b9      	str	r1, [r7, #88]	; 0x58
 8006872:	415b      	adcs	r3, r3
 8006874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800687a:	4621      	mov	r1, r4
 800687c:	eb12 0801 	adds.w	r8, r2, r1
 8006880:	4629      	mov	r1, r5
 8006882:	eb43 0901 	adc.w	r9, r3, r1
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689a:	4690      	mov	r8, r2
 800689c:	4699      	mov	r9, r3
 800689e:	4623      	mov	r3, r4
 80068a0:	eb18 0303 	adds.w	r3, r8, r3
 80068a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068a8:	462b      	mov	r3, r5
 80068aa:	eb49 0303 	adc.w	r3, r9, r3
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068c6:	460b      	mov	r3, r1
 80068c8:	18db      	adds	r3, r3, r3
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
 80068cc:	4613      	mov	r3, r2
 80068ce:	eb42 0303 	adc.w	r3, r2, r3
 80068d2:	657b      	str	r3, [r7, #84]	; 0x54
 80068d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068dc:	f7f9 fc74 	bl	80001c8 <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4b61      	ldr	r3, [pc, #388]	; (8006a6c <UART_SetConfig+0x2d4>)
 80068e6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	011c      	lsls	r4, r3, #4
 80068ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	1891      	adds	r1, r2, r2
 8006906:	64b9      	str	r1, [r7, #72]	; 0x48
 8006908:	415b      	adcs	r3, r3
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006910:	4641      	mov	r1, r8
 8006912:	eb12 0a01 	adds.w	sl, r2, r1
 8006916:	4649      	mov	r1, r9
 8006918:	eb43 0b01 	adc.w	fp, r3, r1
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800692c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006930:	4692      	mov	sl, r2
 8006932:	469b      	mov	fp, r3
 8006934:	4643      	mov	r3, r8
 8006936:	eb1a 0303 	adds.w	r3, sl, r3
 800693a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800693e:	464b      	mov	r3, r9
 8006940:	eb4b 0303 	adc.w	r3, fp, r3
 8006944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800695c:	460b      	mov	r3, r1
 800695e:	18db      	adds	r3, r3, r3
 8006960:	643b      	str	r3, [r7, #64]	; 0x40
 8006962:	4613      	mov	r3, r2
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
 800696a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800696e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006972:	f7f9 fc29 	bl	80001c8 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4611      	mov	r1, r2
 800697c:	4b3b      	ldr	r3, [pc, #236]	; (8006a6c <UART_SetConfig+0x2d4>)
 800697e:	fba3 2301 	umull	r2, r3, r3, r1
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2264      	movs	r2, #100	; 0x64
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	1acb      	subs	r3, r1, r3
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006992:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <UART_SetConfig+0x2d4>)
 8006994:	fba3 2302 	umull	r2, r3, r3, r2
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a0:	441c      	add	r4, r3
 80069a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	1891      	adds	r1, r2, r2
 80069ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80069bc:	415b      	adcs	r3, r3
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069c4:	4641      	mov	r1, r8
 80069c6:	1851      	adds	r1, r2, r1
 80069c8:	6339      	str	r1, [r7, #48]	; 0x30
 80069ca:	4649      	mov	r1, r9
 80069cc:	414b      	adcs	r3, r1
 80069ce:	637b      	str	r3, [r7, #52]	; 0x34
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069dc:	4659      	mov	r1, fp
 80069de:	00cb      	lsls	r3, r1, #3
 80069e0:	4651      	mov	r1, sl
 80069e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e6:	4651      	mov	r1, sl
 80069e8:	00ca      	lsls	r2, r1, #3
 80069ea:	4610      	mov	r0, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	4642      	mov	r2, r8
 80069f2:	189b      	adds	r3, r3, r2
 80069f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f8:	464b      	mov	r3, r9
 80069fa:	460a      	mov	r2, r1
 80069fc:	eb42 0303 	adc.w	r3, r2, r3
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a18:	460b      	mov	r3, r1
 8006a1a:	18db      	adds	r3, r3, r3
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1e:	4613      	mov	r3, r2
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a2e:	f7f9 fbcb 	bl	80001c8 <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <UART_SetConfig+0x2d4>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3332      	adds	r3, #50	; 0x32
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <UART_SetConfig+0x2d4>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f003 0207 	and.w	r2, r3, #7
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4422      	add	r2, r4
 8006a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a60:	e105      	b.n	8006c6e <UART_SetConfig+0x4d6>
 8006a62:	bf00      	nop
 8006a64:	40011000 	.word	0x40011000
 8006a68:	40011400 	.word	0x40011400
 8006a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a82:	4642      	mov	r2, r8
 8006a84:	464b      	mov	r3, r9
 8006a86:	1891      	adds	r1, r2, r2
 8006a88:	6239      	str	r1, [r7, #32]
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a92:	4641      	mov	r1, r8
 8006a94:	1854      	adds	r4, r2, r1
 8006a96:	4649      	mov	r1, r9
 8006a98:	eb43 0501 	adc.w	r5, r3, r1
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	00eb      	lsls	r3, r5, #3
 8006aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aaa:	00e2      	lsls	r2, r4, #3
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	18e3      	adds	r3, r4, r3
 8006ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ab8:	464b      	mov	r3, r9
 8006aba:	eb45 0303 	adc.w	r3, r5, r3
 8006abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ade:	4629      	mov	r1, r5
 8006ae0:	008b      	lsls	r3, r1, #2
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ae8:	4621      	mov	r1, r4
 8006aea:	008a      	lsls	r2, r1, #2
 8006aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006af0:	f7f9 fb6a 	bl	80001c8 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b60      	ldr	r3, [pc, #384]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	61b9      	str	r1, [r7, #24]
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b24:	4641      	mov	r1, r8
 8006b26:	1851      	adds	r1, r2, r1
 8006b28:	6139      	str	r1, [r7, #16]
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	414b      	adcs	r3, r1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	00cb      	lsls	r3, r1, #3
 8006b40:	4651      	mov	r1, sl
 8006b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b46:	4651      	mov	r1, sl
 8006b48:	00ca      	lsls	r2, r1, #3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4642      	mov	r2, r8
 8006b52:	189b      	adds	r3, r3, r2
 8006b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b58:	464b      	mov	r3, r9
 8006b5a:	460a      	mov	r2, r1
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	008b      	lsls	r3, r1, #2
 8006b80:	4641      	mov	r1, r8
 8006b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b86:	4641      	mov	r1, r8
 8006b88:	008a      	lsls	r2, r1, #2
 8006b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b8e:	f7f9 fb1b 	bl	80001c8 <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4b39      	ldr	r3, [pc, #228]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006b98:	fba3 1302 	umull	r1, r3, r3, r2
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	2164      	movs	r1, #100	; 0x64
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	3332      	adds	r3, #50	; 0x32
 8006baa:	4a34      	ldr	r2, [pc, #208]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bb6:	441c      	add	r4, r3
 8006bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8006bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8006bc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	464b      	mov	r3, r9
 8006bca:	1891      	adds	r1, r2, r2
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	415b      	adcs	r3, r3
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bd6:	4641      	mov	r1, r8
 8006bd8:	1851      	adds	r1, r2, r1
 8006bda:	6039      	str	r1, [r7, #0]
 8006bdc:	4649      	mov	r1, r9
 8006bde:	414b      	adcs	r3, r1
 8006be0:	607b      	str	r3, [r7, #4]
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bee:	4659      	mov	r1, fp
 8006bf0:	00cb      	lsls	r3, r1, #3
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	00ca      	lsls	r2, r1, #3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	4642      	mov	r2, r8
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c08:	464b      	mov	r3, r9
 8006c0a:	460a      	mov	r2, r1
 8006c0c:	eb42 0303 	adc.w	r3, r2, r3
 8006c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c1c:	667a      	str	r2, [r7, #100]	; 0x64
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	f04f 0300 	mov.w	r3, #0
 8006c26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	008b      	lsls	r3, r1, #2
 8006c2e:	4641      	mov	r1, r8
 8006c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c34:	4641      	mov	r1, r8
 8006c36:	008a      	lsls	r2, r1, #2
 8006c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c3c:	f7f9 fac4 	bl	80001c8 <__aeabi_uldivmod>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006c46:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	2164      	movs	r1, #100	; 0x64
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	3332      	adds	r3, #50	; 0x32
 8006c58:	4a08      	ldr	r2, [pc, #32]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	f003 020f 	and.w	r2, r3, #15
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4422      	add	r2, r4
 8006c6c:	609a      	str	r2, [r3, #8]
}
 8006c6e:	bf00      	nop
 8006c70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c74:	46bd      	mov	sp, r7
 8006c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c7a:	bf00      	nop
 8006c7c:	51eb851f 	.word	0x51eb851f

08006c80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006c80:	b084      	sub	sp, #16
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	f107 001c 	add.w	r0, r7, #28
 8006c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006c96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006c98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006c9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006c9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006ca2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006ca6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006caa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	b004      	add	sp, #16
 8006cd4:	4770      	bx	lr

08006cd6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d2c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006d32:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006d38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006d48:	f023 030f 	bic.w	r3, r3, #15
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	b2db      	uxtb	r3, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3314      	adds	r3, #20
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4413      	add	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
}  
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b088      	sub	sp, #32
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006db0:	2310      	movs	r3, #16
 8006db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dc2:	f107 0308 	add.w	r3, r7, #8
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff ffa0 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd2:	2110      	movs	r1, #16
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f909 	bl	8006fec <SDMMC_GetCmdResp1>
 8006dda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	; 0x28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006df6:	2307      	movs	r3, #7
 8006df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e06:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e08:	f107 0310 	add.w	r3, r7, #16
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff ff7d 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e18:	2107      	movs	r1, #7
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f8e6 	bl	8006fec <SDMMC_GetCmdResp1>
 8006e20:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3728      	adds	r7, #40	; 0x28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff ff5c 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fb00 	bl	800745c <SDMMC_GetCmdError>
 8006e5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e76:	2308      	movs	r3, #8
 8006e78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e88:	f107 0308 	add.w	r3, r7, #8
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff ff3d 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fa93 	bl	80073c0 <SDMMC_GetCmdResp7>
 8006e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3720      	adds	r7, #32
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b088      	sub	sp, #32
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006eb4:	2337      	movs	r3, #55	; 0x37
 8006eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006eb8:	2340      	movs	r3, #64	; 0x40
 8006eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ff1e 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed6:	2137      	movs	r1, #55	; 0x37
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f887 	bl	8006fec <SDMMC_GetCmdResp1>
 8006ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b088      	sub	sp, #32
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006efe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006f00:	2329      	movs	r3, #41	; 0x29
 8006f02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f12:	f107 0308 	add.w	r3, r7, #8
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fef8 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f99a 	bl	8007258 <SDMMC_GetCmdResp3>
 8006f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f26:	69fb      	ldr	r3, [r7, #28]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f40:	23c0      	movs	r3, #192	; 0xc0
 8006f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff feda 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f934 	bl	80071c8 <SDMMC_GetCmdResp2>
 8006f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f62:	69fb      	ldr	r3, [r7, #28]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006f7a:	2309      	movs	r3, #9
 8006f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f7e:	23c0      	movs	r3, #192	; 0xc0
 8006f80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f8c:	f107 0308 	add.w	r3, r7, #8
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff febb 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f915 	bl	80071c8 <SDMMC_GetCmdResp2>
 8006f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b088      	sub	sp, #32
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fbc:	2340      	movs	r3, #64	; 0x40
 8006fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fe9c 	bl	8006d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	2103      	movs	r1, #3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f97a 	bl	80072d4 <SDMMC_GetCmdResp6>
 8006fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ffa:	4b70      	ldr	r3, [pc, #448]	; (80071bc <SDMMC_GetCmdResp1+0x1d0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a70      	ldr	r2, [pc, #448]	; (80071c0 <SDMMC_GetCmdResp1+0x1d4>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	0a5a      	lsrs	r2, r3, #9
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	fb02 f303 	mul.w	r3, r2, r3
 800700c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	1e5a      	subs	r2, r3, #1
 8007012:	61fa      	str	r2, [r7, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d102      	bne.n	800701e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800701c:	e0c9      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007022:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0ef      	beq.n	800700e <SDMMC_GetCmdResp1+0x22>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ea      	bne.n	800700e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2204      	movs	r2, #4
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800704a:	2304      	movs	r3, #4
 800704c:	e0b1      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007060:	2301      	movs	r3, #1
 8007062:	e0a6      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22c5      	movs	r2, #197	; 0xc5
 8007068:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fe79 	bl	8006d62 <SDIO_GetCommandResponse>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	4293      	cmp	r3, r2
 8007078:	d001      	beq.n	800707e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800707a:	2301      	movs	r3, #1
 800707c:	e099      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff fe7b 	bl	8006d7c <SDIO_GetResponse>
 8007086:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4b4e      	ldr	r3, [pc, #312]	; (80071c4 <SDMMC_GetCmdResp1+0x1d8>)
 800708c:	4013      	ands	r3, r2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007092:	2300      	movs	r3, #0
 8007094:	e08d      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	da02      	bge.n	80070a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800709c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070a0:	e087      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070ac:	2340      	movs	r3, #64	; 0x40
 80070ae:	e080      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	e079      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070cc:	e071      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80070d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070dc:	e069      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80070e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ec:	e061      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80070f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070fc:	e059      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800710c:	e051      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800711c:	e049      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800712c:	e041      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713c:	e039      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800714c:	e031      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007158:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800715c:	e029      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007168:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800716c:	e021      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800717c:	e019      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800718c:	e011      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800719c:	e009      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80071a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80071ac:	e001      	b.n	80071b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000000 	.word	0x20000000
 80071c0:	10624dd3 	.word	0x10624dd3
 80071c4:	fdffe008 	.word	0xfdffe008

080071c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071d0:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <SDMMC_GetCmdResp2+0x88>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <SDMMC_GetCmdResp2+0x8c>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	0a5b      	lsrs	r3, r3, #9
 80071dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e0:	fb02 f303 	mul.w	r3, r2, r3
 80071e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1e5a      	subs	r2, r3, #1
 80071ea:	60fa      	str	r2, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071f4:	e026      	b.n	8007244 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ef      	beq.n	80071e6 <SDMMC_GetCmdResp2+0x1e>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1ea      	bne.n	80071e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2204      	movs	r2, #4
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007222:	2304      	movs	r3, #4
 8007224:	e00e      	b.n	8007244 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007238:	2301      	movs	r3, #1
 800723a:	e003      	b.n	8007244 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	22c5      	movs	r2, #197	; 0xc5
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20000000 	.word	0x20000000
 8007254:	10624dd3 	.word	0x10624dd3

08007258 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007260:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <SDMMC_GetCmdResp3+0x74>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1a      	ldr	r2, [pc, #104]	; (80072d0 <SDMMC_GetCmdResp3+0x78>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0a5b      	lsrs	r3, r3, #9
 800726c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	60fa      	str	r2, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007284:	e01b      	b.n	80072be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0ef      	beq.n	8007276 <SDMMC_GetCmdResp3+0x1e>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1ea      	bne.n	8007276 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2204      	movs	r2, #4
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072b2:	2304      	movs	r3, #4
 80072b4:	e003      	b.n	80072be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	22c5      	movs	r2, #197	; 0xc5
 80072ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000000 	.word	0x20000000
 80072d0:	10624dd3 	.word	0x10624dd3

080072d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	460b      	mov	r3, r1
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072e2:	4b35      	ldr	r3, [pc, #212]	; (80073b8 <SDMMC_GetCmdResp6+0xe4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a35      	ldr	r2, [pc, #212]	; (80073bc <SDMMC_GetCmdResp6+0xe8>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	0a5b      	lsrs	r3, r3, #9
 80072ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	1e5a      	subs	r2, r3, #1
 80072fc:	61fa      	str	r2, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007302:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007306:	e052      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0ef      	beq.n	80072f8 <SDMMC_GetCmdResp6+0x24>
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1ea      	bne.n	80072f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2204      	movs	r2, #4
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007334:	2304      	movs	r3, #4
 8007336:	e03a      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800734a:	2301      	movs	r3, #1
 800734c:	e02f      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fd07 	bl	8006d62 <SDIO_GetCommandResponse>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	4293      	cmp	r3, r2
 800735c:	d001      	beq.n	8007362 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800735e:	2301      	movs	r3, #1
 8007360:	e025      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	22c5      	movs	r2, #197	; 0xc5
 8007366:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff fd06 	bl	8006d7c <SDIO_GetResponse>
 8007370:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007386:	2300      	movs	r3, #0
 8007388:	e011      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007398:	e009      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80073a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a8:	e001      	b.n	80073ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80073aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000000 	.word	0x20000000
 80073bc:	10624dd3 	.word	0x10624dd3

080073c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073c8:	4b22      	ldr	r3, [pc, #136]	; (8007454 <SDMMC_GetCmdResp7+0x94>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a22      	ldr	r2, [pc, #136]	; (8007458 <SDMMC_GetCmdResp7+0x98>)
 80073ce:	fba2 2303 	umull	r2, r3, r2, r3
 80073d2:	0a5b      	lsrs	r3, r3, #9
 80073d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d8:	fb02 f303 	mul.w	r3, r2, r3
 80073dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	60fa      	str	r2, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d102      	bne.n	80073ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073ec:	e02c      	b.n	8007448 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0ef      	beq.n	80073de <SDMMC_GetCmdResp7+0x1e>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ea      	bne.n	80073de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2204      	movs	r2, #4
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800741a:	2304      	movs	r3, #4
 800741c:	e014      	b.n	8007448 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007430:	2301      	movs	r3, #1
 8007432:	e009      	b.n	8007448 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2240      	movs	r2, #64	; 0x40
 8007444:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007446:	2300      	movs	r3, #0
  
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20000000 	.word	0x20000000
 8007458:	10624dd3 	.word	0x10624dd3

0800745c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <SDMMC_GetCmdError+0x50>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a11      	ldr	r2, [pc, #68]	; (80074b0 <SDMMC_GetCmdError+0x54>)
 800746a:	fba2 2303 	umull	r2, r3, r2, r3
 800746e:	0a5b      	lsrs	r3, r3, #9
 8007470:	f241 3288 	movw	r2, #5000	; 0x1388
 8007474:	fb02 f303 	mul.w	r3, r2, r3
 8007478:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	60fa      	str	r2, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007488:	e009      	b.n	800749e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f1      	beq.n	800747a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	22c5      	movs	r2, #197	; 0xc5
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000000 	.word	0x20000000
 80074b0:	10624dd3 	.word	0x10624dd3

080074b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074b4:	b084      	sub	sp, #16
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	f107 001c 	add.w	r0, r7, #28
 80074c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d122      	bne.n	8007512 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80074e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d105      	bne.n	8007506 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fbee 	bl	8008ce8 <USB_CoreReset>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
 8007510:	e01a      	b.n	8007548 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fbe2 	bl	8008ce8 <USB_CoreReset>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	639a      	str	r2, [r3, #56]	; 0x38
 800753a:	e005      	b.n	8007548 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	2b01      	cmp	r3, #1
 800754c:	d10b      	bne.n	8007566 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f043 0206 	orr.w	r2, r3, #6
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f043 0220 	orr.w	r2, r3, #32
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007572:	b004      	add	sp, #16
 8007574:	4770      	bx	lr
	...

08007578 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	2b02      	cmp	r3, #2
 800758a:	d165      	bne.n	8007658 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4a41      	ldr	r2, [pc, #260]	; (8007694 <USB_SetTurnaroundTime+0x11c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d906      	bls.n	80075a2 <USB_SetTurnaroundTime+0x2a>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4a40      	ldr	r2, [pc, #256]	; (8007698 <USB_SetTurnaroundTime+0x120>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d202      	bcs.n	80075a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800759c:	230f      	movs	r3, #15
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e062      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4a3c      	ldr	r2, [pc, #240]	; (8007698 <USB_SetTurnaroundTime+0x120>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d306      	bcc.n	80075b8 <USB_SetTurnaroundTime+0x40>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4a3b      	ldr	r2, [pc, #236]	; (800769c <USB_SetTurnaroundTime+0x124>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d202      	bcs.n	80075b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075b2:	230e      	movs	r3, #14
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e057      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4a38      	ldr	r2, [pc, #224]	; (800769c <USB_SetTurnaroundTime+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d306      	bcc.n	80075ce <USB_SetTurnaroundTime+0x56>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4a37      	ldr	r2, [pc, #220]	; (80076a0 <USB_SetTurnaroundTime+0x128>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d202      	bcs.n	80075ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075c8:	230d      	movs	r3, #13
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e04c      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4a33      	ldr	r2, [pc, #204]	; (80076a0 <USB_SetTurnaroundTime+0x128>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d306      	bcc.n	80075e4 <USB_SetTurnaroundTime+0x6c>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4a32      	ldr	r2, [pc, #200]	; (80076a4 <USB_SetTurnaroundTime+0x12c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d802      	bhi.n	80075e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80075de:	230c      	movs	r3, #12
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e041      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4a2f      	ldr	r2, [pc, #188]	; (80076a4 <USB_SetTurnaroundTime+0x12c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d906      	bls.n	80075fa <USB_SetTurnaroundTime+0x82>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	4a2e      	ldr	r2, [pc, #184]	; (80076a8 <USB_SetTurnaroundTime+0x130>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d802      	bhi.n	80075fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80075f4:	230b      	movs	r3, #11
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e036      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4a2a      	ldr	r2, [pc, #168]	; (80076a8 <USB_SetTurnaroundTime+0x130>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d906      	bls.n	8007610 <USB_SetTurnaroundTime+0x98>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4a29      	ldr	r2, [pc, #164]	; (80076ac <USB_SetTurnaroundTime+0x134>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d802      	bhi.n	8007610 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800760a:	230a      	movs	r3, #10
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	e02b      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4a26      	ldr	r2, [pc, #152]	; (80076ac <USB_SetTurnaroundTime+0x134>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d906      	bls.n	8007626 <USB_SetTurnaroundTime+0xae>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4a25      	ldr	r2, [pc, #148]	; (80076b0 <USB_SetTurnaroundTime+0x138>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d202      	bcs.n	8007626 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007620:	2309      	movs	r3, #9
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e020      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	4a21      	ldr	r2, [pc, #132]	; (80076b0 <USB_SetTurnaroundTime+0x138>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d306      	bcc.n	800763c <USB_SetTurnaroundTime+0xc4>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <USB_SetTurnaroundTime+0x13c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d802      	bhi.n	800763c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007636:	2308      	movs	r3, #8
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	e015      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <USB_SetTurnaroundTime+0x13c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d906      	bls.n	8007652 <USB_SetTurnaroundTime+0xda>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <USB_SetTurnaroundTime+0x140>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d202      	bcs.n	8007652 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800764c:	2307      	movs	r3, #7
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	e00a      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007652:	2306      	movs	r3, #6
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e007      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800765e:	2309      	movs	r3, #9
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e001      	b.n	8007668 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007664:	2309      	movs	r3, #9
 8007666:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	029b      	lsls	r3, r3, #10
 800767c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007680:	431a      	orrs	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	00d8acbf 	.word	0x00d8acbf
 8007698:	00e4e1c0 	.word	0x00e4e1c0
 800769c:	00f42400 	.word	0x00f42400
 80076a0:	01067380 	.word	0x01067380
 80076a4:	011a499f 	.word	0x011a499f
 80076a8:	01312cff 	.word	0x01312cff
 80076ac:	014ca43f 	.word	0x014ca43f
 80076b0:	016e3600 	.word	0x016e3600
 80076b4:	01a6ab1f 	.word	0x01a6ab1f
 80076b8:	01e84800 	.word	0x01e84800

080076bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f043 0201 	orr.w	r2, r3, #1
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f023 0201 	bic.w	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d115      	bne.n	800774e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800772e:	2001      	movs	r0, #1
 8007730:	f7fa f96e 	bl	8001a10 <HAL_Delay>
      ms++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fa45 	bl	8008bca <USB_GetMode>
 8007740:	4603      	mov	r3, r0
 8007742:	2b01      	cmp	r3, #1
 8007744:	d01e      	beq.n	8007784 <USB_SetCurrentMode+0x84>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b31      	cmp	r3, #49	; 0x31
 800774a:	d9f0      	bls.n	800772e <USB_SetCurrentMode+0x2e>
 800774c:	e01a      	b.n	8007784 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d115      	bne.n	8007780 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007760:	2001      	movs	r0, #1
 8007762:	f7fa f955 	bl	8001a10 <HAL_Delay>
      ms++;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fa2c 	bl	8008bca <USB_GetMode>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <USB_SetCurrentMode+0x84>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b31      	cmp	r3, #49	; 0x31
 800777c:	d9f0      	bls.n	8007760 <USB_SetCurrentMode+0x60>
 800777e:	e001      	b.n	8007784 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e005      	b.n	8007790 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b32      	cmp	r3, #50	; 0x32
 8007788:	d101      	bne.n	800778e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007798:	b084      	sub	sp, #16
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	e009      	b.n	80077cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	3340      	adds	r3, #64	; 0x40
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	2200      	movs	r2, #0
 80077c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3301      	adds	r3, #1
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b0e      	cmp	r3, #14
 80077d0:	d9f2      	bls.n	80077b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11c      	bne.n	8007812 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e6:	f043 0302 	orr.w	r3, r3, #2
 80077ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
 8007810:	e00b      	b.n	800782a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	461a      	mov	r2, r3
 8007832:	2300      	movs	r3, #0
 8007834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783c:	4619      	mov	r1, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	461a      	mov	r2, r3
 8007846:	680b      	ldr	r3, [r1, #0]
 8007848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10c      	bne.n	800786a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007856:	2100      	movs	r1, #0
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f965 	bl	8007b28 <USB_SetDevSpeed>
 800785e:	e008      	b.n	8007872 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007860:	2101      	movs	r1, #1
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f960 	bl	8007b28 <USB_SetDevSpeed>
 8007868:	e003      	b.n	8007872 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800786a:	2103      	movs	r1, #3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f95b 	bl	8007b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007872:	2110      	movs	r1, #16
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f8f3 	bl	8007a60 <USB_FlushTxFifo>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f91f 	bl	8007ac8 <USB_FlushRxFifo>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789a:	461a      	mov	r2, r3
 800789c:	2300      	movs	r3, #0
 800789e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a6:	461a      	mov	r2, r3
 80078a8:	2300      	movs	r3, #0
 80078aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	461a      	mov	r2, r3
 80078b4:	2300      	movs	r3, #0
 80078b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	e043      	b.n	8007946 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d4:	d118      	bne.n	8007908 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	461a      	mov	r2, r3
 80078ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	e013      	b.n	800791a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fe:	461a      	mov	r2, r3
 8007900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e008      	b.n	800791a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007926:	461a      	mov	r2, r3
 8007928:	2300      	movs	r3, #0
 800792a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	461a      	mov	r2, r3
 800793a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800793e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3301      	adds	r3, #1
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	429a      	cmp	r2, r3
 800794c:	d3b7      	bcc.n	80078be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e043      	b.n	80079dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796a:	d118      	bne.n	800799e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	461a      	mov	r2, r3
 8007980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e013      	b.n	80079b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	461a      	mov	r2, r3
 8007996:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e008      	b.n	80079b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	461a      	mov	r2, r3
 80079ac:	2300      	movs	r3, #0
 80079ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079bc:	461a      	mov	r2, r3
 80079be:	2300      	movs	r3, #0
 80079c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	461a      	mov	r2, r3
 80079d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3301      	adds	r3, #1
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d3b7      	bcc.n	8007954 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	f043 0210 	orr.w	r2, r3, #16
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <USB_DevInit+0x2c4>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f043 0208 	orr.w	r2, r3, #8
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d107      	bne.n	8007a4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a44:	f043 0304 	orr.w	r3, r3, #4
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a58:	b004      	add	sp, #16
 8007a5a:	4770      	bx	lr
 8007a5c:	803c3800 	.word	0x803c3800

08007a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a13      	ldr	r2, [pc, #76]	; (8007ac4 <USB_FlushTxFifo+0x64>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d901      	bls.n	8007a80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e01b      	b.n	8007ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	daf2      	bge.n	8007a6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	019b      	lsls	r3, r3, #6
 8007a90:	f043 0220 	orr.w	r2, r3, #32
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <USB_FlushTxFifo+0x64>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d901      	bls.n	8007aaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e006      	b.n	8007ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d0f0      	beq.n	8007a98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	00030d40 	.word	0x00030d40

08007ac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <USB_FlushRxFifo+0x5c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e018      	b.n	8007b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	daf2      	bge.n	8007ad4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2210      	movs	r2, #16
 8007af6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <USB_FlushRxFifo+0x5c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d901      	bls.n	8007b0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e006      	b.n	8007b18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d0f0      	beq.n	8007af8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	00030d40 	.word	0x00030d40

08007b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0306 	and.w	r3, r3, #6
 8007b72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
 8007b7e:	e00a      	b.n	8007b96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d002      	beq.n	8007b8c <USB_GetDevSpeed+0x32>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d102      	bne.n	8007b92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	75fb      	strb	r3, [r7, #23]
 8007b90:	e001      	b.n	8007b96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b92:	230f      	movs	r3, #15
 8007b94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d13a      	bne.n	8007c36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	68f9      	ldr	r1, [r7, #12]
 8007bda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bde:	4313      	orrs	r3, r2
 8007be0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d155      	bne.n	8007ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	059b      	lsls	r3, r3, #22
 8007c1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e036      	b.n	8007ca4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	2101      	movs	r1, #1
 8007c48:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4c:	041b      	lsls	r3, r3, #16
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d11a      	bne.n	8007ca4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	791b      	ldrb	r3, [r3, #4]
 8007c88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d161      	bne.n	8007d94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ce6:	d11f      	bne.n	8007d28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	2101      	movs	r1, #1
 8007d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	43db      	mvns	r3, r3
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d48:	4013      	ands	r3, r2
 8007d4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	0159      	lsls	r1, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	440b      	add	r3, r1
 8007d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <USB_DeactivateEndpoint+0x1b0>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	600b      	str	r3, [r1, #0]
 8007d92:	e060      	b.n	8007e56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007daa:	d11f      	bne.n	8007dec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007e02:	041b      	lsls	r3, r3, #16
 8007e04:	43db      	mvns	r3, r3
 8007e06:	68f9      	ldr	r1, [r7, #12]
 8007e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	2101      	movs	r1, #1
 8007e22:	fa01 f303 	lsl.w	r3, r1, r3
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e30:	4013      	ands	r3, r2
 8007e32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	0159      	lsls	r1, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	440b      	add	r3, r1
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <USB_DeactivateEndpoint+0x1b4>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	ec337800 	.word	0xec337800
 8007e68:	eff37800 	.word	0xeff37800

08007e6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	f040 815c 	bne.w	8008146 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d132      	bne.n	8007efc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	69fa      	ldr	r2, [r7, #28]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef4:	0cdb      	lsrs	r3, r3, #19
 8007ef6:	04db      	lsls	r3, r3, #19
 8007ef8:	6113      	str	r3, [r2, #16]
 8007efa:	e074      	b.n	8007fe6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	0151      	lsls	r1, r2, #5
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	440a      	add	r2, r1
 8007f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f16:	0cdb      	lsrs	r3, r3, #19
 8007f18:	04db      	lsls	r3, r3, #19
 8007f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	6999      	ldr	r1, [r3, #24]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	440b      	add	r3, r1
 8007f58:	1e59      	subs	r1, r3, #1
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f64:	4b9d      	ldr	r3, [pc, #628]	; (80081dc <USB_EPStartXfer+0x370>)
 8007f66:	400b      	ands	r3, r1
 8007f68:	69b9      	ldr	r1, [r7, #24]
 8007f6a:	0148      	lsls	r0, r1, #5
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	4401      	add	r1, r0
 8007f70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f74:	4313      	orrs	r3, r2
 8007f76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f8e:	69b9      	ldr	r1, [r7, #24]
 8007f90:	0148      	lsls	r0, r1, #5
 8007f92:	69f9      	ldr	r1, [r7, #28]
 8007f94:	4401      	add	r1, r0
 8007f96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	791b      	ldrb	r3, [r3, #4]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d11f      	bne.n	8007fe6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	0151      	lsls	r1, r2, #5
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	440a      	add	r2, r1
 8007fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007fc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fe4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d14b      	bne.n	8008084 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d009      	beq.n	8008008 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	461a      	mov	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	791b      	ldrb	r3, [r3, #4]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d128      	bne.n	8008062 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801c:	2b00      	cmp	r3, #0
 800801e:	d110      	bne.n	8008042 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800803a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	e00f      	b.n	8008062 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	440a      	add	r2, r1
 8008058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008060:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	0151      	lsls	r1, r2, #5
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	440a      	add	r2, r1
 8008078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008080:	6013      	str	r3, [r2, #0]
 8008082:	e133      	b.n	80082ec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	791b      	ldrb	r3, [r3, #4]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d015      	beq.n	80080d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 811b 	beq.w	80082ec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	2101      	movs	r1, #1
 80080c8:	fa01 f303 	lsl.w	r3, r1, r3
 80080cc:	69f9      	ldr	r1, [r7, #28]
 80080ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080d2:	4313      	orrs	r3, r2
 80080d4:	634b      	str	r3, [r1, #52]	; 0x34
 80080d6:	e109      	b.n	80082ec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d110      	bne.n	800810a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	0151      	lsls	r1, r2, #5
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	440a      	add	r2, r1
 80080fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008102:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	e00f      	b.n	800812a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008128:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6919      	ldr	r1, [r3, #16]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	b298      	uxth	r0, r3
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	4603      	mov	r3, r0
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fade 	bl	8008700 <USB_WritePacket>
 8008144:	e0d2      	b.n	80082ec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008160:	0cdb      	lsrs	r3, r3, #19
 8008162:	04db      	lsls	r3, r3, #19
 8008164:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008188:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d126      	bne.n	80081e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a8:	69b9      	ldr	r1, [r7, #24]
 80081aa:	0148      	lsls	r0, r1, #5
 80081ac:	69f9      	ldr	r1, [r7, #28]
 80081ae:	4401      	add	r1, r0
 80081b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081b4:	4313      	orrs	r3, r2
 80081b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081d6:	6113      	str	r3, [r2, #16]
 80081d8:	e03a      	b.n	8008250 <USB_EPStartXfer+0x3e4>
 80081da:	bf00      	nop
 80081dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	1e5a      	subs	r2, r3, #1
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	8afa      	ldrh	r2, [r7, #22]
 80081fc:	fb03 f202 	mul.w	r2, r3, r2
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	8afb      	ldrh	r3, [r7, #22]
 8008214:	04d9      	lsls	r1, r3, #19
 8008216:	4b38      	ldr	r3, [pc, #224]	; (80082f8 <USB_EPStartXfer+0x48c>)
 8008218:	400b      	ands	r3, r1
 800821a:	69b9      	ldr	r1, [r7, #24]
 800821c:	0148      	lsls	r0, r1, #5
 800821e:	69f9      	ldr	r1, [r7, #28]
 8008220:	4401      	add	r1, r0
 8008222:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008226:	4313      	orrs	r3, r2
 8008228:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008240:	69b9      	ldr	r1, [r7, #24]
 8008242:	0148      	lsls	r0, r1, #5
 8008244:	69f9      	ldr	r1, [r7, #28]
 8008246:	4401      	add	r1, r0
 8008248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800824c:	4313      	orrs	r3, r2
 800824e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d10d      	bne.n	8008272 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d009      	beq.n	8008272 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6919      	ldr	r1, [r3, #16]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826e:	460a      	mov	r2, r1
 8008270:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	791b      	ldrb	r3, [r3, #4]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d128      	bne.n	80082cc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008286:	2b00      	cmp	r3, #0
 8008288:	d110      	bne.n	80082ac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	e00f      	b.n	80082cc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3720      	adds	r7, #32
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	1ff80000 	.word	0x1ff80000

080082fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	4613      	mov	r3, r2
 8008308:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b01      	cmp	r3, #1
 800831a:	f040 80ce 	bne.w	80084ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d132      	bne.n	800838c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008344:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008348:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	440a      	add	r2, r1
 8008360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	0151      	lsls	r1, r2, #5
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	440a      	add	r2, r1
 8008380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008384:	0cdb      	lsrs	r3, r3, #19
 8008386:	04db      	lsls	r3, r3, #19
 8008388:	6113      	str	r3, [r2, #16]
 800838a:	e04e      	b.n	800842a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	0151      	lsls	r1, r2, #5
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	440a      	add	r2, r1
 80083a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a6:	0cdb      	lsrs	r3, r3, #19
 80083a8:	04db      	lsls	r3, r3, #19
 80083aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	699a      	ldr	r2, [r3, #24]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d903      	bls.n	80083e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	0151      	lsls	r1, r2, #5
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	440a      	add	r2, r1
 80083fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008402:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800841a:	6939      	ldr	r1, [r7, #16]
 800841c:	0148      	lsls	r0, r1, #5
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	4401      	add	r1, r0
 8008422:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008426:	4313      	orrs	r3, r2
 8008428:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d11e      	bne.n	800846e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008444:	461a      	mov	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e097      	b.n	800859e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	440a      	add	r2, r1
 8008484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008488:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800848c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 8083 	beq.w	800859e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	2101      	movs	r1, #1
 80084aa:	fa01 f303 	lsl.w	r3, r1, r3
 80084ae:	6979      	ldr	r1, [r7, #20]
 80084b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084b4:	4313      	orrs	r3, r2
 80084b6:	634b      	str	r3, [r1, #52]	; 0x34
 80084b8:	e071      	b.n	800859e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d4:	0cdb      	lsrs	r3, r3, #19
 80084d6:	04db      	lsls	r3, r3, #19
 80084d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854c:	6939      	ldr	r1, [r7, #16]
 800854e:	0148      	lsls	r0, r1, #5
 8008550:	6979      	ldr	r1, [r7, #20]
 8008552:	4401      	add	r1, r0
 8008554:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008558:	4313      	orrs	r3, r2
 800855a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d10d      	bne.n	800857e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6919      	ldr	r1, [r3, #16]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	460a      	mov	r2, r1
 800857c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	440a      	add	r2, r1
 8008594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800859c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d14a      	bne.n	8008660 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085e2:	f040 8086 	bne.w	80086f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	7812      	ldrb	r2, [r2, #0]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008608:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	440a      	add	r2, r1
 8008624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f242 7210 	movw	r2, #10000	; 0x2710
 800863a:	4293      	cmp	r3, r2
 800863c:	d902      	bls.n	8008644 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
          break;
 8008642:	e056      	b.n	80086f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800865c:	d0e7      	beq.n	800862e <USB_EPStopXfer+0x82>
 800865e:	e048      	b.n	80086f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	015a      	lsls	r2, r3, #5
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4413      	add	r3, r2
 800866a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008678:	d13b      	bne.n	80086f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	7812      	ldrb	r2, [r2, #0]
 800868e:	0151      	lsls	r1, r2, #5
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	440a      	add	r2, r1
 8008694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008698:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800869c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	7812      	ldrb	r2, [r2, #0]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d902      	bls.n	80086d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]
          break;
 80086d6:	e00c      	b.n	80086f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f0:	d0e7      	beq.n	80086c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4611      	mov	r1, r2
 800870c:	461a      	mov	r2, r3
 800870e:	460b      	mov	r3, r1
 8008710:	71fb      	strb	r3, [r7, #7]
 8008712:	4613      	mov	r3, r2
 8008714:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800871e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	d123      	bne.n	800876e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008726:	88bb      	ldrh	r3, [r7, #4]
 8008728:	3303      	adds	r3, #3
 800872a:	089b      	lsrs	r3, r3, #2
 800872c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800872e:	2300      	movs	r3, #0
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	e018      	b.n	8008766 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	031a      	lsls	r2, r3, #12
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	4413      	add	r3, r2
 800873c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008740:	461a      	mov	r2, r3
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	3301      	adds	r3, #1
 800874c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	3301      	adds	r3, #1
 8008752:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	3301      	adds	r3, #1
 8008758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	3301      	adds	r3, #1
 800875e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	3301      	adds	r3, #1
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	429a      	cmp	r2, r3
 800876c:	d3e2      	bcc.n	8008734 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3724      	adds	r7, #36	; 0x24
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800877c:	b480      	push	{r7}
 800877e:	b08b      	sub	sp, #44	; 0x2c
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	089b      	lsrs	r3, r3, #2
 8008796:	b29b      	uxth	r3, r3
 8008798:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087a2:	2300      	movs	r3, #0
 80087a4:	623b      	str	r3, [r7, #32]
 80087a6:	e014      	b.n	80087d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	3301      	adds	r3, #1
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	3301      	adds	r3, #1
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	3301      	adds	r3, #1
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	3301      	adds	r3, #1
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	3301      	adds	r3, #1
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d3e6      	bcc.n	80087a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087da:	8bfb      	ldrh	r3, [r7, #30]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01e      	beq.n	800881e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ea:	461a      	mov	r2, r3
 80087ec:	f107 0310 	add.w	r3, r7, #16
 80087f0:	6812      	ldr	r2, [r2, #0]
 80087f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008800:	b2da      	uxtb	r2, r3
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	701a      	strb	r2, [r3, #0]
      i++;
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	3301      	adds	r3, #1
 800880a:	623b      	str	r3, [r7, #32]
      pDest++;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	3301      	adds	r3, #1
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008812:	8bfb      	ldrh	r3, [r7, #30]
 8008814:	3b01      	subs	r3, #1
 8008816:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008818:	8bfb      	ldrh	r3, [r7, #30]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ea      	bne.n	80087f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008820:	4618      	mov	r0, r3
 8008822:	372c      	adds	r7, #44	; 0x2c
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	785b      	ldrb	r3, [r3, #1]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d12c      	bne.n	80088a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	db12      	blt.n	8008880 <USB_EPSetStall+0x54>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00f      	beq.n	8008880 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800887e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	e02b      	b.n	80088fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db12      	blt.n	80088da <USB_EPSetStall+0xae>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00f      	beq.n	80088da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d128      	bne.n	8008976 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008942:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	791b      	ldrb	r3, [r3, #4]
 8008948:	2b03      	cmp	r3, #3
 800894a:	d003      	beq.n	8008954 <USB_EPClearStall+0x4c>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	791b      	ldrb	r3, [r3, #4]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d138      	bne.n	80089c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	e027      	b.n	80089c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008994:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	791b      	ldrb	r3, [r3, #4]
 800899a:	2b03      	cmp	r3, #3
 800899c:	d003      	beq.n	80089a6 <USB_EPClearStall+0x9e>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	791b      	ldrb	r3, [r3, #4]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d10f      	bne.n	80089c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a08:	68f9      	ldr	r1, [r7, #12]
 8008a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a4e:	f023 0302 	bic.w	r3, r3, #2
 8008a52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008abc:	68fb      	ldr	r3, [r7, #12]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4013      	ands	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	0c1b      	lsrs	r3, r3, #16
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	b29b      	uxth	r3, r3
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b60:	68bb      	ldr	r3, [r7, #8]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b087      	sub	sp, #28
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b92:	78fb      	ldrb	r3, [r7, #3]
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9e:	01db      	lsls	r3, r3, #7
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b085      	sub	sp, #20
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c04:	f023 0307 	bic.w	r3, r3, #7
 8008c08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	460b      	mov	r3, r1
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	333c      	adds	r3, #60	; 0x3c
 8008c42:	3304      	adds	r3, #4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4a26      	ldr	r2, [pc, #152]	; (8008ce4 <USB_EP0_OutStart+0xb8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d90a      	bls.n	8008c66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c60:	d101      	bne.n	8008c66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e037      	b.n	8008cd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c94:	f043 0318 	orr.w	r3, r3, #24
 8008c98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008cac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d10f      	bne.n	8008cd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	4f54300a 	.word	0x4f54300a

08008ce8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a13      	ldr	r2, [pc, #76]	; (8008d4c <USB_CoreReset+0x64>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d901      	bls.n	8008d06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e01b      	b.n	8008d3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	daf2      	bge.n	8008cf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f043 0201 	orr.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <USB_CoreReset+0x64>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e006      	b.n	8008d3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d0f0      	beq.n	8008d1e <USB_CoreReset+0x36>

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	00030d40 	.word	0x00030d40

08008d50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d60:	f002 fc36 	bl	800b5d0 <USBD_static_malloc>
 8008d64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32b0      	adds	r2, #176	; 0xb0
 8008d76:	2100      	movs	r1, #0
 8008d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e0d4      	b.n	8008f2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d80:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d84:	2100      	movs	r1, #0
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f002 fc8a 	bl	800b6a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	32b0      	adds	r2, #176	; 0xb0
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	32b0      	adds	r2, #176	; 0xb0
 8008da6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7c1b      	ldrb	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d138      	bne.n	8008e2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008db8:	4b5e      	ldr	r3, [pc, #376]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008dba:	7819      	ldrb	r1, [r3, #0]
 8008dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f002 fae1 	bl	800b38a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008dc8:	4b5a      	ldr	r3, [pc, #360]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	3324      	adds	r3, #36	; 0x24
 8008dde:	2201      	movs	r2, #1
 8008de0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008de2:	4b55      	ldr	r3, [pc, #340]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008de4:	7819      	ldrb	r1, [r3, #0]
 8008de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dea:	2202      	movs	r2, #2
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f002 facc 	bl	800b38a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008df2:	4b51      	ldr	r3, [pc, #324]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	f003 020f 	and.w	r2, r3, #15
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e0e:	4b4b      	ldr	r3, [pc, #300]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 020f 	and.w	r2, r3, #15
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	3326      	adds	r3, #38	; 0x26
 8008e24:	2210      	movs	r2, #16
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e035      	b.n	8008e96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e2a:	4b42      	ldr	r3, [pc, #264]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008e2c:	7819      	ldrb	r1, [r3, #0]
 8008e2e:	2340      	movs	r3, #64	; 0x40
 8008e30:	2202      	movs	r2, #2
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f002 faa9 	bl	800b38a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e38:	4b3e      	ldr	r3, [pc, #248]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3324      	adds	r3, #36	; 0x24
 8008e4e:	2201      	movs	r2, #1
 8008e50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e52:	4b39      	ldr	r3, [pc, #228]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008e54:	7819      	ldrb	r1, [r3, #0]
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	2202      	movs	r2, #2
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f002 fa95 	bl	800b38a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e60:	4b35      	ldr	r3, [pc, #212]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e78:	2201      	movs	r2, #1
 8008e7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e7c:	4b2f      	ldr	r3, [pc, #188]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 020f 	and.w	r2, r3, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	3326      	adds	r3, #38	; 0x26
 8008e92:	2210      	movs	r2, #16
 8008e94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e96:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008e98:	7819      	ldrb	r1, [r3, #0]
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f002 fa73 	bl	800b38a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008ea4:	4b25      	ldr	r3, [pc, #148]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3324      	adds	r3, #36	; 0x24
 8008eba:	2201      	movs	r2, #1
 8008ebc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	33b0      	adds	r3, #176	; 0xb0
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e018      	b.n	8008f2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	7c1b      	ldrb	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f00:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f002 fb2a 	bl	800b568 <USBD_LL_PrepareReceive>
 8008f14:	e008      	b.n	8008f28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f16:	4b08      	ldr	r3, [pc, #32]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008f18:	7819      	ldrb	r1, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f002 fb20 	bl	800b568 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000093 	.word	0x20000093
 8008f38:	20000094 	.word	0x20000094
 8008f3c:	20000095 	.word	0x20000095

08008f40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008f4c:	4b3a      	ldr	r3, [pc, #232]	; (8009038 <USBD_CDC_DeInit+0xf8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f002 fa3f 	bl	800b3d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008f58:	4b37      	ldr	r3, [pc, #220]	; (8009038 <USBD_CDC_DeInit+0xf8>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	3324      	adds	r3, #36	; 0x24
 8008f6e:	2200      	movs	r2, #0
 8008f70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008f72:	4b32      	ldr	r3, [pc, #200]	; (800903c <USBD_CDC_DeInit+0xfc>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f002 fa2c 	bl	800b3d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f7e:	4b2f      	ldr	r3, [pc, #188]	; (800903c <USBD_CDC_DeInit+0xfc>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 020f 	and.w	r2, r3, #15
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f96:	2200      	movs	r2, #0
 8008f98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f9a:	4b29      	ldr	r3, [pc, #164]	; (8009040 <USBD_CDC_DeInit+0x100>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f002 fa18 	bl	800b3d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008fa6:	4b26      	ldr	r3, [pc, #152]	; (8009040 <USBD_CDC_DeInit+0x100>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3324      	adds	r3, #36	; 0x24
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008fc0:	4b1f      	ldr	r3, [pc, #124]	; (8009040 <USBD_CDC_DeInit+0x100>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3326      	adds	r3, #38	; 0x26
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	32b0      	adds	r2, #176	; 0xb0
 8008fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01f      	beq.n	800902c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	33b0      	adds	r3, #176	; 0xb0
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32b0      	adds	r2, #176	; 0xb0
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	4618      	mov	r0, r3
 8009010:	f002 faec 	bl	800b5ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32b0      	adds	r2, #176	; 0xb0
 800901e:	2100      	movs	r1, #0
 8009020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000093 	.word	0x20000093
 800903c:	20000094 	.word	0x20000094
 8009040:	20000095 	.word	0x20000095

08009044 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	32b0      	adds	r2, #176	; 0xb0
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009070:	2303      	movs	r3, #3
 8009072:	e0bf      	b.n	80091f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800907c:	2b00      	cmp	r3, #0
 800907e:	d050      	beq.n	8009122 <USBD_CDC_Setup+0xde>
 8009080:	2b20      	cmp	r3, #32
 8009082:	f040 80af 	bne.w	80091e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	88db      	ldrh	r3, [r3, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d03a      	beq.n	8009104 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	b25b      	sxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	da1b      	bge.n	80090d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	33b0      	adds	r3, #176	; 0xb0
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80090ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	88d2      	ldrh	r2, [r2, #6]
 80090b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	88db      	ldrh	r3, [r3, #6]
 80090ba:	2b07      	cmp	r3, #7
 80090bc:	bf28      	it	cs
 80090be:	2307      	movcs	r3, #7
 80090c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	89fa      	ldrh	r2, [r7, #14]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fd43 	bl	800ab54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80090ce:	e090      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	785a      	ldrb	r2, [r3, #1]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	88db      	ldrh	r3, [r3, #6]
 80090de:	2b3f      	cmp	r3, #63	; 0x3f
 80090e0:	d803      	bhi.n	80090ea <USBD_CDC_Setup+0xa6>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	88db      	ldrh	r3, [r3, #6]
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	e000      	b.n	80090ec <USBD_CDC_Setup+0xa8>
 80090ea:	2240      	movs	r2, #64	; 0x40
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80090f2:	6939      	ldr	r1, [r7, #16]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80090fa:	461a      	mov	r2, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fd55 	bl	800abac <USBD_CtlPrepareRx>
      break;
 8009102:	e076      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	33b0      	adds	r3, #176	; 0xb0
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	7850      	ldrb	r0, [r2, #1]
 800911a:	2200      	movs	r2, #0
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	4798      	blx	r3
      break;
 8009120:	e067      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b0b      	cmp	r3, #11
 8009128:	d851      	bhi.n	80091ce <USBD_CDC_Setup+0x18a>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <USBD_CDC_Setup+0xec>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009161 	.word	0x08009161
 8009134:	080091dd 	.word	0x080091dd
 8009138:	080091cf 	.word	0x080091cf
 800913c:	080091cf 	.word	0x080091cf
 8009140:	080091cf 	.word	0x080091cf
 8009144:	080091cf 	.word	0x080091cf
 8009148:	080091cf 	.word	0x080091cf
 800914c:	080091cf 	.word	0x080091cf
 8009150:	080091cf 	.word	0x080091cf
 8009154:	080091cf 	.word	0x080091cf
 8009158:	0800918b 	.word	0x0800918b
 800915c:	080091b5 	.word	0x080091b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b03      	cmp	r3, #3
 800916a:	d107      	bne.n	800917c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800916c:	f107 030a 	add.w	r3, r7, #10
 8009170:	2202      	movs	r2, #2
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fced 	bl	800ab54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800917a:	e032      	b.n	80091e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fc77 	bl	800aa72 <USBD_CtlError>
            ret = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	75fb      	strb	r3, [r7, #23]
          break;
 8009188:	e02b      	b.n	80091e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b03      	cmp	r3, #3
 8009194:	d107      	bne.n	80091a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009196:	f107 030d 	add.w	r3, r7, #13
 800919a:	2201      	movs	r2, #1
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 fcd8 	bl	800ab54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091a4:	e01d      	b.n	80091e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fc62 	bl	800aa72 <USBD_CtlError>
            ret = USBD_FAIL;
 80091ae:	2303      	movs	r3, #3
 80091b0:	75fb      	strb	r3, [r7, #23]
          break;
 80091b2:	e016      	b.n	80091e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d00f      	beq.n	80091e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fc55 	bl	800aa72 <USBD_CtlError>
            ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80091cc:	e008      	b.n	80091e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 fc4e 	bl	800aa72 <USBD_CtlError>
          ret = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	75fb      	strb	r3, [r7, #23]
          break;
 80091da:	e002      	b.n	80091e2 <USBD_CDC_Setup+0x19e>
          break;
 80091dc:	bf00      	nop
 80091de:	e008      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>
          break;
 80091e0:	bf00      	nop
      }
      break;
 80091e2:	e006      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fc43 	bl	800aa72 <USBD_CtlError>
      ret = USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
      break;
 80091f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800920e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32b0      	adds	r2, #176	; 0xb0
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	e065      	b.n	80092f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32b0      	adds	r2, #176	; 0xb0
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	3318      	adds	r3, #24
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d02f      	beq.n	80092b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 020f 	and.w	r2, r3, #15
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	3318      	adds	r3, #24
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	f003 010f 	and.w	r1, r3, #15
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	460b      	mov	r3, r1
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	440b      	add	r3, r1
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4403      	add	r3, r0
 8009278:	3348      	adds	r3, #72	; 0x48
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009280:	fb01 f303 	mul.w	r3, r1, r3
 8009284:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009286:	2b00      	cmp	r3, #0
 8009288:	d112      	bne.n	80092b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	3318      	adds	r3, #24
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80092a2:	78f9      	ldrb	r1, [r7, #3]
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f002 f93c 	bl	800b526 <USBD_LL_Transmit>
 80092ae:	e01f      	b.n	80092f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	33b0      	adds	r3, #176	; 0xb0
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d010      	beq.n	80092f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	33b0      	adds	r3, #176	; 0xb0
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	32b0      	adds	r2, #176	; 0xb0
 8009310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009314:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	32b0      	adds	r2, #176	; 0xb0
 8009320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009328:	2303      	movs	r3, #3
 800932a:	e01a      	b.n	8009362 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f002 f93a 	bl	800b5aa <USBD_LL_GetRxDataSize>
 8009336:	4602      	mov	r2, r0
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	33b0      	adds	r3, #176	; 0xb0
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800935c:	4611      	mov	r1, r2
 800935e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	32b0      	adds	r2, #176	; 0xb0
 800937c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009380:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	e025      	b.n	80093d8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	33b0      	adds	r3, #176	; 0xb0
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01a      	beq.n	80093d6 <USBD_CDC_EP0_RxReady+0x6c>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093a6:	2bff      	cmp	r3, #255	; 0xff
 80093a8:	d015      	beq.n	80093d6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	33b0      	adds	r3, #176	; 0xb0
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80093c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80093ca:	b292      	uxth	r2, r2
 80093cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	22ff      	movs	r2, #255	; 0xff
 80093d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093e8:	2182      	movs	r1, #130	; 0x82
 80093ea:	4818      	ldr	r0, [pc, #96]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093ec:	f000 fd09 	bl	8009e02 <USBD_GetEpDesc>
 80093f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093f2:	2101      	movs	r1, #1
 80093f4:	4815      	ldr	r0, [pc, #84]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093f6:	f000 fd04 	bl	8009e02 <USBD_GetEpDesc>
 80093fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093fc:	2181      	movs	r1, #129	; 0x81
 80093fe:	4813      	ldr	r0, [pc, #76]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009400:	f000 fcff 	bl	8009e02 <USBD_GetEpDesc>
 8009404:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2210      	movs	r2, #16
 8009410:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2200      	movs	r2, #0
 800941c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009420:	711a      	strb	r2, [r3, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d006      	beq.n	800943a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009434:	711a      	strb	r2, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2243      	movs	r2, #67	; 0x43
 800943e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000050 	.word	0x20000050

08009450 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009458:	2182      	movs	r1, #130	; 0x82
 800945a:	4818      	ldr	r0, [pc, #96]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800945c:	f000 fcd1 	bl	8009e02 <USBD_GetEpDesc>
 8009460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009462:	2101      	movs	r1, #1
 8009464:	4815      	ldr	r0, [pc, #84]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009466:	f000 fccc 	bl	8009e02 <USBD_GetEpDesc>
 800946a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800946c:	2181      	movs	r1, #129	; 0x81
 800946e:	4813      	ldr	r0, [pc, #76]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009470:	f000 fcc7 	bl	8009e02 <USBD_GetEpDesc>
 8009474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2210      	movs	r2, #16
 8009480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d006      	beq.n	8009496 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2200      	movs	r2, #0
 800948c:	711a      	strb	r2, [r3, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f042 0202 	orr.w	r2, r2, #2
 8009494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	711a      	strb	r2, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f042 0202 	orr.w	r2, r2, #2
 80094a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2243      	movs	r2, #67	; 0x43
 80094ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000050 	.word	0x20000050

080094c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094c8:	2182      	movs	r1, #130	; 0x82
 80094ca:	4818      	ldr	r0, [pc, #96]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094cc:	f000 fc99 	bl	8009e02 <USBD_GetEpDesc>
 80094d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094d2:	2101      	movs	r1, #1
 80094d4:	4815      	ldr	r0, [pc, #84]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094d6:	f000 fc94 	bl	8009e02 <USBD_GetEpDesc>
 80094da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094dc:	2181      	movs	r1, #129	; 0x81
 80094de:	4813      	ldr	r0, [pc, #76]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094e0:	f000 fc8f 	bl	8009e02 <USBD_GetEpDesc>
 80094e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2210      	movs	r2, #16
 80094f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d006      	beq.n	8009506 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009500:	711a      	strb	r2, [r3, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009514:	711a      	strb	r2, [r3, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2243      	movs	r2, #67	; 0x43
 800951e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000050 	.word	0x20000050

08009530 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	220a      	movs	r2, #10
 800953c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	2000000c 	.word	0x2000000c

08009550 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009560:	2303      	movs	r3, #3
 8009562:	e009      	b.n	8009578 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	33b0      	adds	r3, #176	; 0xb0
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	32b0      	adds	r2, #176	; 0xb0
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e008      	b.n	80095bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	371c      	adds	r7, #28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	32b0      	adds	r2, #176	; 0xb0
 80095dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e004      	b.n	80095f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32b0      	adds	r2, #176	; 0xb0
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32b0      	adds	r2, #176	; 0xb0
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800962e:	2303      	movs	r3, #3
 8009630:	e018      	b.n	8009664 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	7c1b      	ldrb	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <USBD_CDC_ReceivePacket+0x68>)
 800963c:	7819      	ldrb	r1, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 ff8d 	bl	800b568 <USBD_LL_PrepareReceive>
 800964e:	e008      	b.n	8009662 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <USBD_CDC_ReceivePacket+0x68>)
 8009652:	7819      	ldrb	r1, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 ff83 	bl	800b568 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000094 	.word	0x20000094

08009670 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	e01f      	b.n	80096c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f001 fdfd 	bl	800b2bc <USBD_LL_Init>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e025      	b.n	8009734 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	32ae      	adds	r2, #174	; 0xae
 80096fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00f      	beq.n	8009724 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32ae      	adds	r2, #174	; 0xae
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009714:	f107 020e 	add.w	r2, r7, #14
 8009718:	4610      	mov	r0, r2
 800971a:	4798      	blx	r3
 800971c:	4602      	mov	r2, r0
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fe05 	bl	800b354 <USBD_LL_Start>
 800974a:	4603      	mov	r3, r0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	4611      	mov	r1, r2
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80097c8:	2303      	movs	r3, #3
 80097ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 f908 	bl	800a9fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	2b02      	cmp	r3, #2
 8009810:	d01a      	beq.n	8009848 <USBD_LL_SetupStage+0x72>
 8009812:	2b02      	cmp	r3, #2
 8009814:	d822      	bhi.n	800985c <USBD_LL_SetupStage+0x86>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <USBD_LL_SetupStage+0x4a>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <USBD_LL_SetupStage+0x5e>
 800981e:	e01d      	b.n	800985c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fb5f 	bl	8009eec <USBD_StdDevReq>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
      break;
 8009832:	e020      	b.n	8009876 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fbc7 	bl	8009fd0 <USBD_StdItfReq>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
      break;
 8009846:	e016      	b.n	8009876 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc29 	bl	800a0a8 <USBD_StdEPReq>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
      break;
 800985a:	e00c      	b.n	8009876 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fdd2 	bl	800b414 <USBD_LL_StallEP>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]
      break;
 8009874:	bf00      	nop
  }

  return ret;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	460b      	mov	r3, r1
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d16e      	bne.n	8009976 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800989e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	f040 8098 	bne.w	80099dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d913      	bls.n	80098e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	4293      	cmp	r3, r2
 80098d0:	bf28      	it	cs
 80098d2:	4613      	movcs	r3, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f001 f984 	bl	800abe6 <USBD_CtlContinueRx>
 80098de:	e07d      	b.n	80099dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098e6:	f003 031f 	and.w	r3, r3, #31
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d014      	beq.n	8009918 <USBD_LL_DataOutStage+0x98>
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d81d      	bhi.n	800992e <USBD_LL_DataOutStage+0xae>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <USBD_LL_DataOutStage+0x7c>
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d003      	beq.n	8009902 <USBD_LL_DataOutStage+0x82>
 80098fa:	e018      	b.n	800992e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	75bb      	strb	r3, [r7, #22]
            break;
 8009900:	e018      	b.n	8009934 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009908:	b2db      	uxtb	r3, r3
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fa5e 	bl	8009dce <USBD_CoreFindIF>
 8009912:	4603      	mov	r3, r0
 8009914:	75bb      	strb	r3, [r7, #22]
            break;
 8009916:	e00d      	b.n	8009934 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4619      	mov	r1, r3
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fa60 	bl	8009de8 <USBD_CoreFindEP>
 8009928:	4603      	mov	r3, r0
 800992a:	75bb      	strb	r3, [r7, #22]
            break;
 800992c:	e002      	b.n	8009934 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	75bb      	strb	r3, [r7, #22]
            break;
 8009932:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009934:	7dbb      	ldrb	r3, [r7, #22]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d119      	bne.n	800996e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b03      	cmp	r3, #3
 8009944:	d113      	bne.n	800996e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009946:	7dba      	ldrb	r2, [r7, #22]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	32ae      	adds	r2, #174	; 0xae
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009956:	7dba      	ldrb	r2, [r7, #22]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800995e:	7dba      	ldrb	r2, [r7, #22]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	32ae      	adds	r2, #174	; 0xae
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f001 f94a 	bl	800ac08 <USBD_CtlSendStatus>
 8009974:	e032      	b.n	80099dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997c:	b2db      	uxtb	r3, r3
 800997e:	4619      	mov	r1, r3
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fa31 	bl	8009de8 <USBD_CoreFindEP>
 8009986:	4603      	mov	r3, r0
 8009988:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800998a:	7dbb      	ldrb	r3, [r7, #22]
 800998c:	2bff      	cmp	r3, #255	; 0xff
 800998e:	d025      	beq.n	80099dc <USBD_LL_DataOutStage+0x15c>
 8009990:	7dbb      	ldrb	r3, [r7, #22]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d122      	bne.n	80099dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d117      	bne.n	80099d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099a2:	7dba      	ldrb	r2, [r7, #22]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	32ae      	adds	r2, #174	; 0xae
 80099a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00f      	beq.n	80099d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099b2:	7dba      	ldrb	r2, [r7, #22]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80099ba:	7dba      	ldrb	r2, [r7, #22]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	32ae      	adds	r2, #174	; 0xae
 80099c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	7afa      	ldrb	r2, [r7, #11]
 80099c8:	4611      	mov	r1, r2
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	e000      	b.n	80099de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	460b      	mov	r3, r1
 80099f0:	607a      	str	r2, [r7, #4]
 80099f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d16f      	bne.n	8009ada <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3314      	adds	r3, #20
 80099fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d15a      	bne.n	8009ac0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d914      	bls.n	8009a40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	1ad2      	subs	r2, r2, r3
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f001 f8ac 	bl	800ab8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f001 fd95 	bl	800b568 <USBD_LL_PrepareReceive>
 8009a3e:	e03f      	b.n	8009ac0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d11c      	bne.n	8009a86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d316      	bcc.n	8009a86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d20f      	bcs.n	8009a86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f001 f88d 	bl	800ab8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f001 fd72 	bl	800b568 <USBD_LL_PrepareReceive>
 8009a84:	e01c      	b.n	8009ac0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d10f      	bne.n	8009ab2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ab2:	2180      	movs	r1, #128	; 0x80
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f001 fcad 	bl	800b414 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f001 f8b7 	bl	800ac2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d03a      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff fe42 	bl	8009754 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ad8:	e032      	b.n	8009b40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f97f 	bl	8009de8 <USBD_CoreFindEP>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	2bff      	cmp	r3, #255	; 0xff
 8009af2:	d025      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d122      	bne.n	8009b40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d11c      	bne.n	8009b40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b06:	7dfa      	ldrb	r2, [r7, #23]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	32ae      	adds	r2, #174	; 0xae
 8009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d014      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b16:	7dfa      	ldrb	r2, [r7, #23]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b1e:	7dfa      	ldrb	r2, [r7, #23]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	32ae      	adds	r2, #174	; 0xae
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	7afa      	ldrb	r2, [r7, #11]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	4798      	blx	r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b36:	7dbb      	ldrb	r3, [r7, #22]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b3c:	7dbb      	ldrb	r3, [r7, #22]
 8009b3e:	e000      	b.n	8009b42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d014      	beq.n	8009bb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00e      	beq.n	8009bb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6852      	ldr	r2, [r2, #4]
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bac:	2303      	movs	r3, #3
 8009bae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fbe7 	bl	800b38a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2240      	movs	r2, #64	; 0x40
 8009bc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bcc:	2340      	movs	r3, #64	; 0x40
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fbd9 	bl	800b38a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2240      	movs	r2, #64	; 0x40
 8009be2:	621a      	str	r2, [r3, #32]

  return ret;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2204      	movs	r2, #4
 8009c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d106      	bne.n	8009c5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d110      	bne.n	8009ca0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00b      	beq.n	8009ca0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	32ae      	adds	r2, #174	; 0xae
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e01c      	b.n	8009d06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d115      	bne.n	8009d04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	32ae      	adds	r2, #174	; 0xae
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32ae      	adds	r2, #174	; 0xae
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	460b      	mov	r3, r1
 8009d18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	32ae      	adds	r2, #174	; 0xae
 8009d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e01c      	b.n	8009d6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d115      	bne.n	8009d68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	32ae      	adds	r2, #174	; 0xae
 8009d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00b      	beq.n	8009d68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	32ae      	adds	r2, #174	; 0xae
 8009d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	4611      	mov	r1, r2
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00e      	beq.n	8009dc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	6852      	ldr	r2, [r2, #4]
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	4611      	mov	r1, r2
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	4798      	blx	r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009df4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d920      	bls.n	8009e6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e32:	e013      	b.n	8009e5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e34:	f107 030a 	add.w	r3, r7, #10
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f000 f81b 	bl	8009e76 <USBD_GetNextDesc>
 8009e40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b05      	cmp	r3, #5
 8009e48:	d108      	bne.n	8009e5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	789b      	ldrb	r3, [r3, #2]
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d008      	beq.n	8009e6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	885b      	ldrh	r3, [r3, #2]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	897b      	ldrh	r3, [r7, #10]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d8e5      	bhi.n	8009e34 <USBD_GetEpDesc+0x32>
 8009e68:	e000      	b.n	8009e6c <USBD_GetEpDesc+0x6a>
          break;
 8009e6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e6c:	693b      	ldr	r3, [r7, #16]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	881a      	ldrh	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4413      	add	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ece:	8a3b      	ldrh	r3, [r7, #16]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b21a      	sxth	r2, r3
 8009ed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	b21b      	sxth	r3, r3
 8009edc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ede:	89fb      	ldrh	r3, [r7, #14]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f02:	2b40      	cmp	r3, #64	; 0x40
 8009f04:	d005      	beq.n	8009f12 <USBD_StdDevReq+0x26>
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	d857      	bhi.n	8009fba <USBD_StdDevReq+0xce>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00f      	beq.n	8009f2e <USBD_StdDevReq+0x42>
 8009f0e:	2b20      	cmp	r3, #32
 8009f10:	d153      	bne.n	8009fba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	32ae      	adds	r2, #174	; 0xae
 8009f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2c:	e04a      	b.n	8009fc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	785b      	ldrb	r3, [r3, #1]
 8009f32:	2b09      	cmp	r3, #9
 8009f34:	d83b      	bhi.n	8009fae <USBD_StdDevReq+0xc2>
 8009f36:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <USBD_StdDevReq+0x50>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009fa5 	.word	0x08009fa5
 8009f44:	08009faf 	.word	0x08009faf
 8009f48:	08009f9b 	.word	0x08009f9b
 8009f4c:	08009faf 	.word	0x08009faf
 8009f50:	08009f6f 	.word	0x08009f6f
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009faf 	.word	0x08009faf
 8009f5c:	08009f87 	.word	0x08009f87
 8009f60:	08009f79 	.word	0x08009f79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa3c 	bl	800a3e4 <USBD_GetDescriptor>
          break;
 8009f6c:	e024      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fba1 	bl	800a6b8 <USBD_SetAddress>
          break;
 8009f76:	e01f      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fbe0 	bl	800a740 <USBD_SetConfig>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
          break;
 8009f84:	e018      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fc83 	bl	800a894 <USBD_GetConfig>
          break;
 8009f8e:	e013      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fcb4 	bl	800a900 <USBD_GetStatus>
          break;
 8009f98:	e00e      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fce3 	bl	800a968 <USBD_SetFeature>
          break;
 8009fa2:	e009      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fd07 	bl	800a9ba <USBD_ClrFeature>
          break;
 8009fac:	e004      	b.n	8009fb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fd5e 	bl	800aa72 <USBD_CtlError>
          break;
 8009fb6:	bf00      	nop
      }
      break;
 8009fb8:	e004      	b.n	8009fc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fd58 	bl	800aa72 <USBD_CtlError>
      break;
 8009fc2:	bf00      	nop
  }

  return ret;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop

08009fd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fe6:	2b40      	cmp	r3, #64	; 0x40
 8009fe8:	d005      	beq.n	8009ff6 <USBD_StdItfReq+0x26>
 8009fea:	2b40      	cmp	r3, #64	; 0x40
 8009fec:	d852      	bhi.n	800a094 <USBD_StdItfReq+0xc4>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <USBD_StdItfReq+0x26>
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d14e      	bne.n	800a094 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2b02      	cmp	r3, #2
 800a002:	d840      	bhi.n	800a086 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	889b      	ldrh	r3, [r3, #4]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d836      	bhi.n	800a07c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	889b      	ldrh	r3, [r3, #4]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff fed9 	bl	8009dce <USBD_CoreFindIF>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2bff      	cmp	r3, #255	; 0xff
 800a024:	d01d      	beq.n	800a062 <USBD_StdItfReq+0x92>
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d11a      	bne.n	800a062 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a02c:	7bba      	ldrb	r2, [r7, #14]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32ae      	adds	r2, #174	; 0xae
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00f      	beq.n	800a05c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a03c:	7bba      	ldrb	r2, [r7, #14]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a044:	7bba      	ldrb	r2, [r7, #14]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32ae      	adds	r2, #174	; 0xae
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a05a:	e004      	b.n	800a066 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a060:	e001      	b.n	800a066 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a062:	2303      	movs	r3, #3
 800a064:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88db      	ldrh	r3, [r3, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d110      	bne.n	800a090 <USBD_StdItfReq+0xc0>
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10d      	bne.n	800a090 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fdc7 	bl	800ac08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a07a:	e009      	b.n	800a090 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fcf7 	bl	800aa72 <USBD_CtlError>
          break;
 800a084:	e004      	b.n	800a090 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fcf2 	bl	800aa72 <USBD_CtlError>
          break;
 800a08e:	e000      	b.n	800a092 <USBD_StdItfReq+0xc2>
          break;
 800a090:	bf00      	nop
      }
      break;
 800a092:	e004      	b.n	800a09e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fceb 	bl	800aa72 <USBD_CtlError>
      break;
 800a09c:	bf00      	nop
  }

  return ret;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	889b      	ldrh	r3, [r3, #4]
 800a0ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0c4:	2b40      	cmp	r3, #64	; 0x40
 800a0c6:	d007      	beq.n	800a0d8 <USBD_StdEPReq+0x30>
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	f200 817f 	bhi.w	800a3cc <USBD_StdEPReq+0x324>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d02a      	beq.n	800a128 <USBD_StdEPReq+0x80>
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	f040 817a 	bne.w	800a3cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff fe83 	bl	8009de8 <USBD_CoreFindEP>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0e6:	7b7b      	ldrb	r3, [r7, #13]
 800a0e8:	2bff      	cmp	r3, #255	; 0xff
 800a0ea:	f000 8174 	beq.w	800a3d6 <USBD_StdEPReq+0x32e>
 800a0ee:	7b7b      	ldrb	r3, [r7, #13]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f040 8170 	bne.w	800a3d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a0f6:	7b7a      	ldrb	r2, [r7, #13]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a0fe:	7b7a      	ldrb	r2, [r7, #13]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32ae      	adds	r2, #174	; 0xae
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 8163 	beq.w	800a3d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a110:	7b7a      	ldrb	r2, [r7, #13]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	32ae      	adds	r2, #174	; 0xae
 800a116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a126:	e156      	b.n	800a3d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d008      	beq.n	800a142 <USBD_StdEPReq+0x9a>
 800a130:	2b03      	cmp	r3, #3
 800a132:	f300 8145 	bgt.w	800a3c0 <USBD_StdEPReq+0x318>
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 809b 	beq.w	800a272 <USBD_StdEPReq+0x1ca>
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d03c      	beq.n	800a1ba <USBD_StdEPReq+0x112>
 800a140:	e13e      	b.n	800a3c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d002      	beq.n	800a154 <USBD_StdEPReq+0xac>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d016      	beq.n	800a180 <USBD_StdEPReq+0xd8>
 800a152:	e02c      	b.n	800a1ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00d      	beq.n	800a176 <USBD_StdEPReq+0xce>
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b80      	cmp	r3, #128	; 0x80
 800a15e:	d00a      	beq.n	800a176 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 f955 	bl	800b414 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f951 	bl	800b414 <USBD_LL_StallEP>
 800a172:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a174:	e020      	b.n	800a1b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fc7a 	bl	800aa72 <USBD_CtlError>
              break;
 800a17e:	e01b      	b.n	800a1b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	885b      	ldrh	r3, [r3, #2]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10e      	bne.n	800a1a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <USBD_StdEPReq+0xfe>
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b80      	cmp	r3, #128	; 0x80
 800a192:	d008      	beq.n	800a1a6 <USBD_StdEPReq+0xfe>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	88db      	ldrh	r3, [r3, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 f937 	bl	800b414 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fd2e 	bl	800ac08 <USBD_CtlSendStatus>

              break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fc5e 	bl	800aa72 <USBD_CtlError>
              break;
 800a1b6:	bf00      	nop
          }
          break;
 800a1b8:	e107      	b.n	800a3ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d002      	beq.n	800a1cc <USBD_StdEPReq+0x124>
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d016      	beq.n	800a1f8 <USBD_StdEPReq+0x150>
 800a1ca:	e04b      	b.n	800a264 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <USBD_StdEPReq+0x146>
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	2b80      	cmp	r3, #128	; 0x80
 800a1d6:	d00a      	beq.n	800a1ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 f919 	bl	800b414 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1e2:	2180      	movs	r1, #128	; 0x80
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f915 	bl	800b414 <USBD_LL_StallEP>
 800a1ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1ec:	e040      	b.n	800a270 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fc3e 	bl	800aa72 <USBD_CtlError>
              break;
 800a1f6:	e03b      	b.n	800a270 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	885b      	ldrh	r3, [r3, #2]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d136      	bne.n	800a26e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f91f 	bl	800b452 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fcf7 	bl	800ac08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff fde2 	bl	8009de8 <USBD_CoreFindEP>
 800a224:	4603      	mov	r3, r0
 800a226:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a228:	7b7b      	ldrb	r3, [r7, #13]
 800a22a:	2bff      	cmp	r3, #255	; 0xff
 800a22c:	d01f      	beq.n	800a26e <USBD_StdEPReq+0x1c6>
 800a22e:	7b7b      	ldrb	r3, [r7, #13]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d11c      	bne.n	800a26e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a234:	7b7a      	ldrb	r2, [r7, #13]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a23c:	7b7a      	ldrb	r2, [r7, #13]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	32ae      	adds	r2, #174	; 0xae
 800a242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d010      	beq.n	800a26e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a24c:	7b7a      	ldrb	r2, [r7, #13]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32ae      	adds	r2, #174	; 0xae
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a262:	e004      	b.n	800a26e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fc03 	bl	800aa72 <USBD_CtlError>
              break;
 800a26c:	e000      	b.n	800a270 <USBD_StdEPReq+0x1c8>
              break;
 800a26e:	bf00      	nop
          }
          break;
 800a270:	e0ab      	b.n	800a3ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d002      	beq.n	800a284 <USBD_StdEPReq+0x1dc>
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d032      	beq.n	800a2e8 <USBD_StdEPReq+0x240>
 800a282:	e097      	b.n	800a3b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <USBD_StdEPReq+0x1f2>
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
 800a28c:	2b80      	cmp	r3, #128	; 0x80
 800a28e:	d004      	beq.n	800a29a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fbed 	bl	800aa72 <USBD_CtlError>
                break;
 800a298:	e091      	b.n	800a3be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	da0b      	bge.n	800a2ba <USBD_StdEPReq+0x212>
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	e00b      	b.n	800a2d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
 800a2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fc37 	bl	800ab54 <USBD_CtlSendData>
              break;
 800a2e6:	e06a      	b.n	800a3be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da11      	bge.n	800a314 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
 800a2f2:	f003 020f 	and.w	r2, r3, #15
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d117      	bne.n	800a33a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fbb0 	bl	800aa72 <USBD_CtlError>
                  break;
 800a312:	e054      	b.n	800a3be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	f003 020f 	and.w	r2, r3, #15
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d104      	bne.n	800a33a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fb9d 	bl	800aa72 <USBD_CtlError>
                  break;
 800a338:	e041      	b.n	800a3be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	da0b      	bge.n	800a35a <USBD_StdEPReq+0x2b2>
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	3310      	adds	r3, #16
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4413      	add	r3, r2
 800a356:	3304      	adds	r3, #4
 800a358:	e00b      	b.n	800a372 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	3304      	adds	r3, #4
 800a372:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a374:	7bbb      	ldrb	r3, [r7, #14]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <USBD_StdEPReq+0x2d8>
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
 800a37c:	2b80      	cmp	r3, #128	; 0x80
 800a37e:	d103      	bne.n	800a388 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e00e      	b.n	800a3a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f87f 	bl	800b490 <USBD_LL_IsStallEP>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	e002      	b.n	800a3a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fbd1 	bl	800ab54 <USBD_CtlSendData>
              break;
 800a3b2:	e004      	b.n	800a3be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fb5b 	bl	800aa72 <USBD_CtlError>
              break;
 800a3bc:	bf00      	nop
          }
          break;
 800a3be:	e004      	b.n	800a3ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fb55 	bl	800aa72 <USBD_CtlError>
          break;
 800a3c8:	bf00      	nop
      }
      break;
 800a3ca:	e005      	b.n	800a3d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fb4f 	bl	800aa72 <USBD_CtlError>
      break;
 800a3d4:	e000      	b.n	800a3d8 <USBD_StdEPReq+0x330>
      break;
 800a3d6:	bf00      	nop
  }

  return ret;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	0a1b      	lsrs	r3, r3, #8
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	2b06      	cmp	r3, #6
 800a406:	f200 8128 	bhi.w	800a65a <USBD_GetDescriptor+0x276>
 800a40a:	a201      	add	r2, pc, #4	; (adr r2, 800a410 <USBD_GetDescriptor+0x2c>)
 800a40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a410:	0800a42d 	.word	0x0800a42d
 800a414:	0800a445 	.word	0x0800a445
 800a418:	0800a485 	.word	0x0800a485
 800a41c:	0800a65b 	.word	0x0800a65b
 800a420:	0800a65b 	.word	0x0800a65b
 800a424:	0800a5fb 	.word	0x0800a5fb
 800a428:	0800a627 	.word	0x0800a627
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	7c12      	ldrb	r2, [r2, #16]
 800a438:	f107 0108 	add.w	r1, r7, #8
 800a43c:	4610      	mov	r0, r2
 800a43e:	4798      	blx	r3
 800a440:	60f8      	str	r0, [r7, #12]
      break;
 800a442:	e112      	b.n	800a66a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	7c1b      	ldrb	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10d      	bne.n	800a468 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a454:	f107 0208 	add.w	r2, r7, #8
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
 800a45c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3301      	adds	r3, #1
 800a462:	2202      	movs	r2, #2
 800a464:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a466:	e100      	b.n	800a66a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	f107 0208 	add.w	r2, r7, #8
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
 800a478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	2202      	movs	r2, #2
 800a480:	701a      	strb	r2, [r3, #0]
      break;
 800a482:	e0f2      	b.n	800a66a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	885b      	ldrh	r3, [r3, #2]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	f200 80ac 	bhi.w	800a5e8 <USBD_GetDescriptor+0x204>
 800a490:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <USBD_GetDescriptor+0xb4>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4b1 	.word	0x0800a4b1
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a519 	.word	0x0800a519
 800a4a4:	0800a54d 	.word	0x0800a54d
 800a4a8:	0800a581 	.word	0x0800a581
 800a4ac:	0800a5b5 	.word	0x0800a5b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	7c12      	ldrb	r2, [r2, #16]
 800a4c8:	f107 0108 	add.w	r1, r7, #8
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4d2:	e091      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 facb 	bl	800aa72 <USBD_CtlError>
            err++;
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4e2:	e089      	b.n	800a5f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	7c12      	ldrb	r2, [r2, #16]
 800a4fc:	f107 0108 	add.w	r1, r7, #8
 800a500:	4610      	mov	r0, r2
 800a502:	4798      	blx	r3
 800a504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a506:	e077      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fab1 	bl	800aa72 <USBD_CtlError>
            err++;
 800a510:	7afb      	ldrb	r3, [r7, #11]
 800a512:	3301      	adds	r3, #1
 800a514:	72fb      	strb	r3, [r7, #11]
          break;
 800a516:	e06f      	b.n	800a5f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	7c12      	ldrb	r2, [r2, #16]
 800a530:	f107 0108 	add.w	r1, r7, #8
 800a534:	4610      	mov	r0, r2
 800a536:	4798      	blx	r3
 800a538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a53a:	e05d      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fa97 	bl	800aa72 <USBD_CtlError>
            err++;
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	3301      	adds	r3, #1
 800a548:	72fb      	strb	r3, [r7, #11]
          break;
 800a54a:	e055      	b.n	800a5f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00b      	beq.n	800a570 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	7c12      	ldrb	r2, [r2, #16]
 800a564:	f107 0108 	add.w	r1, r7, #8
 800a568:	4610      	mov	r0, r2
 800a56a:	4798      	blx	r3
 800a56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a56e:	e043      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa7d 	bl	800aa72 <USBD_CtlError>
            err++;
 800a578:	7afb      	ldrb	r3, [r7, #11]
 800a57a:	3301      	adds	r3, #1
 800a57c:	72fb      	strb	r3, [r7, #11]
          break;
 800a57e:	e03b      	b.n	800a5f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00b      	beq.n	800a5a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	7c12      	ldrb	r2, [r2, #16]
 800a598:	f107 0108 	add.w	r1, r7, #8
 800a59c:	4610      	mov	r0, r2
 800a59e:	4798      	blx	r3
 800a5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5a2:	e029      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa63 	bl	800aa72 <USBD_CtlError>
            err++;
 800a5ac:	7afb      	ldrb	r3, [r7, #11]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5b2:	e021      	b.n	800a5f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00b      	beq.n	800a5d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	7c12      	ldrb	r2, [r2, #16]
 800a5cc:	f107 0108 	add.w	r1, r7, #8
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	4798      	blx	r3
 800a5d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5d6:	e00f      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fa49 	bl	800aa72 <USBD_CtlError>
            err++;
 800a5e0:	7afb      	ldrb	r3, [r7, #11]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5e6:	e007      	b.n	800a5f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa41 	bl	800aa72 <USBD_CtlError>
          err++;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a5f6:	bf00      	nop
      }
      break;
 800a5f8:	e037      	b.n	800a66a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7c1b      	ldrb	r3, [r3, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	f107 0208 	add.w	r2, r7, #8
 800a60e:	4610      	mov	r0, r2
 800a610:	4798      	blx	r3
 800a612:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a614:	e029      	b.n	800a66a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fa2a 	bl	800aa72 <USBD_CtlError>
        err++;
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	3301      	adds	r3, #1
 800a622:	72fb      	strb	r3, [r7, #11]
      break;
 800a624:	e021      	b.n	800a66a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7c1b      	ldrb	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10d      	bne.n	800a64a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	f107 0208 	add.w	r2, r7, #8
 800a63a:	4610      	mov	r0, r2
 800a63c:	4798      	blx	r3
 800a63e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	2207      	movs	r2, #7
 800a646:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a648:	e00f      	b.n	800a66a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fa10 	bl	800aa72 <USBD_CtlError>
        err++;
 800a652:	7afb      	ldrb	r3, [r7, #11]
 800a654:	3301      	adds	r3, #1
 800a656:	72fb      	strb	r3, [r7, #11]
      break;
 800a658:	e007      	b.n	800a66a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fa08 	bl	800aa72 <USBD_CtlError>
      err++;
 800a662:	7afb      	ldrb	r3, [r7, #11]
 800a664:	3301      	adds	r3, #1
 800a666:	72fb      	strb	r3, [r7, #11]
      break;
 800a668:	bf00      	nop
  }

  if (err != 0U)
 800a66a:	7afb      	ldrb	r3, [r7, #11]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d11e      	bne.n	800a6ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	88db      	ldrh	r3, [r3, #6]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d016      	beq.n	800a6a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a678:	893b      	ldrh	r3, [r7, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00e      	beq.n	800a69c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	88da      	ldrh	r2, [r3, #6]
 800a682:	893b      	ldrh	r3, [r7, #8]
 800a684:	4293      	cmp	r3, r2
 800a686:	bf28      	it	cs
 800a688:	4613      	movcs	r3, r2
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a68e:	893b      	ldrh	r3, [r7, #8]
 800a690:	461a      	mov	r2, r3
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fa5d 	bl	800ab54 <USBD_CtlSendData>
 800a69a:	e009      	b.n	800a6b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f9e7 	bl	800aa72 <USBD_CtlError>
 800a6a4:	e004      	b.n	800a6b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 faae 	bl	800ac08 <USBD_CtlSendStatus>
 800a6ac:	e000      	b.n	800a6b0 <USBD_GetDescriptor+0x2cc>
    return;
 800a6ae:	bf00      	nop
  }
}
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop

0800a6b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	889b      	ldrh	r3, [r3, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d131      	bne.n	800a72e <USBD_SetAddress+0x76>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	88db      	ldrh	r3, [r3, #6]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d12d      	bne.n	800a72e <USBD_SetAddress+0x76>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	885b      	ldrh	r3, [r3, #2]
 800a6d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a6d8:	d829      	bhi.n	800a72e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	885b      	ldrh	r3, [r3, #2]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d104      	bne.n	800a6fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f9bc 	bl	800aa72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fa:	e01d      	b.n	800a738 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	7bfa      	ldrb	r2, [r7, #15]
 800a700:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 feed 	bl	800b4e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fa7a 	bl	800ac08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2202      	movs	r2, #2
 800a71e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a722:	e009      	b.n	800a738 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a72c:	e004      	b.n	800a738 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f99e 	bl	800aa72 <USBD_CtlError>
  }
}
 800a736:	bf00      	nop
 800a738:	bf00      	nop
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	885b      	ldrh	r3, [r3, #2]
 800a752:	b2da      	uxtb	r2, r3
 800a754:	4b4e      	ldr	r3, [pc, #312]	; (800a890 <USBD_SetConfig+0x150>)
 800a756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a758:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <USBD_SetConfig+0x150>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d905      	bls.n	800a76c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f985 	bl	800aa72 <USBD_CtlError>
    return USBD_FAIL;
 800a768:	2303      	movs	r3, #3
 800a76a:	e08c      	b.n	800a886 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b02      	cmp	r3, #2
 800a776:	d002      	beq.n	800a77e <USBD_SetConfig+0x3e>
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d029      	beq.n	800a7d0 <USBD_SetConfig+0x90>
 800a77c:	e075      	b.n	800a86a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a77e:	4b44      	ldr	r3, [pc, #272]	; (800a890 <USBD_SetConfig+0x150>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d020      	beq.n	800a7c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a786:	4b42      	ldr	r3, [pc, #264]	; (800a890 <USBD_SetConfig+0x150>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a790:	4b3f      	ldr	r3, [pc, #252]	; (800a890 <USBD_SetConfig+0x150>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	4619      	mov	r1, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7fe ffe7 	bl	800976a <USBD_SetClassConfig>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d008      	beq.n	800a7b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f962 	bl	800aa72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7b6:	e065      	b.n	800a884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fa25 	bl	800ac08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7c6:	e05d      	b.n	800a884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa1d 	bl	800ac08 <USBD_CtlSendStatus>
      break;
 800a7ce:	e059      	b.n	800a884 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7d0:	4b2f      	ldr	r3, [pc, #188]	; (800a890 <USBD_SetConfig+0x150>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d112      	bne.n	800a7fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a7e0:	4b2b      	ldr	r3, [pc, #172]	; (800a890 <USBD_SetConfig+0x150>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7ea:	4b29      	ldr	r3, [pc, #164]	; (800a890 <USBD_SetConfig+0x150>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fe ffd6 	bl	80097a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fa06 	bl	800ac08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7fc:	e042      	b.n	800a884 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a7fe:	4b24      	ldr	r3, [pc, #144]	; (800a890 <USBD_SetConfig+0x150>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d02a      	beq.n	800a862 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7fe ffc4 	bl	80097a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a81a:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <USBD_SetConfig+0x150>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a824:	4b1a      	ldr	r3, [pc, #104]	; (800a890 <USBD_SetConfig+0x150>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7fe ff9d 	bl	800976a <USBD_SetClassConfig>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00f      	beq.n	800a85a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f918 	bl	800aa72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7fe ffa9 	bl	80097a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a858:	e014      	b.n	800a884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f9d4 	bl	800ac08 <USBD_CtlSendStatus>
      break;
 800a860:	e010      	b.n	800a884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f9d0 	bl	800ac08 <USBD_CtlSendStatus>
      break;
 800a868:	e00c      	b.n	800a884 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f900 	bl	800aa72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a872:	4b07      	ldr	r3, [pc, #28]	; (800a890 <USBD_SetConfig+0x150>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7fe ff92 	bl	80097a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a87e:	2303      	movs	r3, #3
 800a880:	73fb      	strb	r3, [r7, #15]
      break;
 800a882:	bf00      	nop
  }

  return ret;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	2000065c 	.word	0x2000065c

0800a894 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	88db      	ldrh	r3, [r3, #6]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d004      	beq.n	800a8b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8e2 	bl	800aa72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8ae:	e023      	b.n	800a8f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	dc02      	bgt.n	800a8c2 <USBD_GetConfig+0x2e>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dc03      	bgt.n	800a8c8 <USBD_GetConfig+0x34>
 800a8c0:	e015      	b.n	800a8ee <USBD_GetConfig+0x5a>
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d00b      	beq.n	800a8de <USBD_GetConfig+0x4a>
 800a8c6:	e012      	b.n	800a8ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f93c 	bl	800ab54 <USBD_CtlSendData>
        break;
 800a8dc:	e00c      	b.n	800a8f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f934 	bl	800ab54 <USBD_CtlSendData>
        break;
 800a8ec:	e004      	b.n	800a8f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f8be 	bl	800aa72 <USBD_CtlError>
        break;
 800a8f6:	bf00      	nop
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a910:	b2db      	uxtb	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	2b02      	cmp	r3, #2
 800a916:	d81e      	bhi.n	800a956 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	88db      	ldrh	r3, [r3, #6]
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d004      	beq.n	800a92a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f8a5 	bl	800aa72 <USBD_CtlError>
        break;
 800a928:	e01a      	b.n	800a960 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f043 0202 	orr.w	r2, r3, #2
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	330c      	adds	r3, #12
 800a94a:	2202      	movs	r2, #2
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f900 	bl	800ab54 <USBD_CtlSendData>
      break;
 800a954:	e004      	b.n	800a960 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f88a 	bl	800aa72 <USBD_CtlError>
      break;
 800a95e:	bf00      	nop
  }
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	885b      	ldrh	r3, [r3, #2]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d107      	bne.n	800a98a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f940 	bl	800ac08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a988:	e013      	b.n	800a9b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	885b      	ldrh	r3, [r3, #2]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d10b      	bne.n	800a9aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	889b      	ldrh	r3, [r3, #4]
 800a996:	0a1b      	lsrs	r3, r3, #8
 800a998:	b29b      	uxth	r3, r3
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f930 	bl	800ac08 <USBD_CtlSendStatus>
}
 800a9a8:	e003      	b.n	800a9b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f860 	bl	800aa72 <USBD_CtlError>
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d80b      	bhi.n	800a9ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	885b      	ldrh	r3, [r3, #2]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d10c      	bne.n	800a9f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f910 	bl	800ac08 <USBD_CtlSendStatus>
      }
      break;
 800a9e8:	e004      	b.n	800a9f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f840 	bl	800aa72 <USBD_CtlError>
      break;
 800a9f2:	e000      	b.n	800a9f6 <USBD_ClrFeature+0x3c>
      break;
 800a9f4:	bf00      	nop
  }
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	781a      	ldrb	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3301      	adds	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7ff fa41 	bl	8009eb0 <SWAPBYTE>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	461a      	mov	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7ff fa34 	bl	8009eb0 <SWAPBYTE>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3301      	adds	r3, #1
 800aa54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7ff fa27 	bl	8009eb0 <SWAPBYTE>
 800aa62:	4603      	mov	r3, r0
 800aa64:	461a      	mov	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	80da      	strh	r2, [r3, #6]
}
 800aa6a:	bf00      	nop
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa7c:	2180      	movs	r1, #128	; 0x80
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fcc8 	bl	800b414 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa84:	2100      	movs	r1, #0
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fcc4 	bl	800b414 <USBD_LL_StallEP>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d036      	beq.n	800ab18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aaae:	6938      	ldr	r0, [r7, #16]
 800aab0:	f000 f836 	bl	800ab20 <USBD_GetLen>
 800aab4:	4603      	mov	r3, r0
 800aab6:	3301      	adds	r3, #1
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	4413      	add	r3, r2
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7812      	ldrb	r2, [r2, #0]
 800aacc:	701a      	strb	r2, [r3, #0]
  idx++;
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	3301      	adds	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	4413      	add	r3, r2
 800aada:	2203      	movs	r2, #3
 800aadc:	701a      	strb	r2, [r3, #0]
  idx++;
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	3301      	adds	r3, #1
 800aae2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aae4:	e013      	b.n	800ab0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	4413      	add	r3, r2
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	7812      	ldrb	r2, [r2, #0]
 800aaf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	613b      	str	r3, [r7, #16]
    idx++;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	3301      	adds	r3, #1
 800aafc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	4413      	add	r3, r2
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab08:	7dfb      	ldrb	r3, [r7, #23]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e7      	bne.n	800aae6 <USBD_GetString+0x52>
 800ab16:	e000      	b.n	800ab1a <USBD_GetString+0x86>
    return;
 800ab18:	bf00      	nop
  }
}
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab30:	e005      	b.n	800ab3e <USBD_GetLen+0x1e>
  {
    len++;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	3301      	adds	r3, #1
 800ab36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1f5      	bne.n	800ab32 <USBD_GetLen+0x12>
  }

  return len;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2202      	movs	r2, #2
 800ab64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	2100      	movs	r1, #0
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 fcd3 	bl	800b526 <USBD_LL_Transmit>

  return USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 fcc2 	bl	800b526 <USBD_LL_Transmit>

  return USBD_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2203      	movs	r2, #3
 800abbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	2100      	movs	r1, #0
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 fcc6 	bl	800b568 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	2100      	movs	r1, #0
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 fcb5 	bl	800b568 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2204      	movs	r2, #4
 800ac14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac18:	2300      	movs	r3, #0
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fc81 	bl	800b526 <USBD_LL_Transmit>

  return USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2205      	movs	r2, #5
 800ac3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2200      	movs	r2, #0
 800ac42:	2100      	movs	r1, #0
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fc8f 	bl	800b568 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4912      	ldr	r1, [pc, #72]	; (800aca4 <MX_USB_DEVICE_Init+0x50>)
 800ac5c:	4812      	ldr	r0, [pc, #72]	; (800aca8 <MX_USB_DEVICE_Init+0x54>)
 800ac5e:	f7fe fd07 	bl	8009670 <USBD_Init>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac68:	f7f6 f916 	bl	8000e98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac6c:	490f      	ldr	r1, [pc, #60]	; (800acac <MX_USB_DEVICE_Init+0x58>)
 800ac6e:	480e      	ldr	r0, [pc, #56]	; (800aca8 <MX_USB_DEVICE_Init+0x54>)
 800ac70:	f7fe fd2e 	bl	80096d0 <USBD_RegisterClass>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac7a:	f7f6 f90d 	bl	8000e98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac7e:	490c      	ldr	r1, [pc, #48]	; (800acb0 <MX_USB_DEVICE_Init+0x5c>)
 800ac80:	4809      	ldr	r0, [pc, #36]	; (800aca8 <MX_USB_DEVICE_Init+0x54>)
 800ac82:	f7fe fc65 	bl	8009550 <USBD_CDC_RegisterInterface>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac8c:	f7f6 f904 	bl	8000e98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac90:	4805      	ldr	r0, [pc, #20]	; (800aca8 <MX_USB_DEVICE_Init+0x54>)
 800ac92:	f7fe fd53 	bl	800973c <USBD_Start>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac9c:	f7f6 f8fc 	bl	8000e98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aca0:	bf00      	nop
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	200000ac 	.word	0x200000ac
 800aca8:	20000660 	.word	0x20000660
 800acac:	20000018 	.word	0x20000018
 800acb0:	20000098 	.word	0x20000098

0800acb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800acb8:	2200      	movs	r2, #0
 800acba:	4905      	ldr	r1, [pc, #20]	; (800acd0 <CDC_Init_FS+0x1c>)
 800acbc:	4805      	ldr	r0, [pc, #20]	; (800acd4 <CDC_Init_FS+0x20>)
 800acbe:	f7fe fc61 	bl	8009584 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800acc2:	4905      	ldr	r1, [pc, #20]	; (800acd8 <CDC_Init_FS+0x24>)
 800acc4:	4803      	ldr	r0, [pc, #12]	; (800acd4 <CDC_Init_FS+0x20>)
 800acc6:	f7fe fc7f 	bl	80095c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800accc:	4618      	mov	r0, r3
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	2000113c 	.word	0x2000113c
 800acd4:	20000660 	.word	0x20000660
 800acd8:	2000093c 	.word	0x2000093c

0800acdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ace0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	6039      	str	r1, [r7, #0]
 800acf6:	71fb      	strb	r3, [r7, #7]
 800acf8:	4613      	mov	r3, r2
 800acfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	2b23      	cmp	r3, #35	; 0x23
 800ad00:	d84a      	bhi.n	800ad98 <CDC_Control_FS+0xac>
 800ad02:	a201      	add	r2, pc, #4	; (adr r2, 800ad08 <CDC_Control_FS+0x1c>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad99 	.word	0x0800ad99
 800ad0c:	0800ad99 	.word	0x0800ad99
 800ad10:	0800ad99 	.word	0x0800ad99
 800ad14:	0800ad99 	.word	0x0800ad99
 800ad18:	0800ad99 	.word	0x0800ad99
 800ad1c:	0800ad99 	.word	0x0800ad99
 800ad20:	0800ad99 	.word	0x0800ad99
 800ad24:	0800ad99 	.word	0x0800ad99
 800ad28:	0800ad99 	.word	0x0800ad99
 800ad2c:	0800ad99 	.word	0x0800ad99
 800ad30:	0800ad99 	.word	0x0800ad99
 800ad34:	0800ad99 	.word	0x0800ad99
 800ad38:	0800ad99 	.word	0x0800ad99
 800ad3c:	0800ad99 	.word	0x0800ad99
 800ad40:	0800ad99 	.word	0x0800ad99
 800ad44:	0800ad99 	.word	0x0800ad99
 800ad48:	0800ad99 	.word	0x0800ad99
 800ad4c:	0800ad99 	.word	0x0800ad99
 800ad50:	0800ad99 	.word	0x0800ad99
 800ad54:	0800ad99 	.word	0x0800ad99
 800ad58:	0800ad99 	.word	0x0800ad99
 800ad5c:	0800ad99 	.word	0x0800ad99
 800ad60:	0800ad99 	.word	0x0800ad99
 800ad64:	0800ad99 	.word	0x0800ad99
 800ad68:	0800ad99 	.word	0x0800ad99
 800ad6c:	0800ad99 	.word	0x0800ad99
 800ad70:	0800ad99 	.word	0x0800ad99
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ad99 	.word	0x0800ad99
 800ad7c:	0800ad99 	.word	0x0800ad99
 800ad80:	0800ad99 	.word	0x0800ad99
 800ad84:	0800ad99 	.word	0x0800ad99
 800ad88:	0800ad99 	.word	0x0800ad99
 800ad8c:	0800ad99 	.word	0x0800ad99
 800ad90:	0800ad99 	.word	0x0800ad99
 800ad94:	0800ad99 	.word	0x0800ad99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad98:	bf00      	nop
  }

  return (USBD_OK);
 800ad9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4805      	ldr	r0, [pc, #20]	; (800adcc <CDC_Receive_FS+0x24>)
 800adb6:	f7fe fc07 	bl	80095c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800adba:	4804      	ldr	r0, [pc, #16]	; (800adcc <CDC_Receive_FS+0x24>)
 800adbc:	f7fe fc22 	bl	8009604 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800adc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20000660 	.word	0x20000660

0800add0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	4613      	mov	r3, r2
 800addc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ade2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	371c      	adds	r7, #28
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
	...

0800adf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	6039      	str	r1, [r7, #0]
 800adfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2212      	movs	r2, #18
 800ae04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ae06:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	200000c8 	.word	0x200000c8

0800ae18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	6039      	str	r1, [r7, #0]
 800ae22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	2204      	movs	r2, #4
 800ae28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae2a:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	200000dc 	.word	0x200000dc

0800ae3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	6039      	str	r1, [r7, #0]
 800ae46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d105      	bne.n	800ae5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	4907      	ldr	r1, [pc, #28]	; (800ae70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae52:	4808      	ldr	r0, [pc, #32]	; (800ae74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae54:	f7ff fe1e 	bl	800aa94 <USBD_GetString>
 800ae58:	e004      	b.n	800ae64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	4904      	ldr	r1, [pc, #16]	; (800ae70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ae5e:	4805      	ldr	r0, [pc, #20]	; (800ae74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ae60:	f7ff fe18 	bl	800aa94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae64:	4b02      	ldr	r3, [pc, #8]	; (800ae70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000193c 	.word	0x2000193c
 800ae74:	0800b6c8 	.word	0x0800b6c8

0800ae78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	6039      	str	r1, [r7, #0]
 800ae82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	4904      	ldr	r1, [pc, #16]	; (800ae98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ae88:	4804      	ldr	r0, [pc, #16]	; (800ae9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ae8a:	f7ff fe03 	bl	800aa94 <USBD_GetString>
  return USBD_StrDesc;
 800ae8e:	4b02      	ldr	r3, [pc, #8]	; (800ae98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	2000193c 	.word	0x2000193c
 800ae9c:	0800b6e0 	.word	0x0800b6e0

0800aea0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	4603      	mov	r3, r0
 800aea8:	6039      	str	r1, [r7, #0]
 800aeaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	221a      	movs	r2, #26
 800aeb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aeb2:	f000 f843 	bl	800af3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aeb6:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	200000e0 	.word	0x200000e0

0800aec4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	6039      	str	r1, [r7, #0]
 800aece:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d105      	bne.n	800aee2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	4907      	ldr	r1, [pc, #28]	; (800aef8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aeda:	4808      	ldr	r0, [pc, #32]	; (800aefc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aedc:	f7ff fdda 	bl	800aa94 <USBD_GetString>
 800aee0:	e004      	b.n	800aeec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	4904      	ldr	r1, [pc, #16]	; (800aef8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aee6:	4805      	ldr	r0, [pc, #20]	; (800aefc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aee8:	f7ff fdd4 	bl	800aa94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aeec:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	2000193c 	.word	0x2000193c
 800aefc:	0800b6f4 	.word	0x0800b6f4

0800af00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	6039      	str	r1, [r7, #0]
 800af0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	4907      	ldr	r1, [pc, #28]	; (800af34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af16:	4808      	ldr	r0, [pc, #32]	; (800af38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af18:	f7ff fdbc 	bl	800aa94 <USBD_GetString>
 800af1c:	e004      	b.n	800af28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	4904      	ldr	r1, [pc, #16]	; (800af34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800af22:	4805      	ldr	r0, [pc, #20]	; (800af38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800af24:	f7ff fdb6 	bl	800aa94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af28:	4b02      	ldr	r3, [pc, #8]	; (800af34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	2000193c 	.word	0x2000193c
 800af38:	0800b700 	.word	0x0800b700

0800af3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af42:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <Get_SerialNum+0x44>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af48:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <Get_SerialNum+0x48>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af4e:	4b0e      	ldr	r3, [pc, #56]	; (800af88 <Get_SerialNum+0x4c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4413      	add	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d009      	beq.n	800af76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af62:	2208      	movs	r2, #8
 800af64:	4909      	ldr	r1, [pc, #36]	; (800af8c <Get_SerialNum+0x50>)
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f814 	bl	800af94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af6c:	2204      	movs	r2, #4
 800af6e:	4908      	ldr	r1, [pc, #32]	; (800af90 <Get_SerialNum+0x54>)
 800af70:	68b8      	ldr	r0, [r7, #8]
 800af72:	f000 f80f 	bl	800af94 <IntToUnicode>
  }
}
 800af76:	bf00      	nop
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	1fff7a10 	.word	0x1fff7a10
 800af84:	1fff7a14 	.word	0x1fff7a14
 800af88:	1fff7a18 	.word	0x1fff7a18
 800af8c:	200000e2 	.word	0x200000e2
 800af90:	200000f2 	.word	0x200000f2

0800af94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af94:	b480      	push	{r7}
 800af96:	b087      	sub	sp, #28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	4613      	mov	r3, r2
 800afa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800afa6:	2300      	movs	r3, #0
 800afa8:	75fb      	strb	r3, [r7, #23]
 800afaa:	e027      	b.n	800affc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	0f1b      	lsrs	r3, r3, #28
 800afb0:	2b09      	cmp	r3, #9
 800afb2:	d80b      	bhi.n	800afcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	0f1b      	lsrs	r3, r3, #28
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	4619      	mov	r1, r3
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	440b      	add	r3, r1
 800afc4:	3230      	adds	r2, #48	; 0x30
 800afc6:	b2d2      	uxtb	r2, r2
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	e00a      	b.n	800afe2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	0f1b      	lsrs	r3, r3, #28
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4619      	mov	r1, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	440b      	add	r3, r1
 800afdc:	3237      	adds	r2, #55	; 0x37
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	011b      	lsls	r3, r3, #4
 800afe6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	3301      	adds	r3, #1
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	4413      	add	r3, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	3301      	adds	r3, #1
 800affa:	75fb      	strb	r3, [r7, #23]
 800affc:	7dfa      	ldrb	r2, [r7, #23]
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	429a      	cmp	r2, r3
 800b002:	d3d3      	bcc.n	800afac <IntToUnicode+0x18>
  }
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	371c      	adds	r7, #28
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
	...

0800b014 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08a      	sub	sp, #40	; 0x28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b01c:	f107 0314 	add.w	r3, r7, #20
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	605a      	str	r2, [r3, #4]
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	60da      	str	r2, [r3, #12]
 800b02a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b034:	d147      	bne.n	800b0c6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b036:	2300      	movs	r3, #0
 800b038:	613b      	str	r3, [r7, #16]
 800b03a:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03e:	4a24      	ldr	r2, [pc, #144]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b040:	f043 0301 	orr.w	r3, r3, #1
 800b044:	6313      	str	r3, [r2, #48]	; 0x30
 800b046:	4b22      	ldr	r3, [pc, #136]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	613b      	str	r3, [r7, #16]
 800b050:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b052:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b058:	2300      	movs	r3, #0
 800b05a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b060:	f107 0314 	add.w	r3, r7, #20
 800b064:	4619      	mov	r1, r3
 800b066:	481b      	ldr	r0, [pc, #108]	; (800b0d4 <HAL_PCD_MspInit+0xc0>)
 800b068:	f7f7 fc6c 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b06c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b072:	2302      	movs	r3, #2
 800b074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b076:	2300      	movs	r3, #0
 800b078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b07a:	2300      	movs	r3, #0
 800b07c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b07e:	230a      	movs	r3, #10
 800b080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b082:	f107 0314 	add.w	r3, r7, #20
 800b086:	4619      	mov	r1, r3
 800b088:	4812      	ldr	r0, [pc, #72]	; (800b0d4 <HAL_PCD_MspInit+0xc0>)
 800b08a:	f7f7 fc5b 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b08e:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b092:	4a0f      	ldr	r2, [pc, #60]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b098:	6353      	str	r3, [r2, #52]	; 0x34
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a2:	4a0b      	ldr	r2, [pc, #44]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b0a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0a8:	6453      	str	r3, [r2, #68]	; 0x44
 800b0aa:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <HAL_PCD_MspInit+0xbc>)
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	2043      	movs	r0, #67	; 0x43
 800b0bc:	f7f7 f809 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0c0:	2043      	movs	r0, #67	; 0x43
 800b0c2:	f7f7 f822 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0c6:	bf00      	nop
 800b0c8:	3728      	adds	r7, #40	; 0x28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	40023800 	.word	0x40023800
 800b0d4:	40020000 	.word	0x40020000

0800b0d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7fe fb71 	bl	80097d6 <USBD_LL_SetupStage>
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b10e:	78fa      	ldrb	r2, [r7, #3]
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	4613      	mov	r3, r2
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	440b      	add	r3, r1
 800b11c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	78fb      	ldrb	r3, [r7, #3]
 800b124:	4619      	mov	r1, r3
 800b126:	f7fe fbab 	bl	8009880 <USBD_LL_DataOutStage>
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b144:	78fa      	ldrb	r2, [r7, #3]
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4613      	mov	r3, r2
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	334c      	adds	r3, #76	; 0x4c
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	4619      	mov	r1, r3
 800b15a:	f7fe fc44 	bl	80099e6 <USBD_LL_DataInStage>
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fd78 	bl	8009c6a <USBD_LL_SOF>
}
 800b17a:	bf00      	nop
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b18a:	2301      	movs	r3, #1
 800b18c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d102      	bne.n	800b19c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
 800b19a:	e008      	b.n	800b1ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d102      	bne.n	800b1aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	73fb      	strb	r3, [r7, #15]
 800b1a8:	e001      	b.n	800b1ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b1aa:	f7f5 fe75 	bl	8000e98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1b4:	7bfa      	ldrb	r2, [r7, #15]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe fd18 	bl	8009bee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fcc0 	bl	8009b4a <USBD_LL_Reset>
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe fd13 	bl	8009c0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	6812      	ldr	r2, [r2, #0]
 800b1f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a1b      	ldr	r3, [r3, #32]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d005      	beq.n	800b214 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b208:	4b04      	ldr	r3, [pc, #16]	; (800b21c <HAL_PCD_SuspendCallback+0x48>)
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	4a03      	ldr	r2, [pc, #12]	; (800b21c <HAL_PCD_SuspendCallback+0x48>)
 800b20e:	f043 0306 	orr.w	r3, r3, #6
 800b212:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	e000ed00 	.word	0xe000ed00

0800b220 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe fd03 	bl	8009c3a <USBD_LL_Resume>
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe fd5b 	bl	8009d0e <USBD_LL_IsoOUTIncomplete>
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b272:	78fa      	ldrb	r2, [r7, #3]
 800b274:	4611      	mov	r1, r2
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fd17 	bl	8009caa <USBD_LL_IsoINIncomplete>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fd6d 	bl	8009d72 <USBD_LL_DevConnected>
}
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fd6a 	bl	8009d88 <USBD_LL_DevDisconnected>
}
 800b2b4:	bf00      	nop
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d13c      	bne.n	800b346 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b2cc:	4a20      	ldr	r2, [pc, #128]	; (800b350 <USBD_LL_Init+0x94>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a1e      	ldr	r2, [pc, #120]	; (800b350 <USBD_LL_Init+0x94>)
 800b2d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2dc:	4b1c      	ldr	r3, [pc, #112]	; (800b350 <USBD_LL_Init+0x94>)
 800b2de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <USBD_LL_Init+0x94>)
 800b2e6:	2204      	movs	r2, #4
 800b2e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b2ea:	4b19      	ldr	r3, [pc, #100]	; (800b350 <USBD_LL_Init+0x94>)
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2f0:	4b17      	ldr	r3, [pc, #92]	; (800b350 <USBD_LL_Init+0x94>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <USBD_LL_Init+0x94>)
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <USBD_LL_Init+0x94>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b302:	4b13      	ldr	r3, [pc, #76]	; (800b350 <USBD_LL_Init+0x94>)
 800b304:	2200      	movs	r2, #0
 800b306:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b308:	4b11      	ldr	r3, [pc, #68]	; (800b350 <USBD_LL_Init+0x94>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b30e:	4b10      	ldr	r3, [pc, #64]	; (800b350 <USBD_LL_Init+0x94>)
 800b310:	2201      	movs	r2, #1
 800b312:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b314:	4b0e      	ldr	r3, [pc, #56]	; (800b350 <USBD_LL_Init+0x94>)
 800b316:	2200      	movs	r2, #0
 800b318:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b31a:	480d      	ldr	r0, [pc, #52]	; (800b350 <USBD_LL_Init+0x94>)
 800b31c:	f7f7 fcc7 	bl	8002cae <HAL_PCD_Init>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b326:	f7f5 fdb7 	bl	8000e98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b32a:	2180      	movs	r1, #128	; 0x80
 800b32c:	4808      	ldr	r0, [pc, #32]	; (800b350 <USBD_LL_Init+0x94>)
 800b32e:	f7f8 ff1e 	bl	800416e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b332:	2240      	movs	r2, #64	; 0x40
 800b334:	2100      	movs	r1, #0
 800b336:	4806      	ldr	r0, [pc, #24]	; (800b350 <USBD_LL_Init+0x94>)
 800b338:	f7f8 fed2 	bl	80040e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b33c:	2280      	movs	r2, #128	; 0x80
 800b33e:	2101      	movs	r1, #1
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <USBD_LL_Init+0x94>)
 800b342:	f7f8 fecd 	bl	80040e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20001b3c 	.word	0x20001b3c

0800b354 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f7 fdbc 	bl	8002ee8 <HAL_PCD_Start>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f942 	bl	800b600 <USBD_Get_USB_Status>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b380:	7bbb      	ldrb	r3, [r7, #14]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	4608      	mov	r0, r1
 800b394:	4611      	mov	r1, r2
 800b396:	461a      	mov	r2, r3
 800b398:	4603      	mov	r3, r0
 800b39a:	70fb      	strb	r3, [r7, #3]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70bb      	strb	r3, [r7, #2]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3b2:	78bb      	ldrb	r3, [r7, #2]
 800b3b4:	883a      	ldrh	r2, [r7, #0]
 800b3b6:	78f9      	ldrb	r1, [r7, #3]
 800b3b8:	f7f8 fa8d 	bl	80038d6 <HAL_PCD_EP_Open>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 f91c 	bl	800b600 <USBD_Get_USB_Status>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3f0:	78fa      	ldrb	r2, [r7, #3]
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7f8 fad6 	bl	80039a6 <HAL_PCD_EP_Close>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	4618      	mov	r0, r3
 800b402:	f000 f8fd 	bl	800b600 <USBD_Get_USB_Status>
 800b406:	4603      	mov	r3, r0
 800b408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f7f8 fbae 	bl	8003b94 <HAL_PCD_EP_SetStall>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 f8de 	bl	800b600 <USBD_Get_USB_Status>
 800b444:	4603      	mov	r3, r0
 800b446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b448:	7bbb      	ldrb	r3, [r7, #14]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	460b      	mov	r3, r1
 800b45c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b46c:	78fa      	ldrb	r2, [r7, #3]
 800b46e:	4611      	mov	r1, r2
 800b470:	4618      	mov	r0, r3
 800b472:	f7f8 fbf3 	bl	8003c5c <HAL_PCD_EP_ClrStall>
 800b476:	4603      	mov	r3, r0
 800b478:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f8bf 	bl	800b600 <USBD_Get_USB_Status>
 800b482:	4603      	mov	r3, r0
 800b484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b486:	7bbb      	ldrb	r3, [r7, #14]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da0b      	bge.n	800b4c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4ac:	78fb      	ldrb	r3, [r7, #3]
 800b4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4b2:	68f9      	ldr	r1, [r7, #12]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	440b      	add	r3, r1
 800b4be:	333e      	adds	r3, #62	; 0x3e
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	e00b      	b.n	800b4dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	440b      	add	r3, r1
 800b4d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b4da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b502:	78fa      	ldrb	r2, [r7, #3]
 800b504:	4611      	mov	r1, r2
 800b506:	4618      	mov	r0, r3
 800b508:	f7f8 f9c0 	bl	800388c <HAL_PCD_SetAddress>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f874 	bl	800b600 <USBD_Get_USB_Status>
 800b518:	4603      	mov	r3, r0
 800b51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b086      	sub	sp, #24
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	603b      	str	r3, [r7, #0]
 800b532:	460b      	mov	r3, r1
 800b534:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b544:	7af9      	ldrb	r1, [r7, #11]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	f7f8 fad9 	bl	8003b00 <HAL_PCD_EP_Transmit>
 800b54e:	4603      	mov	r3, r0
 800b550:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	4618      	mov	r0, r3
 800b556:	f000 f853 	bl	800b600 <USBD_Get_USB_Status>
 800b55a:	4603      	mov	r3, r0
 800b55c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b55e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	607a      	str	r2, [r7, #4]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	460b      	mov	r3, r1
 800b576:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b586:	7af9      	ldrb	r1, [r7, #11]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	f7f8 fa55 	bl	8003a3a <HAL_PCD_EP_Receive>
 800b590:	4603      	mov	r3, r0
 800b592:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	4618      	mov	r0, r3
 800b598:	f000 f832 	bl	800b600 <USBD_Get_USB_Status>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5bc:	78fa      	ldrb	r2, [r7, #3]
 800b5be:	4611      	mov	r1, r2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f8 fa85 	bl	8003ad0 <HAL_PCD_EP_GetRxCount>
 800b5c6:	4603      	mov	r3, r0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5d8:	4b03      	ldr	r3, [pc, #12]	; (800b5e8 <USBD_static_malloc+0x18>)
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	20002048 	.word	0x20002048

0800b5ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]

}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	2b03      	cmp	r3, #3
 800b612:	d817      	bhi.n	800b644 <USBD_Get_USB_Status+0x44>
 800b614:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <USBD_Get_USB_Status+0x1c>)
 800b616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61a:	bf00      	nop
 800b61c:	0800b62d 	.word	0x0800b62d
 800b620:	0800b633 	.word	0x0800b633
 800b624:	0800b639 	.word	0x0800b639
 800b628:	0800b63f 	.word	0x0800b63f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	73fb      	strb	r3, [r7, #15]
    break;
 800b630:	e00b      	b.n	800b64a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b632:	2303      	movs	r3, #3
 800b634:	73fb      	strb	r3, [r7, #15]
    break;
 800b636:	e008      	b.n	800b64a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b638:	2301      	movs	r3, #1
 800b63a:	73fb      	strb	r3, [r7, #15]
    break;
 800b63c:	e005      	b.n	800b64a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b63e:	2303      	movs	r3, #3
 800b640:	73fb      	strb	r3, [r7, #15]
    break;
 800b642:	e002      	b.n	800b64a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b644:	2303      	movs	r3, #3
 800b646:	73fb      	strb	r3, [r7, #15]
    break;
 800b648:	bf00      	nop
  }
  return usb_status;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <__libc_init_array>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	4d0d      	ldr	r5, [pc, #52]	; (800b690 <__libc_init_array+0x38>)
 800b65c:	4c0d      	ldr	r4, [pc, #52]	; (800b694 <__libc_init_array+0x3c>)
 800b65e:	1b64      	subs	r4, r4, r5
 800b660:	10a4      	asrs	r4, r4, #2
 800b662:	2600      	movs	r6, #0
 800b664:	42a6      	cmp	r6, r4
 800b666:	d109      	bne.n	800b67c <__libc_init_array+0x24>
 800b668:	4d0b      	ldr	r5, [pc, #44]	; (800b698 <__libc_init_array+0x40>)
 800b66a:	4c0c      	ldr	r4, [pc, #48]	; (800b69c <__libc_init_array+0x44>)
 800b66c:	f000 f820 	bl	800b6b0 <_init>
 800b670:	1b64      	subs	r4, r4, r5
 800b672:	10a4      	asrs	r4, r4, #2
 800b674:	2600      	movs	r6, #0
 800b676:	42a6      	cmp	r6, r4
 800b678:	d105      	bne.n	800b686 <__libc_init_array+0x2e>
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b680:	4798      	blx	r3
 800b682:	3601      	adds	r6, #1
 800b684:	e7ee      	b.n	800b664 <__libc_init_array+0xc>
 800b686:	f855 3b04 	ldr.w	r3, [r5], #4
 800b68a:	4798      	blx	r3
 800b68c:	3601      	adds	r6, #1
 800b68e:	e7f2      	b.n	800b676 <__libc_init_array+0x1e>
 800b690:	0800b738 	.word	0x0800b738
 800b694:	0800b738 	.word	0x0800b738
 800b698:	0800b738 	.word	0x0800b738
 800b69c:	0800b73c 	.word	0x0800b73c

0800b6a0 <memset>:
 800b6a0:	4402      	add	r2, r0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d100      	bne.n	800b6aa <memset+0xa>
 800b6a8:	4770      	bx	lr
 800b6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b6ae:	e7f9      	b.n	800b6a4 <memset+0x4>

0800b6b0 <_init>:
 800b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b2:	bf00      	nop
 800b6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6b6:	bc08      	pop	{r3}
 800b6b8:	469e      	mov	lr, r3
 800b6ba:	4770      	bx	lr

0800b6bc <_fini>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	bf00      	nop
 800b6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c2:	bc08      	pop	{r3}
 800b6c4:	469e      	mov	lr, r3
 800b6c6:	4770      	bx	lr
